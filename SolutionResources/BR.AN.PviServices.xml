<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BR.AN.PVIServices</name>
    </assembly>
    <members>
        <member name="T:BR.AN.PviServices.AppInfo">
            <summary>
            Information about the application
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.AppInfo.Version">
            <summary>
            A string tat describes the version of the application such as a Date and Time. Defindes by the AS when downloading the project
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.AppInfo.OsVersion">
            <summary>
            The AR-Version such as V4.08
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.AppInfo.ConfigurationId">
            <summary>
            The user-selected configuration ID
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ApplicationInfoXmlTags">
            <summary>
            xml Tags for application information
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviCpuParameterAttribute">
            <summary>The Attribute expands the properties of all classes derived from <seealso cref="T:BR.AN.PviServices.DeviceBase"/>. 
            It specifies a communication parameter which has to be used as CPU communication parameter. 
            All other parameters belong to the DEVICE object.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviCpuParameterAttribute.#ctor">
            <summary>Initializes a new instance of the PviDeviceParameter class.</summary>
        </member>
        <member name="T:BR.AN.PviServices.PviKeyWordAttribute">
            <summary>The Attribute expands the properties of all classes derived from <seealso cref="T:BR.AN.PviServices.DeviceBase"/>. 
            It specifies the PVI key word for the communication parameter. 
            When implementing a Designer componet do niot forget to filter only properties which are marked by this attribute.
            All other parameters should not be visible in the Designer component.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviKeyWordAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the PviKeyWordAttribute class.</summary>
            <param name="scText">The property indicator string, as expected by PVI.</param>
        </member>
        <member name="P:BR.AN.PviServices.PviKeyWordAttribute.PviKeyWord">
            <summary>Gets the key word for the parameter expected by the PVI parameter parser.</summary>
            <value>The key word for the parameter expected by the PVI parameter parser.</value>
        </member>
        <member name="T:BR.AN.PviServices.PVIEventTypes">
            <summary>The enumeration of the supported PVI event types.
            Some event types are generated by PVI Manager, others are generated by the line. 
            Therefore, event types which can be used depends on the PVI line being used.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.Error">
            <summary>Signals a change in the error state or error code of a process object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.Connect">
            <summary>Signals a change in the connection description of a process object. The event data contains the connection description in the format of the POBJ_ACC_CONNECT access type.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.Data">
            <summary>Signals a change in a variable object's process data or an end to a process object's error state.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.State">
            <summary>Signals a status change in the process object. The event data contains the status in the format of the POBJ_ACC_STATUS access type. This event is generated by the line being used, not PVI Manager. Which line this status event supports can be found in the respective line description.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.DataFormat">
            <summary>Signals a change in a variable object's data format.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.Proceeding">
            <summary>This event informs a PVICOM application about the progress of active requests. The POBJ_EVENT_PROCEEDING event is only sent to the application which made the request. This progress information is sent as a PROCEEDING_INFO structure. This event is generated by the line being used, not PVI Manager. Which line this progress event supports can be found in the respective line description. </summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.UserTag">
            <summary>Signals a change in the user tag. The event data contains the user tag in string format (see also access type POBJ_ACC_USERTAG).</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIEventTypes.LineEventsBase">
            <summary>Values bigger 255 signals special line events. These events are generated by the line being used, not PVI Manager. Which PVI line these line events supports can be found in the respective line description. </summary>
        </member>
        <member name="T:BR.AN.PviServices.PVIDataStates">
            <summary>The enumeration of the supported PVI data states.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.CastOverflow">
            <summary>Upper range exceeded during type casting.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.CastUnderFlow">
            <summary>Lower range exceeded during type casting.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.OverFlow">
            <summary>Upper limit value exceeded with the data function.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.UnderFlow">
            <summary>Lower limit value exceeded with the data function.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.ProcessObjectOutOfRange">
            <summary>The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.LinkObjectOutOfRange">
            <summary>A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.InheratedError">
            <summary>Error state was received from a higher-level process object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIDataStates.EventDataChanged">
            <summary>Event data overwritten by more current data at least once.</summary>
        </member>
        <member name="T:BR.AN.PviServices.PVIReadAccessTypes">
            <summary>The enumeration of the supported PVI data states.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Type">
            <summary>POBJ_ACC_OBJECT  
            Object type of the process object. The object type is returned in 4-byte binary format (integer).
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Version">
            <summary>POBJ_ACC_VERSION  
            Either the version of the PVI component or the version of the PLC object is read depending on the object type. 
            This version information is returned in string format. Each version entry is terminated with a LF ("\n").
            Syntax for PVI components version (object type: Pvi, Line, Device):
                    [Title] ([FileName]) [FileVersion] [Date] \n
            Syntax for PLC object version (object type: Station, Cpu, Module, Task):
                    [Title] [Version] [Date] \n
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE and TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Error">
            <summary>POBJ_ACC_ERROR  
            Reads error code of the most recent error.
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.EventMask">
            <summary>POBJ_ACC_EVMASK  
            Event notification settings:
                "e" ............ Change in error state. 
                "d" ............ Change in data. 
                "f" ............ Change in data format. 
                "c" ............ Change in the connection description. 
                "p" ............ Progress information about active requests. 
                "s" ............ Status changes. 
                'u' ............ Change in the user tag string. 
                'l' ............ Special line events
                empty string ... events are enabled.
            Specifications here take place using string format. 
            The sequence of letters doesn't really matter. 
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ChildObjects">
            <summary>POBJ_ACC_LIST  
            List of all process objects which have been created in PVI Manager under this process object. 
            This list is returned as a string. 
            The list includes the PVI name and the type of process objects.  
            Syntax of the process object list:
                [ObjectName] OT=[ObjectType] \t
                All object entries are separated by the \t character (tabulator).
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE and TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ChildTypes">
            <summary>POBJ_ACC_LIST_EXTERN  
            List of all process objects which can be created in PVI Manager under this process object. 
            This list is returned as a string. 
            The list includes the connection name and the type of process objects. 
            Syntax of the process object list:
                [ConnectionName] OT=[ObjectType] \t
                All object entries are separated by the \t character (tabulator).
            Unlike POBJ_ACC_LIST, all process objects which can be created are shown in this list. 
            This list is created by PVI Manager for process object types "Pvi" and "Line" and includes all lines or devices which were installed with PVI Setup. 
            For all other process object types, this list is put together by the line being used. 
            Which line for which process object type this access type supports can be found in the respective line description.
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE and TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Connection">
            <summary>POBJ_ACC_CONNECT  
            The currently set connection description (string format). The object hierarchy is not listed when using unique object names.
            Supported by: LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Data">
            <summary>POBJ_ACC_DATA  
            The variable process data.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.State">
            <summary>POBJ_ACC_STATUS  
            The status of a PLC object.
            Syntax for CPU:
                ST=[Status]
                Status ..... WarmStart, ColdStart, Reset, Reconfiguration, NMI, Diagnose, Error.
                
            Syntax for MODULE:
                ST=[Status] (LD=[LoadType]) (ID=[Identification])
                Status ............. NonExisting, Exists, Loading, Incomplete, Complete, Ready, InUse. 
                LoadType ........... SysRam, Ram, SysRom, Rom, MemCard, FixRam, DRam, PerMem. 
                Identification ..... Identification number for the most current logbook entry for BR log data modules. 
                
            Syntax for TASK:
                ST=[Status]
                Status ..... NonExisting, Unrunnable, Idle, Running, Stopped, Starting, Stopping, Resuming, Resetting.
                
            Syntax for PVAR:
                ST=[Status] (FC=[Force])  (IO=[Attribute]) (SC=[Scope])
                Force ......... 1 Force state ON. 
                                0 Force state OFF. 
                Attribute ..... "r" .. input. 
                                "w" .. output. 
                Status ........ "Const" for constants. 
                                "Var" for variables. 
                                "Lkn" for link nodes.  
                Scope ......... Scope of the variable on the PLC:
                                'g': global. 
                                'l': local. 
                                'd': dynamic object (also always local). 
            Supported by: CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.BasicAttributes">
            <summary>POBJ_ACC_TYPE  
            The object attributes property, the mode for type casting (cast mode) and/or data format of a variable object.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ExtendedAttributes">
            <summary>POBJ_ACC_TYPE_EXTERN  
            Reads object attributes and data format description as well as the name of the structure definition and elements of a PLC variable.
            Supported PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Refresh">
            <summary>POBJ_ACC_REFRESH  
            The currently set refresh time (4-byte binary value).
            Refresh rate in milli seconds:
                -1 ..... Cyclic data refresh is turned off. 
                0 ...... Data refresh is only carried out once. 
                > 0 .... Cyclic data refresh is carried out with the specified refresh rate. 
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Hysteresis">
            <summary>POBJ_ACC_HYSTERESE  
            The currently set event hysteresis (string format).
            As with the HY parameter, event hysteresis is defined by a hysteresis value in string format. 
            Unlike the object description however, the "HY=" parameter is left out here.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.DefaultValue">
            <summary>POBJ_ACC_DEFAULT  
            The set default value (DV parameter) of the variable object. 
            The value is returned in string format.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ConversionFunction">
            <summary>POBJ_ACC_FUNCTION  
            The currently set data function (string format).
            As with the FS parameter, the data function is defined by a function description in string format. 
            Unlike the object description however, the "FS=" parameter is left out here.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ExtendedInternalAttributes">
            <summary>POBJ_ACC_TYPE_INTERN  
            Reads object attributes and data format description as well as the name of the structure definition and elements of a PLC variable.
            Supported PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Upload">
            <summary>POBJ_ACC_UPLOAD  
            BR module from PLC and saves it to a file The PVICOM function ReadArgumentRequest must be used for this access type. 
            Supported by: MODULE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.DateNTime">
            <summary>POBJ_ACC_DATE_TIME  
            The date and time. 
            The data is transferred in binary form in the format of the "tm" structure. 
            Date and time is defined as local time.
            Definition of the "tm" structure in C/C++ (32-bit integer):
                struct tm
                {
                    int tm_sec;     // seconds after the minute - [0,59] 
                    int tm_min;     // minutes after the hour - [0,59] 
                    int tm_hour;    // hours since midnight - [0,23]
                    int tm_mday;    // day of the month - [1,31] 
                    int tm_mon;     // months since January - [0,11]
                    int tm_year;    // years since 1900
                    int tm_wday;    // days since Sunday - [0,6]
                    int tm_yday;    // days since January 1 - [0,365]
                    int tm_isdst;   // daylight savings time flag
                };
            The mode of operation of the access depends on the process object type being used. 
            With process object types Pvi or Cpu, current information about the date and time (local time zone) is read from the PC or PLC. 
            With access via a process object of type Module, the date and time or creation or the last set date and time are read.
            Supported by: PVI, CPU and MODULE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.PLC_Memory">
            <summary>POBJ_ACC_MEM_INFO  
            Information in string format about all existing PLC data memory. 
            Syntax of the description string:
                { [Entry1] } { [Entry2] } ... { [EntryN] }
                Each [Entry] expression contains information for a certain memory type.
                [Entry]: LD=[MemoryType] SL=[Length] SF=[LengthFree] SB=[Block]
                         MemoryType ..... Memory type (RAM, MemCard, etc.). 
                         Length ......... Size of memory (total, in bytes). 
                         LengthFree ..... Size of free memory (in bytes). 
                         Block .......... Size of the largest free memory area (in bytes).
                         
            Example: "{ LD=Ram SL=65535 SF=16384 SB=4096 } { LD=FixRam ... }"
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ModuleType">
            <summary>POBJ_ACC_MOD_TYPE  
            Information about a module in string format. 
            Syntax of the description string:
                MT=[ModuleType]  ML=[ModuleLength]  (DL=[DataLength])  (VI=[Version])
                ModuleType ..... Module type as a numeric expression. 
                ModuleLength ... Length of the module in bytes. 
                DataLength ..... Length of the reference data in bytes. 
                Version ........ Version of the reference data format. 
                The parameters DL and VI are only listed for BR log data modules.
            Supported by: MODULE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.StreamUpload">
            <summary>POBJ_ACC_UPLOAD_STM  
            BR module from the PLC and transfers it to the application in the form of binary data. 
            The PVICOM function PviReadArgumentRequest or ReadArgumentRequest must be used for this access type.
            Supported by: MODULE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ModuleData">
            <summary>POBJ_ACC_MOD_DATA  
            Reference data from a module. This access type can only be used in connection with BR log data modules.
            Supported by: MODULE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Lines">
            <summary>POBJ_ACC_LIST_LINE  
            List of all list objects which can be created in PVI Manager under the PVI base object. 
            This list is created by PVI Manager and includes all lines installed with PVI Setup in string format. 
            Syntax of the line object list:
                [LineName1] \t [LineName2] ...
                LineName ... connection name for the line object.
                             All object entries are separated with the character \t (tabulator).
            Supported by: PVI.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Devices">
            <summary>POBJ_ACC_LIST_DEVICE  
            List of all device object which can be created in PVI Manager under the line object. 
            This list is created by PVI Manager and includes all device installed with PVI Setup for this line in string format.
            Syntax of the device object list:
                [DeviceName1] \t [DeviceName2] ...
                DeviceName .... Connection name for the device object.
                                All object entries are separated with the character \t (tabulator).
            Supported by: LINE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Stations">
            <summary>POBJ_ACC_LIST_STATIONS  
            List of all station objects which can be created in PVI Manager under the corresponding process object. 
            This list is created by the line being used. 
            Which line for which process object type this access type supports can be found in the respective line description. 
            Syntax of the station object list with station names specification:
                [StationName1] \t [StationName2] ...
                StationName ... Connection name for the station object.
                                All object entries are separated with the character \t (tabulator).
                                
            Syntax of the station object list with station number specification:
                [MinNumber] [MaxNumber]
            Supported by: LINE and DEVICE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Cpus">
            <summary>POBJ_ACC_LIST_CPU  
            List of all CPU objects which can be created in PVI Manager under the corresponding process object. 
            This list is created by the line being used. 
            Which line for which process object type this access type supports can be found in the respective line description. 
            Syntax of the CPU object list:
                [CPUName1] \t [CPUName2] ...
                CPUName ... Connection name for the CPU object.
                            All object entries are separated with the character \t (tabulator).
            Supported by: LINE, DEVICE and STATION.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Modules">
            <summary>POBJ_ACC_ LIST_MODULE  
            List of all module objects which can be created in PVI Manager under the corresponding process object. 
            This list is created by the line being used. 
            Which line for which process object type this access type supports can be found in the respective line description.
            Syntax of the module object list:
                [ModuleName1] \t [ModuleName2] ...
                ModuleName .... Connection name (module object)
                                All object entries are separated with the character \t (tabulator).
            Supported by: LINE, DEVICE, STATION and CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Tasks">
            <summary>POBJ_ACC_LIST_TASK  
            List of all task objects which can be created in PVI Manager under the corresponding process object. 
            This list is created by the line being used. 
            Which line for which process object type this access type supports can be found in the respective line description.
            Syntax of the task object list:
                [TaskName1] \t [TaskName2] ...  
                TaskName ...... Connection name for the task object. 
                                All object entries are separated with the character \t (tabulator).
            Supported by: LINE, DEVICE, STATION, CPU and MODULE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Variables">
            <summary>POBJ_ACC_LIST_PVAR  
            List of all variable objects which can be created in PVI Manager under the corresponding process object. 
            This list is created by the line being used. 
            Which line for which process object type this access type supports can be found in the respective line description.
            Syntax of the variable object list:
                [VariableName 1] ([Info]) \t [VariableName 2] ([Info]) ...
                All object entries are separated with the character \t (tabulator).
                VariableName ..... Connection name for the variable object.
                Info ............. Description string for additional information
                
            Syntax of the additional information:
                SC=[Scope]  VT=[VariableType ... ]
                Scope ............. Scope of a variable on the PLC:
                                    "g":  global 
                                    "l": local 
                                    "d":  dynamic object (also always local)
                VariableType ...... Specification of the data format of a variable on the PLC See also the POBJ_ACC_TYPE_EXTERN access type.
            Supported by: LINE, DEVICE, STATION, CPU, MODULE and TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.PLC_Info">
            <summary>POBJ_ACC_CPU_INFO  
            CPU information in string format.
            Syntax of the description string:
                CN=[CPUName]  CT=[CPUType]  AW=[APMType]
                CPUName ..... Logical name of the CPU
                CPUType ..... PLC type
                APMType ..... Application memory type
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.UserTag">
            <summary>POBJ_ACC_USERTAG   
            With the user tags, PVI applications can assign a private user code or specific user data to a process object.
            Such as module, task, or variable object.
            User tags are only managed by PVI, not evaluated.
            Supported by: MODULE, TASK and VARIABLE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.License">
            <summary>POBJ_ACC_INFO_LICENCE  
            PVI Manager license information. 
            License information is read in the format of the T_PVI_INFO_LICENCE structure.
            Supported by: PVI.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Clients">
            <summary>POBJ_ACC_LIST_CLIENTS  
            List of all clients logged onto the PVI Manager (module names of PVICOM applications).
            Syntax of the client list:
                [ClientModule1] \t [ClientModule2] ...
                All client entries are separated with the character \t (tab).
            Supported by: PVI.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Snapshot">
            <summary>POBJ_ACC_SNAPSHOT  
            Path name of the last specified Snapshot file (string format).
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.CPUInfo">
            <summary>BRC_ACC_INFO
            Read the object info.
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.TaskClasses">
            <summary>BRC_ACC_TASKCLASSLISTEXT
            Read the task classes list. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ModuleList">
            <summary>BRC_ACC_MODLISTEXT
            Read the module list. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ReadPhysicalMemory">
            <summary>BRC_ACC_READMEM
            Read memory from a physical plc address. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.CpuMemoryInfo">
            <summary>BRC_ACC_MEMINFO
            Read the memory areaes and their assignment. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.TTService">
            <summary>BRC_ACC_TTSERVICE
            Call any TT service. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ReadErrorLogBook">
            <summary>BRC_ACC_READERROR
            Read entries form the error log book. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.UploadHardWareInfo">
            <summary>BRC_ACC_HWUPLOAD
            Upload the hardware info from the PLC. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.DiagnoseModuleList">
            <summary>BRC_ACC_DIAGMODLIST
            Read the module list in diangosis mode. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SavePath">
            <summary>BRC_ACC_SAVEPATH
            Read the save path for the module list. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ResolveNodeNumber">
            <summary>BRC_ACC_COMM_DST
            Read the destination properties for an existing TCPIP connection. 
            Supported by: CPU.Connection.TcpIP</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.LinkNodeList">
            <summary>BRC_ACC_LIST_LKN
            Read the link node list. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.LibraryList">
            <summary>BRC_ACC_LIST_LIBRARY
            Read the list of libraries. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.LIC_GetLicenseStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_CpuInfo">
            <summary>POBJ_LNANSL_ACC_XML_CPU_INFO
            Read the CPU info for ANSL connections. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_ModuleInfo">
            <summary>POBJ_LNANSL_ACC_XML_MOD_INFO
            Read the Module info for ANSL connections. 
            Supported by: MODULE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_TaskInfo">
            <summary>POBJ_LNANSL_ACC_XML_TASK_INFO
            Read the Task info for ANSL connections. 
            Supported by: TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_ModuleList">
            <summary>POBJ_LNANSL_ACC_XML_MOD_LIST
            List all ANSL module list. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_LISTConnections">
            <summary>POBJ_LNANSL_ACC_CONN_LIST
            List all ANSL connections. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_MemoryInfo">
            <summary>POBJ_LNANSL_ACC_XML_MEM_INFO
            Read the memory info. 
            Supported by: CPU if ANSL connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_HardwareInfo">
            <summary>POBJ_LNANSL_ACC_XML_HW_INFO
            Read the hardware info. 
            Supported by: CPU if ANSL connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_RedundancyInfo">
            <summary>POBJ_LNANSL_ACC_XML_RED_INFO
            Read the redundancy info. 
            Supported by: CPU if ANSL connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_CpuExtendedInfo">
            <summary>POBJ_LNANSL_ACC_XML_EXT_INFO
            Read the extended cpu info. 
            Supported by: CPU if ANSL connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_TracePointsReadData">
            <summary>POBJ_LNANSL_ACC_TP_READ
            Read the tracepoint data. 
            Supported by: TASK if ANSL connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.ANSL_ApplicationInfo">
            <summary>POBJ_LNANSL_ACC_XML_APPL_INFO
            Read the project/application info. 
            Supported by: CPU if ANSL connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.Diagnostics">
            <summary>
            
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SNMPListStations">
            <summary>Get the listz of all available MAC addresses.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SNMPListGlobalVariables">
            <summary>Get the list of all available global SNMP variables. Variables which do not belong to a MAC address.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SNMPListLocalVariables">
            <summary>Get the list of all available local variables. Variables which belong to a MAC address.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SNMPConnectLine">
            <summary>Create teh PVI line object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SNMPConnectDevice">
            <summary>Create teh PVI device object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SNMPConnectStation">
            <summary>Create the PVI station object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIReadAccessTypes.SNMPConnectVariable">
            <summary>Create the PVI variable object.</summary>
        </member>
        <member name="T:BR.AN.PviServices.PVIWriteAccessTypes">
            <summary>The enumeration of the supported PVI data states.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.EventMask">
            <summary>POBJ_ACC_EVMASK  
            Event notification settings:
                "e" ............ Change in error state. 
                "d" ............ Change in data. 
                "f" ............ Change in data format. 
                "c" ............ Change in the connection description. 
                "p" ............ Progress information about active requests. 
                "s" ............ Status changes. 
                'u' ............ Change in the user tag string. 
                'l' ............ Special line events
                empty string ... events are enabled.
            Specifications here take place using string format. 
            The sequence of letters doesn't really matter. 
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Connection">
            <summary>POBJ_ACC_CONNECT  
            The connection description consists of the connection name as well as (usually) optional connection parameters. 
            The connection name is the name of the service object being used in PVI Manager. 
            The connection description is defined with the CD parameter in the process object description when creating the process object or with the POBJ_ACC_CONNECT access type. 
            The object hierarchy is not listed when using unique object names.
            The connection description is specified as a string. 
            Changing this connection description triggers the POBJ_EVENT_CONNECT event. 
            If an empty string is specified as the connection description for a line object, 
            then it and all subordinate process objects are handled as internal process objects.
            Supported by: LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Data">
            <summary>POBJ_ACC_DATA  
            The variable process data.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.State">
            <summary>POBJ_ACC_STATUS  
            The status of a PLC object.
            Syntax:
                ST=[Status]
                LD=[Command]
            States for CPU objects:
                WarmStart, ColdStart, Reset, Diagnose ..... flags for Restart CPU. 
            Commands for MODULE objects:
                Delete ..... Deletes module object on the PLC .
            States for TASK objects:
                Start, Stop, Resume, Cycle([Number]) ..... Execute those commands for the TASK.
                
            To delete a PLC module, carry out a write access with the string "LD=Delete".
            To delete PLC module reference data (only possible for BR log data modules), write access must be performed using the string "LD=Clear".
            Supported by: CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.BasicAttributes">
            <summary>POBJ_ACC_TYPE  
            The object attributes property, the mode for type casting (cast mode) and/or data format of a variable object.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ExtendedAttributes">
            <summary>POBJ_ACC_TYPE_EXTERN  
            Reads object attributes and data format description as well as the name of the structure definition and elements of a PLC variable.
            Supported PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Refresh">
            <summary>POBJ_ACC_REFRESH  
            The currently set refresh time (4-byte binary value).
            Refresh rate in milli seconds:
                -1 ..... Cyclic data refresh is turned off. 
                0 ...... Data refresh is only carried out once. 
                > 0 .... Cyclic data refresh is carried out with the specified refresh rate. 
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Hysteresis">
            <summary>POBJ_ACC_HYSTERESE  
            The currently set event hysteresis (string format).
            As with the HY parameter, event hysteresis is defined by a hysteresis value in string format. 
            Unlike the object description however, the "HY=" parameter is left out here.
            Syntax:
                HY=[HysteresisValue]
                HysteresisValue ... The hysteresis value can be specified as an integer 
                                    (specify without commas, valid value range: 2 - 2147483647) 
                                    or as a 64-bit floating point number (specify with decimal, valid value range: greater than 0.0). 
                                    A value outside of the valid ranges deactivates the hysteresis function for the object (e.g. "HY=0.0" or "HY=1").
            Examples: 
                HY=10
                HY=2.5
                
            If event hysteresis is defined, then a POBJ_EVENT_DATA event is only triggered if the value change is greater than or equal to the specified hysteresis value. 
            For array variables, the hysteresis filter is used for all array elements. 
            The event hysteresis is only active in the read direction and always refers to the process value.
            The hysteresis filter in variable objects is intended to suppress system-specific value fluctuations (e.g. measurement value fluctuations on temperature sensors). 
            The hysteresis filter in the link object can be used for user-specific demands.
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ConversionFunction">
            <summary>POBJ_ACC_FUNCTION  
            The definition of a data function for single variables or array variables of type Integer or Floating Point. 
            The data function is specified as a function description..
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Download">
            <summary>POBJ_ACC_DOWNLOAD  
            Read a BR module from a file and transfers it to the PLC. 
            Syntax of the calling string for POBJ_ACC_DOWNLOAD:
                (")[FileName](") (MN=[ModuleName]) (LD=[MemoryType])  (IM=[InstallationMode])
                or
                (")[FileName](") ("MT=[ModuleType]) MN=[ModuleName]  ...") (LD=[MemoryType])
                
                MN .... Name of the BR module on the PLC.
                        If this parameter is not specified, then the module name entered in the BR module is used. 
                        However, a module name must be specified if a module type (MT parameter) is defined in the calling string.  
                MT .... Module type for module compilation. 
                        Additional parameters can be specified in the calling string depending on the compilation library being used.  
                LD .... Memory type. 
                        Default "LD=Ram". 
                        The memory type selects the target memory on the PLC for the download. 
                        The following memory types can be specified: 
                            SysRam
                            Ram
                            SysRom
                            Rom
                            MemCard
                            FixRam
                            DRam  
                IM .... Installation mode Default "IM=Overload". 
                        The installation mode determines how a task module is transferred. 
                            Overload ... Standard mechanism.
                            Copy ....... Exchange is several cycles. 
                            OneCycle ... Exchange in one cycle. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.DateNTime">
            <summary>POBJ_ACC_DATE_TIME  
            The date and time of the PLC. 
            The data is transferred in binary form in the format of the "tm" structure. 
            Date and time is defined as local time.
            Definition of the "tm" structure in C/C++ (32-bit integer):
                struct tm
                {
                    int tm_sec;     // seconds after the minute - [0,59] 
                    int tm_min;     // minutes after the hour - [0,59] 
                    int tm_hour;    // hours since midnight - [0,23]
                    int tm_mday;    // day of the month - [1,31] 
                    int tm_mon;     // months since January - [0,11]
                    int tm_year;    // years since 1900
                    int tm_wday;    // days since Sunday - [0,6]
                    int tm_yday;    // days since January 1 - [0,365]
                    int tm_isdst;   // daylight savings time flag
                };
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Delete_PLC_Memory">
            <summary>POBJ_ACC_MEM_DELETE  
            Deletes specified data memory on the PLC The memory type is defined by the LD parameter in the description string.
            Syntax of the description string:
                LD=[MemoryType]
                MemoryType ..... Ram, SysRom, Rom, MemCard, FixRam, PerMem
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.StreamDownLoad">
            <summary>POBJ_ACC_DOWNLOAD_STM  
            Transfers BR module from binary user data to PLC.
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.CpuModuleDelete">
            <summary>POBJ_ACC_MOD_DELETE
            Delete a module using the link ID of the CPU object.  
            Syntax of the description string:
                MN=[ModuleName]
                ModuleName ..... The name of the module to be deleted
            Supported by: CPU.</summary>
            <remarks>The access type POBJ_ACC_MOD_DELETE is only supported by PVI Manager Version 3.50 (PviMan.exe file version) or higher, and by INA2000 Version 3.44 (LnIna2.dll file version).</remarks>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Cancel">
            <summary>POBJ_ACC_CANCEL  
            CPU information in string format.
            Syntax of the description string:
                CN=[CPUName]  CT=[CPUType]  AW=[APMType]
                CPUName ..... Logical name of the CPU
                CPUType ..... PLC type
                APMType ..... Application memory type
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.UserTag">
            <summary>POBJ_ACC_USERTAG   
            With the user tags, PVI applications can assign a private user code or specific user data to a process object.
            Such as module, task, or variable object.
            User tags are only managed by PVI, not evaluated.
            Supported by: MODULE, TASK and VARIABLE.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.Snapshot">
            <summary>POBJ_ACC_SNAPSHOT  
            Executes Snapshot function. 
            When calling, the name of the snapshot file needs to be specified as a string. 
            A path can also be specified.
            Only the process object for which the Snapshot function was activated and all subordinate process objects (object hierarchy) are written to the Snapshot file. 
            For example, if the Snapshot function was triggered for a task object, 
            then only this task object and the variable objects created underneath it are written to the Snapshot file. 
            If information about all established objects in the PVI Manager should be written, 
            then activation must take place using the global PVI object (base object "/Pvi").
            All other functions in PVI Manager are blocked while the Snapshot function is carried out. 
            This secures the consistency of the Snapshot data, 
            but can also lead to immense timing variations when there are large quantities of data being handled by PVI Manager. 
            Therefore, the Snapshot function should only be used sparingly.
            Supported by: PVI, LINE, DEVICE, STATION, CPU, MODULE, TASK and PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.WritePhysicalMemory">
            <summary>BRC_ACC_WRITEMEM
            Write memory to a physical plc address. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.TTService">
            <summary>BRC_ACC_TTSERVICE
            Call any TT service. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.DeleteDiagModule">
            <summary>BRC_ACC_DIAGDELETE
            Delete module in diagnostic mode. 
            Supported by: MODULE, TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.StartModule">
            <summary>BRC_ACC_MODSTOP
            Stop module. 
            Supported by: MODULE, TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.StopModule">
            <summary>BRC_ACC_MODSTOP
            Stop module. 
            Supported by: MODULE, TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ResumeModule">
            <summary>BRC_ACC_MODRESUME
            Resume module. 
            Supported by: MODULE, TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.BurnModule">
            <summary>BRC_ACC_MODBURN
            Burn module. 
            Supported by: MODULE, TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.DeleteModule">
            <summary>BRC_ACC_MODDELETE
            Resume module. 
            Supported by: MODULE, TASK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ClearMemory">
            <summary>BRC_ACC_FORCE_ON
            Set force state to ON. 
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ForceOn">
            <summary>BRC_ACC_CLEARMEM
            Clear the specified memory type on the PLC. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ForceOff">
            <summary>BRC_ACC_FORCE_OFF
            Set force state to OFF. 
            Supported by: PVAR.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.SavePath">
            <summary>BRC_ACC_SAVEPATH
            Write the save path for the module list. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.GlobalForceOFF">
            <summary>BRC_ACC_LKN_FC_OFF or BRC_ACC_FORCE_OFF (for SG3)
            Force all Linknodes OFF. 
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ANSL_RedundancyControl">
            <summary>POBJ_LNANSL_ACC_RED_CTRL
            Active CPU switched or application synchronized.
            Supported by: CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ANSL_TracePointsRegister">
            <summary>POBJ_LNANSL_ACC_TP_REGISTER
            Register trace points. 
            Supported by: TASK if ANSL connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.PVIWriteAccessTypes.ANSL_TracePointsUnregister">
            <summary>POBJ_LNANSL_ACC_TP_DEREGISTER
            Unregister trace points. 
            Supported by: TASK if ANSL connection.</summary>
        </member>
        <member name="T:BR.AN.PviServices.Base">
            <summary>
            The abstract class Base builds the base for all PviServices objects. It provides base methods
            and properties for each PviServices object.
            Because all object classes in PviServices are derived from Base, 
            every property and method defined in the Base class is available in all objects.
            Derived classes override some of these methods and properties 
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviCBEvents">
            <summary>This interface defines the basic methods for PVI call back events.</summary>
        </member>
        <member name="T:BR.AN.PviServices.PInvokePvicom">
            <summary>This interface defines the basic methods for PVI call back events.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.GetWindowText(System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.GetWindowContextHelpId(System.Int32)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.GetActiveWindow">
            <summary>Not supported.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.GetParent(System.Int32)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.GetTickCount">
            <summary>Gets the system ticks.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.PviXMCreate(System.UInt32,System.UInt32@,System.String,BR.AN.PviServices.ObjectType,System.String,System.IntPtr,System.UInt32,System.UInt32,System.String)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="pLinkId"></param>
            <param name="pObjName"></param>
            <param name="nPObjType"></param>
            <param name="pPObjDesc"></param>
            <param name="hEventMsg"></param>
            <param name="eventMsgNo"></param>
            <param name="eventParam"></param>
            <param name="pLinkDesc"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.PviXMCreateRequest(System.UInt32,System.String,BR.AN.PviServices.ObjectType,System.String,System.IntPtr,System.UInt32,System.UInt32,System.String,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="pObjName"></param>
            <param name="nPObjType"></param>
            <param name="pPObjDesc"></param>
            <param name="hEventMsg"></param>
            <param name="eventMsgNo"></param>
            <param name="eventParam"></param>
            <param name="pLinkDesc"></param>
            <param name="hRespMsg"></param>
            <param name="respMsgNo"></param>
            <param name="respParam"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XMCreateRequest(System.UInt32,System.String,BR.AN.PviServices.ObjectType,System.String,System.IntPtr,System.UInt32,System.UInt32,System.String,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="pObjName"></param>
            <param name="nPObjType"></param>
            <param name="pPObjDesc"></param>
            <param name="hEventMsg"></param>
            <param name="eventMsgNo"></param>
            <param name="eventParam"></param>
            <param name="pLinkDesc"></param>
            <param name="hRespMsg"></param>
            <param name="respMsgNo"></param>
            <param name="respParam"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XCreateResponse(System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="eventMsgNo"></param>
            <param name="linkID"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XLinkResponse(System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="eventMsgNo"></param>
            <param name="linkID"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XUnlinkResponse(System.UInt32,System.IntPtr)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="wParam"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.PviXCWriteRequest(System.UInt32,System.UInt32,BR.AN.PviServices.AccessTypes,System.IntPtr,System.Int32,BR.AN.PviServices.PviCallback,System.UInt32,System.UInt32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="linkID"></param>
            <param name="nAccess"></param>
            <param name="pData"></param>
            <param name="dataLen"></param>
            <param name="nRespMsg"></param>
            <param name="respMsgNo"></param>
            <param name="respParam"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XWriteResponse(System.UInt32,System.IntPtr)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="eventMsgNo"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XWriteResultResponse(System.UInt32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="eventMsgNo"></param>
            <param name="pData"></param>
            <param name="dataLen"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XReadResponse(System.UInt32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="EventMsgNum"></param>
            <param name="pData"></param>
            <param name="dataLen"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XMReadArgumentRequest(System.UInt32,System.UInt32,BR.AN.PviServices.AccessTypes,System.IntPtr,System.Int32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="linkID"></param>
            <param name="nAccess"></param>
            <param name="pData"></param>
            <param name="dataLen"></param>
            <param name="nRespMsg"></param>
            <param name="respMsgNo"></param>
            <param name="respParam"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.PviXCLinkRequest(System.UInt32,System.String,BR.AN.PviServices.PviCallback,System.UInt32,System.UInt32,System.String,BR.AN.PviServices.PviCallback,System.UInt32,System.UInt32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="pObjName"></param>
            <param name="pCallback"></param>
            <param name="eventMsgNo"></param>
            <param name="eventParam"></param>
            <param name="pLinkDesc"></param>
            <param name="hRespMsg"></param>
            <param name="respMsgNo"></param>
            <param name="respParam"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PInvokePvicom.Pvi64XMLinkRequest(System.UInt32,System.Byte[],System.IntPtr,System.UInt32,System.UInt32,System.Byte[],System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            {secret}
            </summary>
            <param name="hPvi"></param>
            <param name="pObjName"></param>
            <param name="hEventMsg"></param>
            <param name="eventMsgNo"></param>
            <param name="eventParam"></param>
            <param name="pLinkDesc"></param>
            <param name="hRespMsg"></param>
            <param name="respMsgNo"></param>
            <param name="respParam"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event.
            Some event types are generated by PVI Manager, others are generated by the line. Therefore, event types which can be used depends on the PVI line being used.
            Event                   Number  Description  
            POBJ_EVENT_ERROR        #3      Signals a change in the error state or error code of a process object  
            POBJ_EVENT_CONNECT      #10     Signals a change in the connection description of a process object. 
                                            The event data contains the connection description in the format of the POBJ_ACC_CONNECT access type.  
            POBJ_EVENT_DATA         #11     Signals a change in a variable object's process data or an end to a process object's error state  
            POBJ_EVENT_STATUS       #12     Signals a status change in the process object. 
                                            The event data contains the status in the format of the POBJ_ACC_STATUS access type. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this status event supports can be found in the respective line description.  
            POBJ_EVENT_DATAFORM     #13     Signals a change in a variable object's data format  
            POBJ_EVENT_PROCEEDING   #128    This event informs a PVICOM application about the progress of active requests. 
                                            The POBJ_EVENT_PROCEEDING event is only sent to the application which made the request. 
                                            This progress information is sent as a PROCEEDING_INFO structure. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this progress event supports can be found in the respective line description.  
            POBJ_EVENT_USERTAG      #129    Signals a change in the user tag. The event data contains the user tag in string format (see also access type POBJ_ACC_USERTAG). 
            POBJ_EVENT_LINE_xxx     (> 255) Signals special line events. 
                                            These events are generated by the line being used, not PVI Manager. 
                                            Which PVI line these line events supports can be found in the respective line description.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviUnLinked(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="errorCode">The error code if unlinking the object failed.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviDeleted(System.Int32)">
            <summary>Global CallBack function for PVI deletes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviChangedLink(System.Int32)">
            <summary>Global CallBack function for PVI link changes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviCBEvents.OnPviCancelled(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI Cancel events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="type">The access type.</param>
        </member>
        <member name="F:BR.AN.PviServices.Base.propNoDisconnectedEvent">
            <summary>This member is used to call disconnect without sending a disconnected event.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Base.propReturnValue">
            <summary>The Return value of any function which normally returns void.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.CancelRequest">
            <summary>Helper to remove event handlers for an unused object.</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.CancelRequest(System.Boolean)">
            <summary>Helper to remove event handlers for an unused object.</summary>
            <param name="silent">If set to TRUE there will be no response.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.UpdateServiceCreateState">
            <summary>
            Helper to update the create state for service disconnect events
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.Initialize(System.String,System.Boolean)">
            <param name="name">Name of this object</param>
            <param name="addToVColls">Indicates wheter this member will be accesible through the logical objects collection or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.#ctor(BR.AN.PviServices.Base)">
            <summary>Initializes a new instance of the internal Base class.</summary>
            <param name="parentObj">The parent object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.#ctor">
            <summary>
            Initializes a new instance of the Base class.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Base class and sets the name of this object
            </summary>
            <param name="name">Name of this object</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.#ctor(BR.AN.PviServices.Base,System.String)">
            <summary>Initializes a new instance of the internal Base class.</summary>
            <param name="parentObj">The parent object.</param>
            <param name="name">Name of this object</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the Base class and sets the name of this object</summary>
            <param name="name">Name of this object</param>
            <param name="addToVColls">Indicates wheter this member will be accesible through the logical objects collection or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.#ctor(BR.AN.PviServices.Base,System.String,System.Boolean)">
            <summary>Initializes a new instance of the internal Base class.</summary>
            <param name="parentObj">The parent object.</param>
            <param name="name">Name of this object</param>
            <param name="addToVColls">Indicates wheter this member will be accesible through the logical objects collection or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.Finalize">
            <summary>Disconnects all temporaly PviServices Objects</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.AddToCBReceivers">
            <summary>Helper to add all object which might receive a PVI callback to the service IDs array</summary>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.RemoveFromCBReceivers">
            <summary>Helper to remove the object from the PVI callback servicers ID array</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.RemoveObject">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
            <summary>Helper to </summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.RemoveReferences">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.RemoveFromBaseCollections">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.Remove">
            <summary>
            This method removes the instances references from the PviServices hierarchy.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.Fire_Deleted(BR.AN.PviServices.PviEventArgs)">
            <summary>Helper to fire the Deleted event.</summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnDeleted(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnDeleted is called when a Module was deleted on the plc. The function raises the Deleted event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.Fire_Connected(BR.AN.PviServices.PviEventArgs)">
            <summary>Helper to fire the connected event.</summary>
            <param name="e">PviEventArgs object</param>
            <returns>true if the object is not already connected else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnLinked(System.Int32,BR.AN.PviServices.Action)">
            <summary>Raises the Linked event for the object</summary>
            <param name="errorCode">The error number.</param>
            <param name="actionCode">The action code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instance was connected. The function raises the Connected event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnConnectionChanged(System.Int32,BR.AN.PviServices.Action)">
            <summary>The function is called when the instances connection has been changed. The function raises the ConnectionChanged event.</summary>
            <param name="errorCode">The error number</param>
            <param name="action">The action number</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.reCreateState">
            <summary>Helper to recreate the items after a Service Disconnect</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.getLinkDescription">
            <summary>Helper to get the link description for the object.</summary>
            <returns>The link description for the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.GetConnectionDescription">
            <summary>Call this method to get the connection descriptionString for the object.</summary>
            <returns>The connection description used to create the PVI object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.Connect">
            <summary>Creates a connection of this instance to its process object.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>Creates a connection of this instance to its process object.</summary>
            <param name="connectionType">ConnectionType</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.ChangeConnection">
            <summary>Use this member function to change the connection of the object.
            When the function has changed the connection the Event ConnectionChanged will be fired.</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.Disconnect">
            <summary>Deletes the connection of this instance to its process object.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.DisconnectRet(System.UInt32)">
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.Disconnect(System.Boolean)">
            <summary>Deletes the connection of this instance to its process object.</summary>
            <param name="noResponse">Do we want a response or not. Default the response will be sent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.Call_Connected(BR.AN.PviServices.PviEventArgs)">
            <summary>Helper to rais connected event.</summary>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.Fire_Connected(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>Call this member to raise the Connected Event.</summary>
            <param name="sender">The calling object.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.Fire_ConnectedEvent(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>Call this member to raise the Connected Event.</summary>
            <param name="sender">The calling object.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.FireDisconnected(System.Int32,BR.AN.PviServices.Action)">
            <summary>
            Helper to fire internal disconnected events
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="action">The action code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instance was disconnected. The function raises the Disconnected event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when an instances communication error occurs. The function raises the Error event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnSingleError(BR.AN.PviServices.PviEventArgs)">
            <summary>The function is called when an instances communication error occurs. The function raises the Error event.</summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnError(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when an error occured.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPropertyChanged(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when a property changed (e.g RefreshTime).
            The function raises the PropertyChanged event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="F:BR.AN.PviServices.Base.propDisposed">
            <summary>The item has been disposed so do not send any events any longer!!</summary>
        </member>
        <member name="F:BR.AN.PviServices.Base.propHasLinkObject">
            <summary>Gets if the PVI object has already a link objekt or not.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Base.propConnectionType">
            <summary>The type of Connection.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Base.GetObjectName">
            <summary>
            The Name of the object.
            </summary>
            <returns>The name of the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.Read_FormatEX(System.UInt32)">
            <summary>Helper to start reading PV Format</summary>
            <param name="lnkID">The link ID of the variable.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviCancelled(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="type">The access type.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event.
            Some event types are generated by PVI Manager, others are generated by the line. Therefore, event types which can be used depends on the PVI line being used.
            Event                   Number  Description  
            POBJ_EVENT_ERROR        #3      Signals a change in the error state or error code of a process object  
            POBJ_EVENT_CONNECT      #10     Signals a change in the connection description of a process object. 
                                            The event data contains the connection description in the format of the POBJ_ACC_CONNECT access type.  
            POBJ_EVENT_DATA         #11     Signals a change in a variable object's process data or an end to a process object's error state  
            POBJ_EVENT_STATUS       #12     Signals a status change in the process object. 
                                            The event data contains the status in the format of the POBJ_ACC_STATUS access type. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this status event supports can be found in the respective line description.  
            POBJ_EVENT_DATAFORM     #13     Signals a change in a variable object's data format  
            POBJ_EVENT_PROCEEDING   #128    This event informs a PVICOM application about the progress of active requests. 
                                            The POBJ_EVENT_PROCEEDING event is only sent to the application which made the request. 
                                            This progress information is sent as a PROCEEDING_INFO structure. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this progress event supports can be found in the respective line description.  
            POBJ_EVENT_USERTAG      #129    Signals a change in the user tag. The event data contains the user tag in string format (see also access type POBJ_ACC_USERTAG). 
            POBJ_EVENT_LINE_xxx     (> 255) Signals special line events. 
                                            These events are generated by the line being used, not PVI Manager. 
                                            Which PVI line these line events supports can be found in the respective line description.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviUnLinked(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="errorCode">The error code if unlinking the object failed.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviDeleted(System.Int32)">
            <summary>Global CallBack function for PVI deletes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Base.OnPviChangedLink(System.Int32)">
            <summary>Global CallBack function for PVI link changes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:BR.AN.PviServices.Base.ReturnValue">
            <summary>This member holds the return value of any method call.</summary>
            <value>0 if successful else the error code.</value>
        </member>
        <member name="E:BR.AN.PviServices.Base.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Base.Connected">
            <summary>
            Occurs when this instance is successfully connected.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Base.Linked">
            <summary>
            Occurs when this instance is successfully Linked.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Base.ConnectionChanged">
            <summary>Occurs when connection has been changed.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Base.Removed">
            <summary>Occurs when this instance is about to be removed.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Base.Disconnected">
            <summary>
            Occurs when this instance is successfully disconnected.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Base.Error">
            <summary>
            Occurs when this instance notifies an error.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Base.PropertyChanged">
            <summary>
            Occurs when the property of this instances changed. (e.g.RefreshTime changed)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.Address">
            <summary>
            Gets or sets the logical address of this instance.
            </summary>
            <example>
            For normal use its not necessary to set this property. In this case the value of the Address property 
            equals the Name property value.
            Sometimes its useful to use descriptive names for objects on the plc (tasks, variables):
            <code>
            // Creating a variable object with logical name
            Variable boiler_1_Temp = new Variable(cpuObj,"boiler_1_Temperature");
            // Setting Address property
            boiler_1_Temp.Address = "bArray[1].tmp";
            boiler_1_Temp.Connect();
            ...
            ...
            // So the Address property describes the name of the processvariable on the plc
            </code>
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Base.AddressEx">
            <summary>Gets the Address of the object. If the addresss is null gets the name.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.Name">
            <summary>
            Gets the logical name of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.Parent">
            <summary>
            Gets or sets the Parent object of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.FullName">
            <summary>
            Gets the FullName of this instance.
            </summary>
            <remarks>
            The FullName is build automatically by using the parent object of a PviServices object.
            
            The LogicalObjects collection will be automatically filled up by instancing a new PviServices
            object. For adding a new object the FullName describes the key for accessing an object in the
            LogicalObjects.
            For creating link objects to existing PviServices objects it is necessary to specify those LinkName
            with this FullName.
            </remarks>
            <example>
            <code>
            // Create a new Service object
            Service service = new Service(service_01);
            
            // Create a new Cpu objekt 
            // FullName after creation: "service_01.Cpu_01"
            Cpu cpu = new Cpu(service,"Cpu_01");		
            
            // Create a new Task object
            // FullName after creation: "service_01.Cpu_01.loctask"
            Task task_01 = new Task(cpu,"loctask");		
            
            // Create a new local Variable object
            // FullName after creation: "service_01.Cpu_01.loctask.int_l_var"
            Variable var_local_01 = new Variable(task_01,"int_l_var");
            
            // So the FullName shows the hierarchic position within the PviServices-configuration.
            </code>
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Base.PviPathName">
            <summary>
            Gets the name of the object including the type specifier.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.Service">
            <summary>
            Service property to override.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.UserData">
            <summary>
            Gets or sets the UserData for this instance.
            </summary>
            <remarks>
            The UserData-property provides a position to store special user information for a
            PviServices object.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.Base.MethodType">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.HasPVIConnection">
            <summary>
            Gets or sets if the object has a connection to PVI can be either a valid connection or a connection in error state.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.IsConnected">
            <summary>Gets or sets the connection state of the PviServices object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.HasLinkObject">
            <summary>Gets if the PVI object has already a link objekt or not.</summary>
            <value>HasLinkObject</value>
        </member>
        <member name="P:BR.AN.PviServices.Base.HasError">
            <summary>
            Gets the error state of the PviServices object.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.LogicalName">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.ObjectParam">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.Requests">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.Responses">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.LinkId">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.InternId">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.ConnectionType">
            <summary>Gets or sets the Type of connection.</summary>
            <value>ConnectionType</value>
        </member>
        <member name="P:BR.AN.PviServices.Base.ErrorCode">
            <summary>
            Gets an ErrorCode if an error occured.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.ErrorText">
            <summary>Gets an ErrorText if an error occured.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Base.LinkName">
            <summary>
            Gets or sets the LinkName of this instance
            </summary>
            <remarks>
            For accessing an existing object by linking, it is necessary to set the LinkName of the 
            link variable to call Connect(<see cref="T:BR.AN.PviServices.ConnectionType"/>)
            </remarks>
            <example>
            <code>
            // Creating service and cpu object
            Service service = new Service("Service1");
            service.Connect();
            Cpu cpu = new Cpu(service,"Cpu1");
            cpu.Connect();
            ..
            ..
            // Creating connection to global Variable
            Variable globVar = new Variable(cpu,"var1");
            globVar.Connect();
            globVar.Connected += new PviEventHandler(Var_Connected);
            ..
            ..
            private void Var_Connected(object sender, PviEventArgs e)
            {
            	// Creating link connection to existing variable
            	Variable linkToGlobVar = new Variable(cpuObj,"linkVar");
            	linkToGlobVar.LinkName = "Service1.Cpu1.var1";	// or globVar.FullName;
            	linkToGlobVar.Connect(ConnectionType.Link);
            }
            </code>
            So the LinkName property equals the FullName property of the PviServices object to link.
            </example>
        </member>
        <member name="T:BR.AN.PviServices.CollectionEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.CollectionEventArgs">
            <summary>
            An instance of this class defines additional eventinformation for collection events
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviEventArgs">
            <summary>
            An instances of this class defines additional event information.
            </summary>
            <remarks>
            e.g. An error event was notified by a Variable-object and the ErrorCode is 
            the additional information for this event.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.PviEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Logical name of the PviServices object</param>
            <param name="address">Logical address of the PviServices object</param>
            <param name="errorCode">ErrorCode of the PviServices object</param>
            <param name="language">Language of the PviServices object</param>
            <param name="action">Action</param>
        </member>
        <member name="M:BR.AN.PviServices.PviEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.Service)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Logical name of the PviServices object</param>
            <param name="address">Logical address of the PviServices object</param>
            <param name="errorCode">ErrorCode of the PviServices object</param>
            <param name="language">Language of the PviServices object</param>
            <param name="action">Action</param>
            <param name="service">Service object</param>
        </member>
        <member name="M:BR.AN.PviServices.PviEventArgs.SetErrorCode(System.Int32)">
            <summary>
            Sets the errorcode of the sending object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviEventArgs.Name">
            <summary>
            Gets the logical name of the sending object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviEventArgs.Address">
            <summary>
            Gets the logical address of the sending object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviEventArgs.ErrorCode">
            <summary>
            Gets the errorcode of the sending object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviEventArgs.ErrorText">
            <summary>
            Gets the errortext of the sending object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviEventArgs.Action">
            <summary>
            Gets the action of the sending object
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.CollectionEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.BaseCollection)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="objects">Objectlist</param>
        </member>
        <member name="P:BR.AN.PviServices.CollectionEventArgs.Objects">
            <summary>
            Gets a collection of referenced PviServices objects
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.BaseCollection">
            <summary>Abstract class</summary>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Connect">
            <summary>Connects each collection object.</summary>
            <remarks>The event Connected notifies that the connection of all elements succeded.</remarks>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>Connects each collection object using the ConnectionType property.</summary>
            <remarks>The Connected event notifies each successful created connection.</remarks>
            <param name="connectionType">ConnectionType</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnUploaded(BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when each PviServices object is successful uploaded.
            The method raises the Uploaded event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnDisconnected(BR.AN.PviServices.Base,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module object within the list is being disconnected.
            The method raises the Disconnected event.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnError(BR.AN.PviServices.Base,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a object within the list notifies an error.
            The method raises the Error event.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnCollectionConnected(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all connect requests of each PviServices object within the collection are responded.
            This method raises the CollectionConnected event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnConnected(BR.AN.PviServices.Base,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module object within the list is being connected.
            The method raises the Connected event.
            </summary>
            <param name="sender">The object causing this event</param>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnCollectionDisconnected(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all disconnect requests of each PviServices object within the collection are responded.
            This method raises the CollectionDisconnected event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnCollectionError(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when at least one PviServices object within the list notifies an error
            due to a collection connect request ().
            This method raises the CollectionError event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Clone">
            <summary>Helper to make a clone of the collection object.</summary>
            <returns>The clone of the object collection.</returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.RemoveFromCollection(BR.AN.PviServices.Base,BR.AN.PviServices.Action)">
            <summary>Initiate an object specific remove action.</summary>
            <param name="remObj">Object to be removed</param>
            <param name="nAction">The remove action</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.RemoveFromBaseCollections(System.String,System.Int32)">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
            <param name="logicalName">The logical object name</param>
            <param name="mode">The mode</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.RemoveFromCBReceivers">
            <summary>Helper to remove the object from the PVI callback servicers ID array</summary>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.AddToCBReceivers">
            <summary>Helper to add all object which might receive a PVI callback to the service IDs array</summary>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains the specific object.
            </summary>
            <param name="key">The object to search for.</param>
            <returns>true if contains, otherwise false</returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specific object.
            </summary>
            <param name="valObj">The object to search for.</param>
            <returns>true if contains, otherwise false</returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.ContainsKey(System.Object)">
            <summary>
            Determines whether the collection contains the specific object.
            </summary>
            <param name="key">Object key</param>
            <returns>true if contains, otherwise false</returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Remove(System.String)">
            <summary>Fuer LoggerEntries abstrakte Methode (Loeschen via Index)</summary>
            <param name="key">Der Schlüssel für das Objekt welches entfernt werden soll.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Remove(System.Object)">
            <summary>
            Fuer LoggerEntries abstrakte Methode (Loeschen via Index)
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.ElementAt(System.Int32)">
            <summary>Gets a logger entry by its ID</summary>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Add(System.Object,System.Object)">
            <summary>Fuer LoggerEntries Methode (hinzufügen)</summary>
            <param name="key">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.CheckFireUploadEvents(System.Int32,BR.AN.PviServices.Action,BR.AN.PviServices.Action)">
            <summary>Check wheter to fire events for the Collection</summary>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="actEvent">Event Action from CB</param>
            <param name="actCon">Connection Action from CB</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Add(System.Object,System.Object,System.Object)">
            <summary>Fuer LoggerEntries Methode (hinzufügen)</summary>
            <param name="primKey">the key</param>
            <param name="secKey">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="parentObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Fire_Connected(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>Helper for derived classes to fire the connected event</summary>
            <param name="sender">The object which caused the event.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Fire_Disconnected(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>Helper for derived classes to fire the disconnected event</summary>
            <param name="sender">The object which caused the event.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Fire_CollectionDisconnected(BR.AN.PviServices.CollectionEventArgs)">
            <summary>Helper for derived classes to fire the disconnected event</summary>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.Fire_Error(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>Helper for derived classes to fire the error event</summary>
            <param name="sender">The object which caused the event.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event.
            Some event types are generated by PVI Manager, others are generated by the line. Therefore, event types which can be used depends on the PVI line being used.
            Event                   Number  Description  
            POBJ_EVENT_ERROR        #3      Signals a change in the error state or error code of a process object  
            POBJ_EVENT_CONNECT      #10     Signals a change in the connection description of a process object. 
                                            The event data contains the connection description in the format of the POBJ_ACC_CONNECT access type.  
            POBJ_EVENT_DATA         #11     Signals a change in a variable object's process data or an end to a process object's error state  
            POBJ_EVENT_STATUS       #12     Signals a status change in the process object. 
                                            The event data contains the status in the format of the POBJ_ACC_STATUS access type. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this status event supports can be found in the respective line description.  
            POBJ_EVENT_DATAFORM     #13     Signals a change in a variable object's data format  
            POBJ_EVENT_PROCEEDING   #128    This event informs a PVICOM application about the progress of active requests. 
                                            The POBJ_EVENT_PROCEEDING event is only sent to the application which made the request. 
                                            This progress information is sent as a PROCEEDING_INFO structure. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this progress event supports can be found in the respective line description.  
            POBJ_EVENT_USERTAG      #129    Signals a change in the user tag. The event data contains the user tag in string format (see also access type POBJ_ACC_USERTAG). 
            POBJ_EVENT_LINE_xxx     (> 255) Signals special line events. 
                                            These events are generated by the line being used, not PVI Manager. 
                                            Which PVI line these line events supports can be found in the respective line description.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviUnLinked(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="errorCode">The error code if unlinking the object failed.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviDeleted(System.Int32)">
            <summary>Global CallBack function for PVI deletes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.BaseCollection.OnPviChangedLink(System.Int32)">
            <summary>Global CallBack function for PVI link changes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.Count">
            <summary>
            Gets the element count of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.Item(System.Object)">
            <summary>Indexer function.</summary>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.SyncRoot">
            <summary>
            SyncRoot
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.Parent">
            <summary>
            Gets the parent of this collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.Name">
            <summary>
            Gets the name of this collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.Values">
            <summary>
            Gets an ICollection containing the PviServices objects of this collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.Keys">
            <summary>
            Gets an ICollection containing the keys of this collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.IsSynchronized">
            <summary>
            Returns true if access to the collection is synchronized (thread-safe). 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.InternId">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.HasError">
            <summary>
            Property returns true when one PviServices
            object notified an Error.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.Service">
            <summary>Gets the service object of a PviServices object</summary>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.UserData">
            <summary>
            Gets or sets the UserData for this instance.
            </summary>
            <remarks>
            The UserData-property provides a position to store special user information for a
            PviServices object.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.BaseCollection.IsConnected">
            <summary>
            {secret}Gets a flag which defines whether all elements of the collection are connected.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.Connected">
            <summary>
            Occurs when a listobject is successfully connected.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.Disconnected">
            <summary>
            Occurs when a listobject is successfully diconnected.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.Error">
            <summary>
            Occurs when a listobject notifies an error.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.CollectionConnected">
            <summary>
            Occurs when all connection requests of each PviServices object within the collection are responded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.CollectionDisconnected">
            <summary>
            Occurs when all disconnection requests of each PviServices object within the collection are responded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.CollectionError">
            <summary>
            Occurs when at least one variable object within the list notifies an error.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.BaseCollection.Uploaded">
            <summary>
            Occurs when each PviServices object on the plc was successful uploaded.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.SynchronizableBaseCollection">
            <summary>
            An instance of this class represents a collection of Module objects. This instance
            provides special methods for for up- and downloading modules from the plc.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.SynchronizableBaseCollection.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.SynchronizableBaseCollection.#ctor(System.Object,System.String)">
            <summary>
            ctor
            </summary>
            <param name="parent">Parent object.</param>
            <param name="name">Collection name.</param>
        </member>
        <member name="M:BR.AN.PviServices.SynchronizableBaseCollection.#ctor(BR.AN.PviServices.CollectionType,System.Object,System.String)">
            <summary>
            ctor
            </summary>
            <param name="colType">Collection type</param>
            <param name="parentObj">Parent object.</param>
            <param name="name">Collection name.</param>
        </member>
        <member name="P:BR.AN.PviServices.SynchronizableBaseCollection.Synchronize">
            <summary>
            Gets or sets the synchronize property of this collection.
            The synchronization will only be executed if this flag is set to true and the collection has been uploaded at least once
            </summary>
            <remarks>
            Invokes synchronization between this collection and the module list on the PLC.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.SynchronizableBaseCollection.isSyncable">
            <summary>
            Gets wheter the collection has to be synced on MODULE- changed event.
            </summary>
        </member>
        <member name="T:BR.AN.DisposeEventArgs">
            <summary>An instances of this class defines additional event information.</summary>
        </member>
        <member name="M:BR.AN.DisposeEventArgs.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the DisposeEventArgs class.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="P:BR.AN.DisposeEventArgs.Disposing">
            <summary>Gets the flag indicating wheter to dispose or not.</summary>
        </member>
        <member name="T:BR.AN.DisposeEventHandler">
            <summary>Event declaration for disposing events.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.LCInfosEventHandler">
            <summary>Base delegate for PviServices license events.</summary>
            <param name="sender">The object which caused the event.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="T:BR.AN.BRSECComponentEntry">
            <summary>Struct implements the counter part for the C++ definition of the BRSECEntry Struct.</summary>
        </member>
        <member name="F:BR.AN.BRSECComponentEntry.RequiresBRIPC">
            <summary>RequiresBRIPC</summary>
        </member>
        <member name="F:BR.AN.BRSECComponentEntry.OrderId">
            <summary>OrderId</summary>
        </member>
        <member name="F:BR.AN.BRSECComponentEntry.LicenseText">
            <summary>LicenseText</summary>
        </member>
        <member name="T:BR.AN.LCEventArgs">
            <summary>An instances of this class defines additional license event information.</summary>
        </member>
        <member name="M:BR.AN.LCEventArgs.#ctor">
            <summary>Creates a new instance of this class.</summary>
        </member>
        <member name="M:BR.AN.LCEventArgs.#ctor(System.Int32)">
            <summary>Creates a new instance of this class.</summary>
            <param name="errorCode">ErrorCode of the PviServices object</param>
        </member>
        <member name="M:BR.AN.LCEventArgs.#ctor(System.Collections.ArrayList)">
            <summary>Creates a new instance of this class.</summary>
            <param name="listOfLCInfos">An array list containing the license info.</param>
        </member>
        <member name="M:BR.AN.LCEventArgs.Initialize(System.Int32)">
            <summary>Initialzes a new instance of this class.</summary>
            <param name="errorCode">ErrorCode of the PviServices object</param>
        </member>
        <member name="P:BR.AN.LCEventArgs.ErrorCode">
            <summary>Gets the error info for the recived data. 0 ... No error else a valid error number.</summary>
            <value>0 ... if the search functions succeeds else an error number.</value>
        </member>
        <member name="P:BR.AN.LCEventArgs.LicenseInfos">
            <summary>Gets the serial numbers for the DS Dongles. Will be empty if no serial info is given.</summary>
            <value>SerialNumbers for all DS keys got by the search functions.</value>
        </member>
        <member name="T:BR.AN.BuRIPCStates">
            <summary>States for the aplication executing PC.</summary>
        </member>
        <member name="F:BR.AN.BuRIPCStates.INVALID">
            <summary>The state is unknown call SearchBurIPC or any other search function to get a valid state.</summary>
        </member>
        <member name="F:BR.AN.BuRIPCStates.NoBuRIPC">
            <summary>Searching for a BuR IPC faild. It has to be a standard PC.</summary>
        </member>
        <member name="F:BR.AN.BuRIPCStates.RunningOnABuRIPC">
            <summary>The application is running on a BuR IPC.</summary>
        </member>
        <member name="T:BR.AN.LCInfo">
            <summary>Class implements the License Info properties</summary>
        </member>
        <member name="M:BR.AN.LCInfo.#ctor">
            <summary>Initializes a new instance of the LicenseInfo class.</summary>
        </member>
        <member name="M:BR.AN.LCInfo.#ctor(System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>Initializes a new instance of the LicenseInfo class.</summary>
            <param name="name">The name of the License Module or DS Key.</param>
            <param name="port">The port where the key was located (USBx, LPTx, COMx, DLL).</param>
            <param name="info">Additional license Info only valid for item locted in a DLL.</param>
            <param name="serial">The serial number of the LIC key.</param>
            <param name="activations">The array list of activated components by this key.</param>
        </member>
        <member name="M:BR.AN.LCInfo.Initialize(System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>Initializes the instance of the LicenseInfo class.</summary>
            <param name="name">The name of the License Module or DS Key.</param>
            <param name="port">The port where the key was located (USBx, LPTx, COMx, DLL).</param>
            <param name="info">Additional license Info only valid for item locted in a DLL.</param>
            <param name="serial">The serial number of the LIC key.</param>
            <param name="activations">The array list of activated components by this key.</param>
        </member>
        <member name="F:BR.AN.LCInfo.propDisposed">
            <summary>The item has been propDisposed so do not send any events any longer!!</summary>
        </member>
        <member name="M:BR.AN.LCInfo.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.LCInfo.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.LCInfo.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="E:BR.AN.LCInfo.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.LCInfo.SerialNumber">
            <summary>Gets the serial number for the DS Dongle. The string is empty if no serial is given.</summary>
            <value>SerialNumber for the DS key</value>
        </member>
        <member name="P:BR.AN.LCInfo.Name">
            <summary>Gets the name of the license. Undefined, Trial, Runtime or Locked</summary>
            <value>Name</value>
        </member>
        <member name="P:BR.AN.LCInfo.Info">
            <summary>Gets the additional license info e.g. the order number.</summary>
            <value>Additional license info.</value>
        </member>
        <member name="P:BR.AN.LCInfo.Port">
            <summary>Gets the port where the search function succeded reading license info.</summary>
            <value>The port where the search succeded. (can be LPT1 ... LPTn, USB1 ... USBn or DLL)</value>
        </member>
        <member name="P:BR.AN.LCInfo.Activations">
            <summary>Gets the list of licensed componets supported by this key.</summary>
            <value>The arrlist contains the product descriptions for all applications activated by this license.</value>
        </member>
        <member name="T:BR.AN.LicComponets">
            <summary>The class implements the information for a single licensed component.</summary>
        </member>
        <member name="M:BR.AN.LicComponets.#ctor">
            <summary>Initializes a new instance of the LicComponets class.</summary>
        </member>
        <member name="M:BR.AN.LicComponets.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance of the LicComponets class.</summary>
            <param name="orderID">The Order ID for this license package.</param>
            <param name="licText">The license text.</param>
            <param name="requiresBRIPC">indicates wheter the license is valid on all PCs (if set to FALSE) or only on B+R IPCs.</param>
        </member>
        <member name="M:BR.AN.LicComponets.Initialize(System.String,System.String,System.Boolean)">
            <summary>Initializes the instance of the LicComponets class.</summary>
            <param name="orderID">The Order ID for this license package.</param>
            <param name="licText">The license text.</param>
            <param name="requiresBRIPC">Indicates wheter the license is valid on all PCs (if set to FALSE) or only on B+R IPCs.</param>
        </member>
        <member name="F:BR.AN.LicComponets.propDisposed">
            <summary>The item has been propDisposed so do not send any events any longer!!</summary>
        </member>
        <member name="M:BR.AN.LicComponets.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.LicComponets.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.LicComponets.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="E:BR.AN.LicComponets.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.LicComponets.OrderID">
            <summary>Gets the order ID for this license package.</summary>
            <value>OrderID</value>
        </member>
        <member name="P:BR.AN.LicComponets.LicenseText">
            <summary>Gets the license text.</summary>
            <value>LicenseText</value>
        </member>
        <member name="P:BR.AN.LicComponets.RequiresBRIPC">
            <summary>Gets wheter the license is valid on all PCs (if set to FALSE) or only on B+R IPCs.</summary>
            <value>RequiresBRIPC</value>
        </member>
        <member name="T:BR.AN.BRLicenseInfo">
            <summary>Implements basic access functions to the B+R License DLL..</summary>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.#ctor">
            <summary>Initializes a new instance of the BRLicenseInfo class.</summary>
        </member>
        <member name="F:BR.AN.BRLicenseInfo.propDisposed">
            <summary>The item has been propDisposed so do not send any events any longer!!</summary>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.CallBackFindKeys(System.Int32,System.String,System.String,System.String,BR.AN.BRSECComponentEntry[])">
            <summary>The call back function for PInvoke to "Br_ReadDsKey" of "BrSecDll.dll".</summary>
            <param name="pCBData">A user defined pointer to any vaild data.</param>
            <param name="keySerial">The serial number for the DS Key or LIC module.</param>
            <param name="keyPort">The port where searching for LIC info.</param>
            <param name="dsID">The ID of the LIC key.</param>
            <param name="pSecInfos">A user defined pointer to any vaild data.</param>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.CallBackFindLicModules(System.Int32,System.String,System.String,System.String,BR.AN.BRSECComponentEntry[])">
            <summary>The call back function for PInvoke to "Br_ReadLcMod" of "BrSecDll.dll".</summary>
            <param name="pCBData">A user defined pointer to any vaild data.</param>
            <param name="licName">The serial number for the DS Key or LIC module.</param>
            <param name="licInfo">The port where searching for LIC info.</param>
            <param name="licID">The ID of the LIC Module.</param>
            <param name="pSecInfos">A user defined pointer to any vaild data.</param>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.CallBackFindBRIpc(System.Int32,System.Int32,System.Int32)">
            <summary>The call back function for PInvoke to "Br_FindBrIPC" of "BrSecDll.dll".</summary>
            <param name="pCBData">A user defined pointer to any vaild data.</param>
            <param name="appID">The application ID.</param>
            <param name="appSubId">The application sub ID.</param>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.OnCBFindKeys(BR.AN.LCInfo)">
            <summary>Overridable method called after the search function returned the license infos.</summary>
            <param name="lcInfo">The referenc to the license info.</param>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.OnCBFindBRIPc(System.Int32,System.Int32)">
            <summary>Overridable method called after the search function returned the BRIPC state.</summary>
            <param name="appID">The application ID.</param>
            <param name="appSubId">The application sub ID.</param>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.Search">
            <summary>Call this method to initiate a search for all available license keys.
            Searches for license DLLs in the appliaction executable path, for DS keys on all LPT ports and all USB prots.
            The result of the search will always be returned in the event <seealso cref="E:BR.AN.BRLicenseInfo.Found"/>.</summary>
            <remarks>There will be no <seealso cref="E:BR.AN.BRLicenseInfo.Found"/> event, if there is no license info available.</remarks>
            <returns>The number of licenses found. 
            0 if the function succeds but there are no license keys availabe. 
            -1 if the function call fails due to missing module "BrSecDll.dll".</returns>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.Search(System.String)">
            <summary>Call this method to initiate a search for all available license keys.
            Search for license DLLs in the appliaction executable path, for DS keys on all LPT ports and on all USB prots.
            The result of the search will always be returned in the event <seealso cref="E:BR.AN.BRLicenseInfo.Found"/>.</summary>
            <remarks>There will be no <seealso cref="E:BR.AN.BRLicenseInfo.Found"/> event, if there is no license info available.</remarks>
            <param name="moduleFileName">The path and the file name where to search for the license module.</param>
            <returns>The number of licenses found. 0 if the function succeds but there are no license keys availabe.</returns>
        </member>
        <member name="M:BR.AN.BRLicenseInfo.SearchBuRIpc">
            <summary>Call this method to get wheter the application is running on a BuR IPC or not.</summary>
            <returns>TRUE if the application is running on a BuR IPC else FALSE.</returns>
        </member>
        <member name="E:BR.AN.BRLicenseInfo.Found">
            <summary>When finished with search for license infos this event will be fired.</summary>
        </member>
        <member name="E:BR.AN.BRLicenseInfo.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.BRLicenseInfo.BRIPCState">
            <summary>Gets wheter the appliaction is running on a BuR IPC or not.</summary>
            <value>0 ... The state is unknown call SearchBurIPC or any other search function to get a valid state; 
            1 ... Searching for a BuR IPC faild. It has to be a standard PC; 
            2 ... The application is running on a BuR IPC.</value>
        </member>
        <member name="T:BR.AN.PviServices.MemoryInformation">
            <summary>
            All information about a memory on the PLC
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.MemoryInformation.#ctor(System.String)">
            <summary>
            Creates a new instance from the given Memory information xml-string
            </summary>
            <param name="memoryInformationXmlString"></param>
        </member>
        <member name="P:BR.AN.PviServices.MemoryInformation.Drives">
            <summary>
            List of all drives in this PLC
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemoryInformation.Memories">
            <summary>
            List off all memories on this PLC
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Drive">
            <summary>
            Information about a drive
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Drive.#ctor(System.Xml.XmlReader)">
            <summary>
            Create this object from a xml-Data
            </summary>
            <param name="xmlTReader">drive information as xml string</param>
        </member>
        <member name="P:BR.AN.PviServices.Drive.DriveNumber">
            <summary>
            Number of this drive/partition, e.g.: Drive0, Drive 1
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Drive.Name">
            <summary>
            Name of this drive/partition, e.g.: "SYSTEM", "Data"
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Drive.Id">
            <summary>
            ID of this drive/partition, e.g.: "C:"
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Drive.Size">
            <summary>
            Size of this drive/partition in bytes
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Drive.UsedSize">
            <summary>
            Used size of this drive/partition in bytes
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.MemoryInfo">
            <summary>
            Information about a memory
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.MemoryInfo.#ctor(System.Xml.XmlReader)">
            <summary>
            Create this object from a xml-Data.
            </summary>
            <param name="xmlTReader">memory information as xml string</param>
        </member>
        <member name="P:BR.AN.PviServices.MemoryInfo.Name">
            <summary>
            Name of this memory, e.g.: UserFlash, UserRam, RemanentGlobalPv,...
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemoryInfo.Type">
            <summary>
            Memory Type as an integer
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemoryInfo.Size">
            <summary>
            Size of this memory in bytes
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemoryInfo.UsedSize">
            <summary>
            Used size of this memory in bytes
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemoryInfo.MaxBlockSize">
            <summary>
            Biggest free memory block in bytes
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.HardwareInformation">
            <summary>
            All information about the PLC hardware
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInformation.#ctor(System.String)">
            <summary>
            Creates a new instance from the given Hardware information xml-string
            </summary>
            <param name="hardwareInformationXmlString"></param>
        </member>
        <member name="T:BR.AN.PviServices.HardwareInformationNode">
            <summary>
            Information about a node within the hardware information
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInformationNode.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates this object from a given xml-hwInfo string
            </summary>
            <param name="xmlTReader"></param>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInformationNode.Name">
            <summary>
            Name of the Node in hardware-information
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInformationNode.Path">
            <summary>
            Path of the Node in hardware-information
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInformationNode.State">
            <summary>
            State of the Node in hardware-information
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancyInformation">
            <summary>
            All information about a redundant system
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.RedundancyInformation.#ctor(System.String)">
            <summary>
            Creates a new instance from the given redundancy information xml-string
            </summary>
            <param name="redundancyInformationXmlString"></param>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.RifModeSwitchPosition">
            <summary>
            Position of the rIF Mode switch 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.CpuRedundancyPriotity">
            <summary>
            Redundacy priority of this CPU. Can differ from 'RifModeSwitchPosition' if rIF mode switch was changed afer restart
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.CpuRedundancyState">
            <summary>
            State of the redundant system
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.LongPushTimeStamp">
            <summary>
            Date and Time of the last long push ofon the rIF
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.ShortPushTimeStamp">
            <summary>
            Date and Time of the last short push ofon the rIF
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.CpuRedundancySwitchState">
            <summary>
            Possibilty to perform a redundacy switch
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.CpuRedundancyLink">
            <summary>
            State of the redundacy link
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.ConfigurationId">
            <summary>
            Configured name of the redundant configuration
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.RRadMappingStates">
            <summary>
            State of the RRadMapping
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.RRadStates">
            <summary>
            State of the RRad
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundancyInformation.IpConfigurations">
            <summary>
            Collection of all ip configurations
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundantCpuIpConfigurations">
            <summary>
            The ip configurations in this redundant system
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundantCpuIpConfigurations.Primary">
            <summary>
            List off all ethernet devices on the primary CPU and their IP Configurations
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundantCpuIpConfigurations.Secundary">
            <summary>
            List off all ethernet devices on the secundary CPU and their IP Configurations
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundantCpuIpConfigurations.Cluster">
            <summary>
            IP-Configuration for the virrtual cluster
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundantCpuIpConfigurations.Active">
            <summary>
            IP-Configuration for the activ CPU
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.RedundantCpuIpConfigurations.Inactive">
            <summary>
            IP-Configuration for the inactiv CPU
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.IpAdressConfiguration">
            <summary>
            All configurations for one ethernet device
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.IpAdressConfiguration.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates this object from a xml-string
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IpAdressConfiguration.DeviceName">
            <summary>
            Name of the ethernet device
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IpAdressConfiguration.IpAdress">
            <summary>
            IP Address of the ethernet device. Can be null
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IpAdressConfiguration.SubnetMask">
            <summary>
            Subnetmask of the ethernet device.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IpAdressConfiguration.HostName">
            <summary>
            Hostname of the ethernet device. Can be null
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IpAdressConfiguration.Baudrate">
            <summary>
            (Optional) Baudrate
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IpAdressConfiguration.AnslPort">
            <summary>
            configured ANSL Port
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IpAdressConfiguration.ClusterIpAdress">
            <summary>
            IP Address of the cluster device
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancyXmlTags">
            <summary>
            Names of the XML-tags within the redundancy information XML-String
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancyPriority">
            <summary>
            Priority of the CPU within the redundant system
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyPriority.Illegal">
            <summary>
            Error state
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyPriority.Primary">
            <summary>
            CPU is the primary CPU within the redundant system
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyPriority.Secundary">
            <summary>
            CPU is the secundary CPU within the redundant system
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancyState">
            <summary>
            State of the redundant system
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyState.Error">
            <summary>
            Redundant system is in an error state, e.g. Configuration IDs not equal 
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyState.Activ">
            <summary>
            This CPU is the activ CPU in an redundant system
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyState.Passiv">
            <summary>
            This CPU can no become the activ one
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyState.Standby">
            <summary>
            This CPU is currently not activ
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancySwitchPossibility">
            <summary>
            determines the possibility of a redundancy switch
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancySwitchPossibility.Impossible">
            <summary>
            redundancy switch is not possible
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancySwitchPossibility.MajorBump">
            <summary>
            redundancy switch is possible with a major bump
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancySwitchPossibility.MinorBump">
            <summary>
            redundancy switch is possible with a minor bump
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancySwitchPossibility.Bumpless">
            <summary>
            redundancy switch is bumpless possible 
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancyLinkState">
            <summary>
            State of the redundancy link
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyLinkState.NoLink">
            <summary>
            No Connection
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyLinkState.LinkOkay">
            <summary>
            Connection and sync
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancyRRadMappingStates">
            <summary>
            State of the RRadMapping
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyRRadMappingStates.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyRRadMappingStates.Partial">
            <summary>
            Partial
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyRRadMappingStates.Perfect">
            <summary>
            Perfect
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.RedundancyRRadStates">
            <summary>
            State of the RRad
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyRRadStates.Idle">
            <summary>
            Idle
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyRRadStates.Transient">
            <summary>
            Transient
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.RedundancyRRadStates.Run">
            <summary>
            Run
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.APIF_LicBlinkDongleReq">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.APIF_GetLicenseStatusRes">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.BatteryStates">
            <summary>The battery flags.</summary>
        </member>
        <member name="F:BR.AN.PviServices.BatteryStates.UNDEFINED">
            <summary>The battery or accu info has not been read or the batterie /accu is not available.</summary>
        </member>
        <member name="F:BR.AN.PviServices.BatteryStates.OK">
            <summary>The battery or accu is OK.</summary>
        </member>
        <member name="F:BR.AN.PviServices.BatteryStates.BAD">
            <summary>The battery or accu is empty.</summary>
        </member>
        <member name="F:BR.AN.PviServices.BatteryStates.NOT_AVAILABLE">
            <summary>The battery or accu is not available.</summary>
        </member>
        <member name="F:BR.AN.PviServices.BatteryStates.NOT_TESTED">
            <summary>The battery or accu state is not tested.</summary>
        </member>
        <member name="T:BR.AN.PviServices.Cpu">
            <summary>This class is used to get connected to a physical Cpu.
            An object of this class also manages global variables, tasks, task classes, memories
            and modules.
            To get connected to a device, it is necessary to set the connection properties of
            the instances connection-object. (See: BR.AN.PviServices.Connection)</summary>
        </member>
        <member name="F:BR.AN.PviServices.Cpu.KW_DETECT_SYSLOGBOOK_NAME">
            <summary>The name of the system log book for SG4 targets ("$arlogsys").</summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.#ctor(BR.AN.PviServices.Service,System.String)">
            <summary>
            Initializes a new instance of the Cpu class.
            </summary>
            <param name="service">Service object</param>
            <param name="name">Cpu name</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.#ctor(BR.AN.PviServices.PviObjectBrowser,System.String)">
            <summary>
            Initializes a new instance of the Cpu class.
            </summary>
            <param name="objBrowser">PVI Object Browser to attach PVI objects.</param>
            <param name="name">Cpu name</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Finalize">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.reCreateState">
            <summary>Helper to recreate the items after a Service Disconnect</summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.reCreateChildState">
            <summary>Helper to recreate the items after a Service Disconnect</summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadCommunicationLibraryVersions(System.Collections.Hashtable@)">
            <summary>Call this method to retrive the version information of the communication component DLLs. 
            The result will be available as name to version pair.</summary>
            <param name="versionInfos">Contains the resulting verson info. The key is the name of the component and the value is the version string.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Connect">
            <summary>
            Creates a connection to the physical Cpu using the specified 
            connection parameters set in the connectiono object properties.
            (see: Connection class)
            </summary>
            <remarks>
            The Connected event notifies, that the connection was succesful created.
            </remarks>
            <example>
            <code>
            Service service = new Service("Service_01");
            service.Connect();
            ...
            ...
            Cpu cpu = new Cpu(service,"Cpu_01");
            
            /************************/
            /* Connection TcpIp */
            /************************/
            cpu.Connection.DeviceType = BR.AN.PviServices.DeviceType.TcpIp;
            cpu.Connection.TcpIp.SourceStation = 1;
            cpu.Connection.TcpIp.DestinationStation = 50;
            cpu.Connection.TcpIp.DestinationIpAddress = "10.43.70.250";
            ...
            ...
            // or
            
            /************************/
            /* Connection Serial */
            /************************/
            // Setting DeviceType and its properties
            cpu.Connection.DeviceType = DeviceType.Serial;
            cpu.Connection.Serial.BaudRate = 57600;
            cpu.Connection.Serial.Channel = 2;
            ...
            ...
            // Connect Cpu object
            cpu.Connect();
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>
            Creates a connection of this instance to its processvariable.
            </summary>
            <param name="connectionType">Defines the ConnectionType of this Variable object</param>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the variable object, when its parent (cpu object) was not already
            connected. In that case the variable object store this "connect" action, to connect the
            variable object automatically when the cpu connectedevent received.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ChangeConnection">
            <summary>Use this member function to change the connection of the CPU object.
            When the function has changed the connection the Event ConnectionChanged will be fired.</summary>
            <remarks>Will disconnect change the connection for STATION, DEVICE and LINE.</remarks>
            <returns>0 on success; will return 4804 if the connection has not changed since the last Connect/ChangeConnection command.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Disconnect">
            <summary>
            Disconnects this instance from its device.
            </summary>
            <remarks>
            The Disconnected event notifies, that the connection was succesful disconnected.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Disconnect(System.Boolean)">
            <summary>
            Disconnects this instance from its device.
            </summary>
            <remarks>
            The Disconnected event notifies, that the connection was succesful disconnected.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.DisconnectChildObjects">
            <summary>Call this mtehod to disonnect all child objects</summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.DisconnectRet(System.UInt32)">
            <summary>
            Disconnects this instance from its device.
            </summary>
            <remarks>
            The Disconnected event notifies, that the connection was succesful disconnected.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Disconnect(System.UInt32)">
            <summary>
            Disconnects this instance from its device.
            </summary>
            <param name="internalAction">The action parameter</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.DisconnectCpuObjects(System.UInt32)">
            <summary>Helper to disconnect CPU, STATION, DEVICE and LINE object.</summary>
            <param name="internalAction">The action parameter</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.DisconnectChilds">
            <summary>Helper to disconnect all cpu child objects</summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetConnectionDescription">
            <summary></summary>
            <remarks></remarks>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ConnectionEvent(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>{secret}Event von der Verbindungsklasse</summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPviUnLinked(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="errorCode">The error code if unlinking the object failed.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event.
            Some event types are generated by PVI Manager, others are generated by the line. Therefore, event types which can be used depends on the PVI line being used.
            Event                   Number  Description  
            POBJ_EVENT_ERROR        #3      Signals a change in the error state or error code of a process object  
            POBJ_EVENT_CONNECT      #10     Signals a change in the connection description of a process object. 
                                            The event data contains the connection description in the format of the POBJ_ACC_CONNECT access type.  
            POBJ_EVENT_DATA         #11     Signals a change in a variable object's process data or an end to a process object's error state  
            POBJ_EVENT_STATUS       #12     Signals a status change in the process object. 
                                            The event data contains the status in the format of the POBJ_ACC_STATUS access type. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this status event supports can be found in the respective line description.  
            POBJ_EVENT_DATAFORM     #13     Signals a change in a variable object's data format  
            POBJ_EVENT_PROCEEDING   #128    This event informs a PVICOM application about the progress of active requests. 
                                            The POBJ_EVENT_PROCEEDING event is only sent to the application which made the request. 
                                            This progress information is sent as a PROCEEDING_INFO structure. 
                                            This event is generated by the line being used, not PVI Manager. 
                                            Which line this progress event supports can be found in the respective line description.  
            POBJ_EVENT_USERTAG      #129    Signals a change in the user tag. The event data contains the user tag in string format (see also access type POBJ_ACC_USERTAG). 
            POBJ_EVENT_LINE_xxx     (> 255) Signals special line events. 
                                            These events are generated by the line being used, not PVI Manager. 
                                            Which PVI line these line events supports can be found in the respective line description.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ModuleInfoListFromCB(System.Boolean,System.Int32,System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            Generates ModuleInfoList from CallbackData
            </summary>
            <param name="allModules">Specifies wheter the data buffer contains all modules or only diangose modules.</param>
            <param name="errorCode">en optional error code.</param>
            <param name="ptrData">The binary module list data.</param>
            <param name="dataLen">The length of ptrData.</param>
            <param name="isANSL">Is it an ANSL connection or NOT.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.UpdateLoggerMode(System.Boolean)">
            <summary>Helper to update the Logger Mode.</summary>
            <remarks>Workaround for PPxx which have no commserv: Because those tragets do not return 4813!</remarks>
            <param name="isSG4">Is it an SG4 target or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.DetectSGxLogger(System.String)">
            <summary>Helper function to check if there is an error logbook on the target or not.</summary>
            <remarks>Tries to create a module with the Name $arlogsys. If the module is not on the target assume it has to be an old style error logbook.</remarks>
            <param name="moduleName">The name of the module to connect for testing.)</param>
            <returns>0 if successful eles an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.InsertSysLogBookEntries(BR.AN.PviServices.APIFC_RLogbookRes_entry[],System.Int32,BR.AN.PviServices.LoggerEntryCollection)">
            <summary>Initializes the error entry collection</summary>
            <param name="lbEntries">APIFC_RLogbookRes_entry objects.</param>
            <param name="itemCnt">The number of sys log enzries.</param>
            <param name="eventEntries">The event entries..</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadDateTime">
            <summary>
            Read the CpuTime from the plc
            </summary>
            <remarks>
            The CpuTimeRead event notifies, that the CpuTime was successfully read.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.DeleteModule(System.String)">
            <summary>Delete the Module on the plc</summary>
            <remarks>Deleting the module by CPU is only supported by PVI Manager Version 3.50 (PviMan.exe file version) or higher, and by INA2000 Version 3.44 (LnIna2.dll file version).</remarks>
            <param name="name">The name of the module which has to be deleted.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.WriteDateTime(System.DateTime)">
            <summary>
            Write the Time on the plc
            </summary>
            <returns>Errorcode: 0..OK, otherwise error</returns>
            <remarks>
            The CpuTimeRead event notifies, that the CpuTime was successfully read.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.WriteSavePath(System.String)">
            <summary>
            This method sets the SavePath property of the cpu.
            </summary>
            <remarks>
            The event SavePathWritten notifies 
            </remarks>
            <param name="savePath">An absolute path for the BR modules.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadSavePath">
            <summary>
            
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Remove">
            <summary>
            This method removes the instances references from the PviServices hierarchy.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Restart(BR.AN.PviServices.BootMode)">
            <summary>
            Restarts the Cpu on the Plc.
            </summary>
            <param name="bootMode">BootMode</param>
            <remarks>
            The Restarted event notifies, that the Cpu is successfully restarted.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadErrorLogbook">
            <summary>Read the SG3 or SGC old formatted ErrorLogBook. 
            This methode also reads logbook entries from a SG4 Target!</summary>
            <returns>0 if successful else error code</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.Fire_OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            Helper to call the protected member.
            </summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnError is called when an error occurs. 
            This method raises the Error event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnConnectionChanged(System.Int32,BR.AN.PviServices.Action)">
            <summary>The function is called when the instances connection has been changed. The function raises the ConnectionChanged event.</summary>
            <param name="errorCode">The error number</param>
            <param name="action">The action number</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnConnected is called when a connection is successfully created.
            This method raises the Connected event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnDisconnected is called when a connection is successfully disconnected.
            This method raises the Disconnected event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnRestarted(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnRestarted is called when the Cpu is successfully restarted.
            This method raises the Restarted event. 
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnDateTimeRead(BR.AN.PviServices.CpuEventArgs)">
            <summary>
            OnDateTimeRead is called when DateTime is successfully read.
            This method raises the DateTimeRead event. 
            </summary>
            <param name="e">CpuEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnDateTimeWritten(BR.AN.PviServices.CpuEventArgs)">
            <summary>
            OnDateTimeWritten is called when DateTime is successfully written.
            This method raises the DateTimeWritten event. 
            </summary>
            <param name="e">CpuEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnSavePathWritten(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnSavePathWritten is called when SavePath is successfully written.
            This method raises the SavePathWritten event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnModuleDeleted(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnModuleDeleted is called when a module has been deleted.
            This method raises the ModuleDeleted event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnSavePathRead(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnSavePathRead is called when SavePath is successfully read.
            This method raises the SavePathRead event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadModuleList(System.String,BR.AN.PviServices.APIFC_ModulInfoRes@,BR.AN.PviServices.APIFC_DiagModulInfoRes@)">
            <summary>Gets ModuleInfo from stored ModuleInfoList. Reloads ModuleInfo if item can not be found.</summary>
            <param name="moduleName">Name of the BR module.</param>
            <param name="modInfo">ModuleInfo struct to store normal module information.</param>
            <param name="diagModInfo">DiagnoseModuleInfo struct to store module info if CPU has restarted in DIAGNOSTIC mode.</param>
            <returns>0 on success. -3 if the module list has to be synchroinized.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.RequestModuleList(BR.AN.PviServices.ModuleListOptions)">
            <summary>
            Sets request to update module list
            </summary>
            <param name="lstOption">0 .. default behavior, 1 ... ModuleList, 2 ... DiagModuleList</param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.UpdateModuleList(BR.AN.PviServices.ModuleListOptions)">
            <summary>
            Updates ModuleList
            </summary>
            <param name="lstOption">0 .. default behavior, 1 ... ModuleList, 2 ... DiagModuleList, 3 ... all for ANSL else same as 0</param>
            <returns>0 on success, -1 if request already set, -2 if cpu is not connected</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.CompareRuntimeVersionTo(System.String)">
            <summary>Call this method to see if the given version is</summary>
            <remarks>The version to be compared to.</remarks>
            <param name="vCompare">The version string without major and minor notation. Has always to have the format cxxxx (e.g.: V2120 or A2031)</param>
            <returns>-2 if the runtime version is not given. (e.g.: the CPU object is not connected)
            0 The runtime version of the PLC is same as the given Version string.
            -1 The runtime version of the PLC is older as the given Version string.
            1 The runtime version of the PLC is newer as the given Version string.
            </returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadTCPDestinationSettings">
            <summary>Call this method to get the destionation settings for an existing tcp connection.</summary>
            <remarks>Will read the DestinationIPAddress, the RemotePortNumber, the DestinationStationNumber(optional) and finally the RoutingInformation(optional).</remarks>
            <returns>zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnTCPDestinationSettingsRead(System.String,BR.AN.PviServices.PviEventArgs)">
            <summary>OnTCPDestinationSettingsRead is called when TCPDestinationSettings have been successfully read.
            This method raises the TCPDestinationSettingsRead event.
            </summary>
            <param name="strData">The string containing the TCP destination parameters.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.CallTTService(System.UInt16,System.Byte,System.Byte,System.Byte[],System.Byte)">
            <summary>
            Call this method to get access to TT services.
            </summary>
            <param name="ttGroup">Group of service (TT_PGSM, TT_DB, ...)</param>
            <param name="ttServ">Sinature of the service (PGSM_*, ...)</param>
            <param name="ttFormat">Format of the data (DATA_*)</param>
            <param name="dataBytes">Byte array containing the data for the TT service. Maximum 255 Bytes are allowed!</param>
            <param name="dataLen">The number of bytes contained in dataBytes.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.WriteDataToPhysicalAddress(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a number of bytes to aphysical address on the PLC
            </summary>
            <param name="physicalAddress">The physical address on the plc.</param>
            <param name="dataBytes">The Bytes to be written.</param>
            <param name="numOfBytesToWrite">The number of bytes to be written. If zero dataBytes.Length will be written!</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadDataFromPhysicalAddress(System.Int32,System.Int32)">
            <summary>
            Reads emmory from a physical PLC address.
            </summary>
            <param name="physicalAddress">The physical address from where to read data.</param>
            <param name="numOfBytesToRead">The number of bytes to be read from the physical address.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnTTService(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.
            State                       Bit number      Description 
            RESP_STATUS_CAST_OVERFLOW   #0              Upper range exceeded during type casting 
            RESP_STATUS_CAST_UNDERFLOW  #1              Lower range exceeded during type casting  
            RESP_STATUS_OVERFLOW        #2              Upper limit value exceeded with the data function  
            RESP_STATUS_UNDERFLOW       #3              Lower limit value exceeded with the data function  
            RESP_STATUS_POBJ            #4              The limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the process object.  
            RESP_STATUS_LINK            #5              A limit value transgression (RESP_STATUS_OVERFLOW or RESP_STATUS_UNDERFLOW) occurred in the data function of the link object.  
            RESP_STATUS_INHERIT_ERR     #8              Error state was received from a higher-level process object  
            RESP_STATUS_OVERWRITE       #9  Event data overwritten by more current data at least once. See section "Event".</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPhysicalMemoryWritten(System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnPhysicalMemoryRead(System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetListOfDongles(System.String@)">
            <summary>
            Gets the list of dongles for the PLC project and OS
            </summary>
            <param name="dongleData">The resulting dongle data as XML String.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetExistingLicense(System.String,System.String,System.String@)">
            <summary>
            Gets the list of licenses for the PLC project and OS
            </summary>
            <param name="boxMask">The box mask for which to get the licenses.</param>
            <param name="serialNumber">The serial number for which to get the licenses.</param>
            <param name="existingLicData">The resulting list of licenses as XML String.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetRequiredLicenses(System.String@)">
            <summary>
            Gets the list of required licenses
            </summary>
            <param name="requiredLicData">The resulting license data as XML String.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetLicenseContext(System.String,System.String,System.String,System.String@)">
            <summary>
            Reads the ontext data for a specified serial number using the set box mask and the defined firm- codes.
            </summary>
            <param name="boxMask">The box mask.</param>
            <param name="serialNumber">The serial number.</param>
            <param name="firmCode">The firm code.</param>
            <param name="contextLicData">The resulting context data as ASCII string</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetLicenseContext(System.String,System.String,System.String[],System.String@)">
            <summary>
            Reads the ontext data for a specified serial number using the set box mask and the defined firm- codes.
            </summary>
            <param name="boxMask">The box mask.</param>
            <param name="serialNumber">The serial number.</param>
            <param name="firmCodes">The firm codes.</param>
            <param name="contextLicData">The resulting context data as ASCII string</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.UpdateLicenseData(System.String)">
            <summary>Updates the licence data on the PLC.</summary>
            <param name="licenseData">The ASCII data to be transfered</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.BlinkDongle(System.String,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Casues the dongle to start blinking.</summary>
            <param name="boxMask">The box mask.</param>
            <param name="serialNumber">The serial number.</param>
            <param name="ledColor">The color for the LED.</param>
            <param name="blinkCount">How many times should the LED blink.</param>
            <param name="blinkTime">The time for LED on/off.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetLicenseStatus(System.UInt32,System.UInt32@,System.Boolean)">
            <summary>
            Reads the license state.
            </summary>
            <param name="whichState">Optional parameter.</param>
            <param name="licStatus">The state of the license (0 ... OK; 1 ... license violation).</param>
            <param name="aSync">If true event LicenseStatusGot will be fired else will return the license data directly.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GetLicenseStatus(System.UInt32,System.UInt32@)">
            <summary>
            Reads the license state.
            </summary>
            <param name="whichState">Optional parameter.</param>
            <param name="licStatus">The state of the license (0 ... OK; 1 ... license violation).</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.PVICB_LIC_ReadFunc(System.Int32,System.IntPtr)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.PVICB_LIC_WriteFunc(System.Int32,System.IntPtr)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.LicenseDataWrtitten(System.Int32,System.IntPtr,BR.AN.PviServices.ResponseInfo)">
            <summary>
            interpret the license data
            </summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>Zero oin success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadLicenseData(System.Int32,System.IntPtr,BR.AN.PviServices.ResponseInfo,System.Int32,System.UInt32@)">
            <summary>
            interpret the license data
            </summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="resultData">The resulting XML or ASCII data.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadLicenseData(System.Int32,System.IntPtr,BR.AN.PviServices.ResponseInfo,System.Int32,System.String@)">
            <summary>
            interpret the license data
            </summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="resultData">The resulting XML or ASCII data.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ListDongles(System.String@,System.Boolean)">
            <summary>
            Gets the list of dongles for the PLC project and OS
            </summary>
            <param name="dongleData">The resulting dongle data as XML String.</param>
            <param name="syncPVIAccess">If true use synchronuous PVI functions.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ListDongles(System.String@)">
            <summary>
            Gets the list of dongles for the PLC project and OS
            </summary>
            <param name="dongleData">The resulting dongle data as XML String.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ListOfExistingLicenses(System.String,System.String,System.String@,System.Boolean)">
            <summary>
            Gets the list of licenses for the PLC project and OS
            Request data: BOXMASK=BoxMask SERNUM=SerialNumber
            </summary>
            <param name="boxMask">The box mask for which to get the licenses.</param>
            <param name="serialNumber">The serial number for which to get the licenses.</param>
            <param name="existingLicData">The resulting list of licenses as XML String.</param>
            <param name="syncPVIAccess">If true use synchronuous PVI functions.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ListOfExistingLicenses(System.String,System.String,System.String@)">
            <summary>
            Gets the list of licenses for the PLC project and OS
            Request data: BOXMASK=BoxMask SERNUM=SerialNumber
            </summary>
            <param name="boxMask">The box mask for which to get the licenses.</param>
            <param name="serialNumber">The serial number for which to get the licenses.</param>
            <param name="existingLicData">The resulting list of licenses as XML String.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ListOfRequiredLicenses(System.String@,System.Boolean)">
            <summary>
            Gets the list of required licenses
            </summary>
            <param name="requiredLicData">The resulting license data as XML String.</param>
            <param name="syncPVIAccess">If true use synchronuous PVI functions.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ListOfRequiredLicenses(System.String@)">
            <summary>
            Gets the list of required licenses
            </summary>
            <param name="requiredLicData">The resulting license data as XML String.</param>
            <returns>Zero on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadContext(System.String,System.String,System.String[],System.String@,System.Boolean)">
            <summary>
            Reads the ontext data for a specified serial number using the set box mask and the defined firm- codes.
            Request data: BOXMASK=BoxMask SERNUM=SerialNumber FIRMCODE=FirmCode1,FirmCode2,...FirmCodeN
            </summary>
            <param name="boxMask">The box mask.</param>
            <param name="serialNumber">The serial number.</param>
            <param name="firmCodes">The firm codes.</param>
            <param name="contextLicData">The resulting context data as ASCII string</param>
            <param name="syncPVIAccess">If true use synchronuous PVI functions.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.WriteLicenseData(System.String,System.Boolean)">
            <summary>Updates the licence data on the PLC.</summary>
            <param name="licenseData">The ASCII data to be transfered</param>
            <param name="syncPVIAccess">If true use synchronuous PVI functions.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.WriteLicenseBlinkDongle(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Casues the dongle to start blinking.</summary>
            <param name="boxMask">The box mask.</param>
            <param name="serialNumber">The serial number.</param>
            <param name="ledColor">The color for the LED.</param>
            <param name="blinkCount">How many times should the LED blink.</param>
            <param name="blinkTime">The time for LED on/off.</param>
            <param name="syncPVIAccess">If true use synchronuous PVI functions.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.WriteLicenseBlinkDongle(System.String,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Casues the dongle to start blinking.</summary>
            <param name="boxMask">The box mask.</param>
            <param name="serialNumber">The serial number.</param>
            <param name="ledColor">The color for the LED.</param>
            <param name="blinkCount">How many times should the LED blink.</param>
            <param name="blinkTime">The time for LED on/off.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnGlobalForcedOFF(System.Int32)">
            <summary>Global CallBack function for PVI write response on GLOBAL FORCE OFF.</summary>
            <param name="errorCode">The error code if the read failes.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.GlobalForceOFF">
            <summary>
            Use this method to set the global Force mode to OFF
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnMemoryCleared(System.Int32)">
            <summary>Global CallBack function for PVI write response on CLEAR MEM.</summary>
            <param name="errorCode">The error code if the read failes.</param>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ClearMemory(BR.AN.PviServices.MemoryType)">
            <summary>Use this method to clear any of the PLC memory types. You can also use Clean Method of the Memory Class to do the same.
            PLC has to be in DIAGNOSTIC mode!!!
            </summary>
            <param name="memType">The memory type.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadMemoryInfo">
            <summary>
            Call this method to read the memory info.
            The data will be provided as XML string in the event <see cref="E:BR.AN.PviServices.Cpu.RedundancyInfoRead"/>.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadHardwareInfo">
            <summary>
            Call this method to read the hardware info.
            The data will be provided as XML string in the event <see cref="E:BR.AN.PviServices.Cpu.HardwareInfoRead"/>.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadApplicationInfo">
            <summary>
            Call this method to read the application/project info.
            The data will be provided as XML string in the event <see cref="E:BR.AN.PviServices.Cpu.HardwareInfoRead"/>.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.OnRedundancyCtrlEvent(System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            either app sync (Cmd="2") or active cpu switched (Cmd="1") or (CMD="16") for RedInfo changed events
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadRedundancyInfo">
            <summary>
            Call this method to read the redundancy info.
            The data will be provided as XML string in the event <see cref="E:BR.AN.PviServices.Cpu.RedundancyInfoRead"/>.
            This command is only valid for a redundancy SYSTEM.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.SwitchActiveCpu(System.Boolean)">
            <summary>
            Call this method to switch the active CPU of a redundancy PLC pair.
            This command is only valid for a redundancy SYSTEM.
            </summary>
            <param name="force">If true forces the ACPU switch.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.SwitchActiveCpu">
            <summary>
            Call this method to switch the active CPU of a redundancy PLC pair.
            This command is only valid for a redundancy SYSTEM.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.SynchronizeRApplication(System.Boolean)">
            <summary>
            Call this method to switch the active CPU of a redundancy PLC pair.
            This command is only valid for a redundancy SYSTEM.
            </summary>
            <param name="automaticMode">If true starts the application synchronisation on the PLC in automatic else in manual mode.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Cpu.ReadTOC">
            <summary>
            Reads the table of contens from the connected CPU.
            The responsedata will be available in the event <seealso cref="E:BR.AN.PviServices.Cpu.TOCRead"/>.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.IsConnected">
            <summary>Gets or sets the connection state of the PviServices object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.ModUID">
            <summary>Gets the unique module id. This id will be generated by the service object.</summary>
            <value>ModUID</value>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.Restarted">
            <summary>
            Occurs when the cpu is restarted.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.DateTimeRead">
            <summary>
            Occurs when the cputime is read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.DateTimeWritten">
            <summary>
            Occurs when the cputime is written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.SavePathWritten">
            <summary>
            Occurs when SavePath is written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.SavePathRead">
            <summary>
            Occurs when SavePath is read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.ModuleDeleted">
            <summary>
            Occurs when a module has been deleted by the CPU.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.TCPDestinationSettingsRead">
            <summary>
            Occurs when the TCP settigs have been read.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.ApplicationModuleFilter">
            <summary>Gets or sets the /AM (ApplicationModule) parameter for the communication to the PLC.
            If null the parameter will not be set at all. The communication instance will use the setting from "PviConfig.xml".
            null ... The application module name will not be used by PviServices.
            "::" ... The application module name can also be an empty string which is also called the "Default" application module.
            "*::" ... access to all application modules is allowed.
            "ApplicationModuleName::" ... the access is limited to application module "ApplicationModuleName" and to the empty application module name.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.ResponseTimeout">
            <summary>Gets or sets the Response timeout in milliseconds.
            This parameter is part of the connection object!
            So when changing the connection object the ResponseTimout will change too although the parameter is a member of the CPU object!!
            If you want to change the ResponseTimeout, you will have to set the device object before!!
            If a response to a sent frame is not received with this time, then the frame is transferred again. 
            After the third retry, the connection is deemed cancelled. 
            The time in which an interrupted connection is detected is a result of the Response Timeout * 4.</summary>
            <value>ResponseTimeout for CPU object.</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Connection">
            <summary>
            Gets the Connection object of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Modules">
            <summary>
            Gets the actually uploaded modules of the device.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Tasks">
            <summary>
            Gets the actually uploaded tasks of the device.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Variables">
            <summary>
            Gets the actually uploaded global variables of the device.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Memories">
            <summary>
            Gets the actually uploaded memories of the device.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.TaskClasses">
            <summary>
            Gets the actually uploaded taskclasses of the device.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.HardwareInfos">
            <summary>Gets the collection of hardware infos.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Libraries">
            <summary>Gets the collection of the libraries.</summary>
            <value>Libraries</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.RuntimeVersion">
            <summary>
            Gets the operating-system version of this cpu-instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Type">
            <summary>
            Gets the type of this cpu-instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.ApplicationMemory">
            <summary>
            Gets the ApplicationMemory type of the cpu.
            Return an empty String if the Cpu has no ApplicationMemory
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.NodeNumber">
            <summary>
            Gets the nodenumber of the cpu.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Accu">
            <summary>Gets the state of the accu of the PLC</summary>
            <value>Accu</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Battery">
            <summary>Gets the state of the battery of the PLC</summary>
            <value>Battery</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.BootMode">
            <summary>
            Gets the bootmode of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.State">
            <summary>
            Gets the state of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.HasErrorLogBook">
            <summary>Gets if this CPU includes the oldstyle error logbook.</summary>
            <value>HasErrorLogBook</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.IsSG4Target">
            <summary>Gets if it is an SG4 target.</summary>
            <value>IsSG4Target</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.IODataPoints">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.SavePath">
            <summary>
            Gets the SavePath property of the cpu.
            </summary>
            <remarks>To get the actual property it is neccessary to call the <see cref="M:BR.AN.PviServices.Cpu.ReadSavePath"/> Method before
            using this property.</remarks>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Loggers">
            <summary>Gets the collection fo logger modules.</summary>
            <value>Loggers</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.Profiler">
            <summary>Get the profiler.</summary>
            <value>Profiler</value>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.ObjectBrowser">
            <summary>
            Object to browser through PVI Objects.
            If this object is not null, PVI Objects are attached to the service object.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.TcpDestinationSettings">
            <summary>Gets the destination parameters for a tcp connection. 
            The object has to be connected and a call to <see cref="M:BR.AN.PviServices.Cpu.ReadTCPDestinationSettings"/> has to be used to retrieve the settings.
            The settings will nbe valid as soon as <see cref="E:BR.AN.PviServices.Cpu.TCPDestinationSettingsRead"/> has been fired.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.TTServiceResponse">
            <summary>
            Occurs when the cputime is read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.PhysicalMemoryWritten">
            <summary>
            Occurs when the cputime is read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.PhysicalMemoryRead">
            <summary>
            Occurs when the physical data has been read is read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.GlobalForcedOFF">
            <summary>
            Occurs when the cpu requests to set the GLOBAL force state to OFF.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.LicenseStatusGot">
            <summary>
            Occurs when the cpu requests to the license state.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.LicenseStatusInfo">
            <summary>
            Returns the status information of PLC license as XML string
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.LicenseStatusError">
            <summary>
            Returns the status error information extracted from the XML string <seealso cref="P:BR.AN.PviServices.Cpu.LicenseStatusInfo"/>.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.MemoryCleared">
            <summary>
            Occurs when the cpu requests to clear a memory type.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.MemoryInfo">
            <summary>
            Gets the memory info. 
            Format is XML.
            Call <see cref="M:BR.AN.PviServices.Cpu.ReadMemoryInfo"/> if the string is empty.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.MemoryInformationStruct">
            <summary>
             Gets the memory info. Call <see cref="M:BR.AN.PviServices.Cpu.ReadMemoryInfo"/> if null. 
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.MemoryInfoRead">
            <summary>
            Occurs when the memory info has been read.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.HardwareInfo">
            <summary>
            Gets the Hardware info. 
            Format is XML.
            Call <see cref="M:BR.AN.PviServices.Cpu.ReadHardwareInfo"/> if the string is empty.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.HardwareInformationStruct">
            <summary>
             Gets the Hardware info. Call <see cref="M:BR.AN.PviServices.Cpu.ReadHardwareInfo"/> if null. 
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.HardwareInfoRead">
            <summary>
            Occurs when the hardware info has been read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.ApplicationInfoRead">
            <summary>
            Occurs when the application info has been read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.RedundancyInfoRead">
            <summary>
            Occurs when the redundancy info has been read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.RedundancyInfoChanged">
            <summary>
            Occurs when the redundancy info has been read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.ActiveCpuChanged">
            <summary>
            Occurs when the active CPU has change in an redundancy system.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.ApplicationSynchronizeStarted">
            <summary>
            Occurs when the PLC has accepted the start of the application synchronizeation.
            The progress will be reported by ApplicationSyncing.
            </summary>
            <remarks>The event will NOT be fired when the Synchonization has completed!!!</remarks>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.ApplicationSyncing">
            <summary>
            Occurs when the active CPU has change in an redundancy system.
            either app sync (Cmd="2") or active cpu switched (Cmd="1") or (CMD="16") for RedInfo changed events
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.RedundancyCommMode">
            <summary>
            Gets or sets wheter to start a redundant communication to the PLC or not.
            If set to true the the PLC communication will be handled using cluster- primary- and secondary- Cpu connectrion settings. (/RED=1)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.RedundancyInfo">
            <summary>
            Gets the redundancy info. 
            Format is XML.
            Call <see cref="M:BR.AN.PviServices.Cpu.ReadRedundancyInfo"/> if the string is empty.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Cpu.RedundancyInformationStruct">
            <summary>
             Gets the redundancy info. Call <see cref="M:BR.AN.PviServices.Cpu.ReadRedundancyInfo"/> if null. 
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Cpu.TOCRead">
            <summary>
            Event will be fired after the TOC has been read from the PLC.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.CpuCollectionEventArgs">
            <summary>
            An instance of this class defines additional eventinformation for variable objects
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollectionEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.CpuCollection)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="cpuObjs">List of cpus</param>
        </member>
        <member name="P:BR.AN.PviServices.CpuCollectionEventArgs.Cpus">
            <summary>
            Gets a collection of referenced variable objects
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.CpuCollection">
            <summary>
            An instance of this class represents a collection of Cpu objects.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.Remove(System.String)">
            <summary></summary>
            <remarks></remarks>
            <param name="key"></param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.Remove(BR.AN.PviServices.Cpu)">
            <summary>Removes an object of type Variable to this instance.</summary>
            <param name="cpuObj">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the CpuCollection class.
            </summary>
            <param name="parent">Parent object (e.g. Service object)</param>
            <param name="name">Collection name</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.Connect">
            <summary>
            Connects each Cpu object of the collection.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.Disconnect">
            <summary>
            Disconnects each Cpu object of the collection.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.Restart(BR.AN.PviServices.BootMode)">
            <summary>
            Restarts each Cpu object of the collection
            </summary>
            <param name="bootMode">BootMode</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.Add(BR.AN.PviServices.Cpu)">
            <summary>
            Adds an object of type Cpu to this instance.
            </summary>
            <param name="cpu">Cpu object</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.OnConnected(BR.AN.PviServices.Cpu,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a cpu object within the list is being connected.
            The method raises the Connected event.
            </summary>
            <param name="cpu">Cpu object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.OnDisconnected(BR.AN.PviServices.Cpu,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a cpu object within the list is being connected.
            The method raises the Connected event.
            </summary>
            <param name="cpu">Cpu Object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.OnRestarted(BR.AN.PviServices.Cpu,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a cpu object within the list is being restarted.
            The method raises the Restarted event.
            </summary>
            <param name="cpu">Cpu object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.OnError(BR.AN.PviServices.Cpu,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable object within the list notifies an error.
            The method raises the Disconnected event.
            </summary>
            <param name="cpu">Cpu object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.CpuCollection.OnCollectionRestarted(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all restart requests of each PviServices object within the collection are responded.
            This method raises the CollectionRestarted event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="E:BR.AN.PviServices.CpuCollection.Restarted">
            <summary>
            Occurs when a listobject notifies an error..
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.CpuCollection.CollectionRestarted">
            <summary>
            Occurs when all restarted requests of each Cpu object within the collection are responded.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.CpuCollection.Item(System.String)">
            <summary>
            Gets a Cpu object by its name.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.CpuCollection.Service">
            <summary>
            Gets the Service object of the collections parent.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.AR000">
            <summary>Implements the obsolete class for ARsim device</summary>
        </member>
        <member name="T:BR.AN.PviServices.DeviceBase">
            <summary>The class implements basic properties and methods for all device classes.</summary>
            <remarks>PviServices only supports INA2000 devices!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.DeviceBase.#ctor(BR.AN.PviServices.DeviceType)">
            <summary>Initializes a new instance of the DeviceBase class.</summary>
            <param name="type">The type of device.</param>
        </member>
        <member name="M:BR.AN.PviServices.DeviceBase.#ctor(BR.AN.PviServices.DeviceType,System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Initializes a new instance of the DeviceBase class.</summary>
            <param name="type">The type of device.</param>
            <param name="reader">The reference of the XML reader.</param>
            <param name="flags">Flags specifying the attributes to be loaded from the XML configuration.</param>
        </member>
        <member name="M:BR.AN.PviServices.DeviceBase.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Save the device settings to the export file.</summary>
            <param name="writer">The reference of the XML writer component.</param>
            <param name="flags">Flags specifying the attributes to be stored in the XML configuration.</param>
            <returns>0 if successfull else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.DeviceBase.SaveConnectionAttributes(System.Xml.XmlTextWriter@)">
            <summary>Save the connection attributes to the export file.</summary>
            <param name="writer">The reference of the XML writer component.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.DeviceBase.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.DeviceBase.UpdateDeviceParameters(System.String)">
            <summary>Updates a single DEVICE parameter for this instance.</summary>
            <param name="parmItem">The parameter to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.DeviceBase.UpdateCpuParameters(System.String)">
            <summary>Updates a single CPU parameter for this instance.</summary>
            <param name="parmItem">The parameter to be used for this instance.</param>
        </member>
        <member name="F:BR.AN.PviServices.DeviceBase.propKnownDeviceParameters">
            <summary>All parameters which are known by the class an exported as device properties.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceBase.propUnknownDevParameters">
            <summary>contain parameters which are neither known by the CPU nor by the DEVICE</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceBase.propKnownCpuParameters">
            <summary>All parameters which are known by the class an exported as CPU properties.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceBase.propIntervalTimeout">
            <summary>IntervalTimeout</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceBase.propInterfaceName">
            <summary>The name of the interface.</summary>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.KnownDeviceParameters">
            <summary>Gets the known device parameters.</summary>
            <value>KnownDevParameters</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <returns>All parameters which belong to the PVI DEVICE object.</returns>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.CpuParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the CPU parameters.</summary>
            <value>All parameters which belong to the PVI CPU object.</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.UnknownDeviceParameters">
            <summary>Gets the unknown device parameters.</summary>
            <value>UnknownDevParameters</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.KnownCpuParameters">
            <summary>Gets the known CPU parameters.</summary>
            <value>KnownCpuParameters</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.UnknownCpuParameters">
            <summary>Gets the unknown CPU parameters.</summary>
            <value>UnknownCpuParameters</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.SavePath">
            <summary>Gets or sets the save path for the CPU object.</summary>
            <value>SavePath</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.RoutingPath">
            <summary>Gets or sets the routing path.</summary>
            <value>RoutingPath</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.IntervalTimeout">
            <summary>Gets or sets the interval timeout.
             Defines the maximum time which is to pass between two CAN messages when receiving or sending an INA frame. 
             This parameter is used together with the /RT parameter for the INA2000 CPU object to detect a broken connection.
             This parameter is not allowed to be less than the reaction time for the controller (5 msec for PLC) plus a reserve of at least 25 ms 
             (accordingly higher for heavy interrupt loads on the PCs), but should be smaller than /RT. 
             If quick detection of the broken connection is not required, monitoring interval timeouts does not need to be enabled (/IT=0). Example: "/IT=80"</summary>
            <value>IntervalTimeout (0 == OFF)</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.InterfaceName">
            <summary>Gets or sets the name of the communication interface. (e.g.: com1)</summary>
            <value>The name of the communication interface.</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.ResponseTimeout">
            <summary>Gets or sets the Response timeout in milliseconds.
            If a response to a sent frame is not received with this time, then the frame is transferred again. 
            After the third retry, the connection is deemed cancelled. 
            The time in which an interrupted connection is detected is a result of the Response Timeout * 4.</summary>
            <value>ResponseTimeout for CPU object.</value>
        </member>
        <member name="P:BR.AN.PviServices.DeviceBase.DeviceType">
            <summary>Gets the device type of the connection.
            You can use the following devices: Serial,	Can, TcpIp, Modem</summary>
        </member>
        <member name="M:BR.AN.PviServices.AR000.#ctor">
            <summary>
            Initializes a new instance of the ARsim class
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.AR000.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the device configuration to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.AR000.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.AR000.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.AR000.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.AR000.SourceAddress">
            <summary>Station number of the source station. The station number must be unique within the INA2000 network.</summary>
            <value>SourceAddress</value>
        </member>
        <member name="P:BR.AN.PviServices.AR000.DestinationAddress">
            <summary>Station number of the target station. The station number must be unique within the INA2000 network.</summary>
            <value>DestinationAddress</value>
        </member>
        <member name="P:BR.AN.PviServices.AR000.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <value>All parameters which belong to the PVI DEVICE object.</value>
        </member>
        <member name="T:BR.AN.PviServices.Can">
            <summary>
            This class is used to connect to a can device.
            The device contains the following default parameters:
            	Channel				= 1			<br/>
            	BaudRate			= 500000	<br/>
            	BaseId				= 1598		<br/>
            	CycleTime			= 10		<br/>	
            	MessageCount		= 10		<br/>
            	IoPort				= 900		<br/>
            	InterruptNumber		= 10		<br/>
            	SourceAddress		= 1			<br/>
            	DestinationAddress	= 2			<br/>
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Can.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Can.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Can.UpdateParameters(System.String,System.Boolean)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
            <param name="bCpu">The parameters belongs to the CPU if TRUE.</param>
            <returns>true if successful else false -> call the update function of the base class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Can.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.Can.UpdateCpuParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.Can.#ctor">
            <summary>Initializes a new instance of the Can class</summary>
        </member>
        <member name="M:BR.AN.PviServices.Can.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Can.CANIdentifiers">
            <summary>Gets or sets the number of CAN identifiers. CAN communication with 29-bit identifiers (extended frames) or 11-bit identifiers (standard frames). If 29-bit CAN identifiers (extended frames) are used, then 11-bit identifiers cannot be sent or received. Every station in the INA2000 network must have the same setting.</summary>
            <value>CANIdentifiers</value>
        </member>
        <member name="P:BR.AN.PviServices.Can.MAXStationNumber">
            <summary>Gets or sets the highest station number. Number of maximum possible INA2000 stations (= highest station number). Every station in the INA2000 network must have the same setting.</summary>
            <value>MAXStationNumber</value>
        </member>
        <member name="P:BR.AN.PviServices.Can.ControllerNumber">
            <summary>Gets or sets the number of the controller. 2 CAN controllers are available on the LS172 card. The desired controller is selected with the CNO parameter. No value other than 0 (zero) may be specified for the default CAN controller.</summary>
            <value>ControllerNumber</value>
        </member>
        <member name="P:BR.AN.PviServices.Can.Channel">
            <summary>
            Can controller number (channel).
            2 Can controllers are available on the LS172 card. The desired controller is selected with the parameter Channel. 
            No value other than 0 (zero) may be specified for the default Can controller.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.BaudRate">
            <summary>
            Baud rate (data rate) on the CAN bus in bits per second. This parameter can also be specified in kBits per second.
            Every station in the network must have the same setting.
            You can use the following settings: 10000, 20000, 50000, 100000, 125000, 150000, 250000, 500000, 800000, 1000000 <br/>
            Default = 500000
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.BaseId">
            <summary>
            Base Can ID for INA2000 communication
            Every station in the INA2000 network must have the same setting.
            Default = 1598
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.CycleTime">
            <summary>
            Cycle time (in ms) within which the specified number (maximum) of Can messages are sent
            Values lower then 20 ms don't make sense. <br/>
            Default = 10 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.MessageCount">
            <summary>
            Maximum number of Can messages sent within the specified CycleTime
            Default = 15 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.IoPort">
            <summary>
            IO port address of the Can function block <br/>
            Default = 900
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.InterruptNumber">
            <summary>
            Interrupt number assigned to the Can function block <br/>
            Default = 10
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.SourceAddress">
            <summary>
            Station number of the source station (separate station) <br/>
            Default = 1
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.DestinationAddress">
            <summary>
            Station number of the target station <br/>
            Default = 2
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Can.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <value>All parameters which belong to the PVI DEVICE object.</value>
        </member>
        <member name="P:BR.AN.PviServices.Can.CpuParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the CPU parameters.</summary>
            <value>All parameters which belong to the PVI CPU object.</value>
        </member>
        <member name="T:BR.AN.PviServices.PviLINE">
            <summary>
            Helper class for mapping the PVI LINE object
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.PviLINE.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>
            Initializes a new instance of the Cpu class.
            </summary>
            <param name="cpu">The parent object</param>
            <param name="name">Cpu name</param>
        </member>
        <member name="M:BR.AN.PviServices.PviLINE.SetName(System.String)">
            <summary>
            Sets the object name
            </summary>
            <param name="newName">The name of the object.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviLINE.Initialize(System.Int32)">
            <summary>
            Initializes the PVI LINE object
            </summary>
            <param name="type">The line type. 0...DEFAULT INA2000, 1...MODBUS, 2...ANSL</param>
        </member>
        <member name="M:BR.AN.PviServices.PviLINE.PviDisconnect">
            <summary>
            Free LINE connection to PVI
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviLINE.PviConnect">
            <summary>
            Establish LINE connection to PVI
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="P:BR.AN.PviServices.PviLINE.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviLINE.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviDEVICE">
            <summary>
            Helper class for mapping the PVI DEVICE object
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.PviDEVICE.#ctor(BR.AN.PviServices.PviLINE,System.String)">
            <summary>
            Initializes a new instance of the Cpu class.
            </summary>
            <param name="line">The parent object</param>
            <param name="name">Cpu name</param>
        </member>
        <member name="M:BR.AN.PviServices.PviDEVICE.SetName(System.String)">
            <summary>
            Sets the object name
            </summary>
            <param name="newName">The name of the object.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviDEVICE.Inititialize(System.String,System.String)">
            <summary>
            Sets the object parameters
            </summary>
            <param name="parentName">The name of the parent object.</param>
            <param name="objParameters">The object parameter string.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviDEVICE.PviConnect">
            <summary>
            Helper for PVI connection.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviDEVICE.PviDisconnect">
            <summary></summary>
            <remarks></remarks>
            <returns></returns>
        </member>
        <member name="P:BR.AN.PviServices.PviDEVICE.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviDEVICE.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviSTATION">
            <summary>
            Helper class for mapping the PVI STATION object
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.PviSTATION.#ctor(BR.AN.PviServices.PviDEVICE,System.String)">
            <summary>
            Initializes a new instance of the Cpu class.
            </summary>
            <param name="device">The parent object</param>
            <param name="name">Cpu name</param>
        </member>
        <member name="M:BR.AN.PviServices.PviSTATION.SetName(System.String)">
            <summary>
            Sets the object name
            </summary>
            <param name="newName">The name of the object.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviSTATION.Initialize(System.String,System.String)">
            <summary>
            Initializes the object parameters
            </summary>
            <param name="parentName">The name of the parent object.</param>
            <param name="objParameters">The object parameter string.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviSTATION.PviConnect">
            <summary>
            Helper for PVI connection
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviSTATION.PviDisconnect">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="P:BR.AN.PviServices.PviSTATION.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviSTATION.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Connection">
            <summary>
            This class is used to establish a connection to a plc device. 
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Connection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Connection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Connection.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Connection.#ctor(BR.AN.PviServices.Service)">
            <summary>Creates a new empty instance of this class. This instance is not connectable!</summary>
            <param name="serviceObj">Service object</param>
        </member>
        <member name="M:BR.AN.PviServices.Connection.#ctor(BR.AN.PviServices.Cpu)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="cpu">Cpu object</param>
        </member>
        <member name="M:BR.AN.PviServices.Connection.Connect">
            <summary>
            This function creates a connection to a given plc device.
            </summary>
            <returns>Errorcode: 0..OK, otherwise error</returns>
            <remarks>
            This function is automatically called by the connect method of a cpu object.
            The Connected event notifies, that the connection was successful created.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Connection.TurnOffEvents">
            <summary>
            This function turns all connection events off.
            </summary>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.Connection.TurnOnEvents">
            <summary>
            This function turns all connection events on.
            </summary>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.Connection.ChangeConnection">
            <summary>
            This function creates a connection to a given plc device.
            </summary>
            <returns>Errorcode: 0..OK, otherwise error</returns>
            <remarks>
            This function is automatically called by the connect method of a cpu object.
            The Connected event notifies, that the connection was successful created.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Connection.DisconnectNoResponses">
            <summary>
            Disconnects this instance from its device.
            </summary>
            <returns>
            Errorcode: 0 .. OK, else Connection failed.
            </returns>
            <remarks>
            The Disconnected event notifies, that the connection was succesful disconnected.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Connection.Disconnect">
            <summary>
            Disconnects this instance from its device.
            </summary>
            <returns>
            Errorcode: 0 .. OK, else Connection failed.
            </returns>
            <remarks>
            The Disconnected event notifies, that the connection was succesful disconnected.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Connection.SynchronizeCommunicationParameters(BR.AN.PviServices.Connection.CommSyncDirections)">
            <summary>Synchronizes the communication parameters beteween CPU and Connection if this connection has a cpu propParent!</summary>
            <param name="syncDirection">The direction in which to synchronize. FromCpu to Connection or From Connection to Cpu.</param>
        </member>
        <member name="M:BR.AN.PviServices.Connection.UpdateDeviceParameter">
            <summary>The Function updates the DeviceParameter</summary>
        </member>
        <member name="M:BR.AN.PviServices.Connection.SetLINEName(System.String)">
            <summary>Use this method to set an explicite name for the PVI LINE object.</summary>
            <param name="name">The name of the PVI LINE object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Connection.SetDEVICEName(System.String)">
            <summary>Use this method to set an explicite name for the PVI DEVICE object.</summary>
            <param name="name">The name of the PVI DEVICE object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Connection.SetSTATIONName(System.String)">
            <summary>Use this method to set an explicite name for the PVI STATION object.</summary>
            <param name="name">The name of the PVI STATION object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Connection.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Cpu">
            <summary>
            Gets the Cpu object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Service">
            <summary>
            Gets the Service object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.DeviceParameter">
            <summary>
            Gets or sets the device parameter of this connection
            </summary>
            <example>
            	"CD=\"/IF=COM2 /BD=57600 /PA=2 /IT=1\""
            	"CD=\"/IF=Tcpip /SA=1\""
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Connection.LineName">
            <summary>
            Gets or sets the LineName of the connection
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.DeviceName">
            <summary>Gets or sets the DeviceName of the connection</summary>
            <value>DeviceName</value>
        </member>
        <member name="P:BR.AN.PviServices.Connection.StationName">
            <summary>Gets or sets the StationName of the connection</summary>
            <value>StationName</value>
        </member>
        <member name="P:BR.AN.PviServices.Connection.ConnectionParameter">
            <summary>
            Gets or sets the connection parameter
            </summary>
            <example>
            	"/DA=50"
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Device">
            <summary>Gets the device of the connection. Can be either Serial, Can, TcpIp or Modem.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.DeviceType">
            <summary>Gets or sets the device type of the connection.
            You can use the following devices: Serial,	Can, TcpIp, Shared</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Serial">
            <summary>Get or sets the Serial device object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Modem">
            <summary>Get or sets the Serial device object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Can">
            <summary>
            Get or sets the Can device object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.AR000">
            <summary>Get or sets the INA2000 ARsim device object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.TcpIp">
            <summary>Get or sets the INA2000 TcpIp device object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.ANSLTcp">
            <summary>Get or sets the ANSL TcpIp device object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Shared">
            <summary>Get or sets the INA2000 LS251 / Shared device object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.TcpIpMODBUS">
            <summary>Get or sets the INA2000 TcpIp device object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.ModuleInfoPath">
            <summary>
            Gets or sets the pathname of the working directory for storing temporary module information. 
            Specifying a working directory speeds up the identification of variables.
            </summary>
            <example>
            	"c:\Temp\"
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Connection.ResponseTimeout">
            <summary>Gets or sets the response timeout for the device.</summary>
            <value>ResponseTimeout for CPU object.</value>
        </member>
        <member name="P:BR.AN.PviServices.Connection.Routing">
            <summary>Gets or sets the routing path.</summary>
            <example>Routing e.g.: "IF3/IF2.7"</example>
        </member>
        <member name="P:BR.AN.PviServices.Connection.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Connection.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Connection.CommSyncDirections">
            <summary>Enumerations the options for synchronizing communication parameters</summary>
        </member>
        <member name="F:BR.AN.PviServices.Connection.CommSyncDirections.ConnectionToCpu">
            <summary>Synchronize the parameters from the connection to the CPU object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Connection.CommSyncDirections.FromCpuToConnection">
            <summary>Synchronize the parameters from the CPU object to connection.</summary>
        </member>
        <member name="T:BR.AN.PviServices.ModuleNotifivcations">
            <summary>The communication device being used is determined with the DeviceType enumerator. 
            The following communication devices can be defined: Serial, TcpIp, Can and Shared.</summary>
            <remarks>Default is INA2000! e.g. use N2000_Serial for NET2000 line.</remarks>
        </member>
        <member name="F:BR.AN.PviServices.ModuleNotifivcations.ModuleListChanges">
            <summary>activate module changed list event</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleNotifivcations.ModuleChanges">
            <summary>activate changed module event</summary>
        </member>
        <member name="T:BR.AN.PviServices.ANSLTcp">
            <summary>
            This class is used to connect to a Ethernet UDP device
            The device contains the following default parameters: 
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>
            Reads device configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.UpdateParameters(System.String,System.Boolean)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
            <param name="bCpu">The parameters belongs to the CPU if TRUE.</param>
            <returns>true if successful else false -> call the update function of the base class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.UpdateCpuParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.#ctor">
            <summary>Initializes a new instance of the ANSLTcp class</summary>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.Init">
            <summary>Initializes a new instance of the ANSLTcp class</summary>
        </member>
        <member name="M:BR.AN.PviServices.ANSLTcp.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.RemotePort">
            <summary>Gets or sets the TCP/IP port number of the target station. (ANSL_ONL_COMM_PARAM_TCP.IpPort)</summary>
            <value>RemotePort</value>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.CommunicationTimeout">
            <summary>Gets or sets the communication timeout in MSec. (ANSL_ONL_COMM_PARAM_TCP.Timeout)</summary>
            <value>CommunicationTimeout</value>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.SendDelay">
            <summary>Gets or sets the send delay in MSec. (ANSL_ONL_COMM_PARAM_TCP.SendDelay)</summary>
            <value>SendDelay</value>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.RedundancyCommMode">
            <summary>
            Gets or sets wheter to start a redundant communication to the PLC or not.
            If set to true the the PLC communication will be handled using cluster- primary- and secondary- Cpu connectrion settings. (/RED=1)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.CommunicationBufferSize">
            <summary>Gets or sets the communication buffer size in BYTEs. (ANSL_ONL_COMM_PARAM_TCP.BfSize)</summary>
            <value>CommunicationBufferSize</value>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.DestinationIpAddress">
            <summary>Gets or sets the IP address of the target station. (ANSL_ONL_COMM_PARAM_TCP.szIpAddr)</summary>
            <value>DestinationIpAddress</value>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <value>All parameters which belong to the PVI DEVICE object.</value>
        </member>
        <member name="P:BR.AN.PviServices.ANSLTcp.CpuParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the CPU parameters.</summary>
            <value>All parameters which belong to the PVI CPU object.</value>
        </member>
        <member name="T:BR.AN.PviServices.TcpIpMODBUS">
            <summary>This class is used to connect to a MODBUSIP node using TCPIP.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpIpMODBUS.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Save the device settings to the export file.</summary>
            <param name="writer">The reference of the XML writer component.</param>
            <param name="flags">Flags for the configuration options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TcpIpMODBUS.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TcpIpMODBUS.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.TcpIpMODBUS.UpdateCpuParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.TcpIpMODBUS.#ctor">
            <summary>
            Initializes a new instance of the TcpIp class
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpIpMODBUS.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TcpIpMODBUS.FBDConfiguration">
            <summary>Gets or sets the configurtion file from the FieldBusDESIGNER.
            If this option is used <seealso cref="P:BR.AN.PviServices.TcpIpMODBUS.DestinationIPAddress"/>will be searched within the configuration!</summary>
            <value>The configurtion file from the FieldBusDESIGNER.</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIpMODBUS.DestinationIPAddress">
            <summary>Gets or sets the TCP/IP address of the target station.</summary>
            <value>The tcpip address of the destination station.</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIpMODBUS.PortNumber">
            <summary>Gets or sets the TCP/IP port number of the target station.</summary>
            <remarks>The default value is 502. If the <seealso cref="P:BR.AN.PviServices.TcpIpMODBUS.DestinationIPAddress"/> is defined in the <seealso cref="P:BR.AN.PviServices.TcpIpMODBUS.FBDConfiguration"/> file this parameter will be ignored.</remarks>
            <value>The port number of the destination station.</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIpMODBUS.UnitID">
            <summary>Gets or sets the unit number of the target station.</summary>
            <remarks>The default value is 255.</remarks>
            <value>The unit ID of the destination station.</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIpMODBUS.ConnectionRetries">
            <summary>Gets or sets the number of connection retries.</summary>
            <value>Connection retry count.</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIpMODBUS.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <value>All parameters which belong to the PVI DEVICE object.</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIpMODBUS.CpuParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the CPU parameters.</summary>
            <value>All parameters which belong to the PVI CPU object.</value>
        </member>
        <member name="T:BR.AN.PviServices.Modem">
            <summary>Implementaion of an INA2000 modem device object.</summary>
        </member>
        <member name="T:BR.AN.PviServices.ModemBase">
            <summary>Base implementaion of any modem device object.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ModemBase.#ctor">
            <summary>Initializes a new instance of the ModemBase class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ModemBase.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags,System.String,System.String)">
            <summary>Save the device settings to the export file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration options.</param>
            <param name="attributeName">The attribute name to be stored in the XML file.</param>
            <param name="attributeValue">The attribute name to be stored in the XML file.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ModemBase.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ModemBase.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModemBase.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.ModemBase.Modem">
            <summary>Gets or sets the type of modem to be used.</summary>
            <value>Modem is a const expression to identify the type of communication port.</value>
        </member>
        <member name="P:BR.AN.PviServices.ModemBase.CommunicationPort">
            <summary>The identifacation of the communication port.</summary>
            <value>CommunicationPort is a const expression to identify the type of communication port.</value>
        </member>
        <member name="P:BR.AN.PviServices.ModemBase.PhoneNumber">
            <summary>Gets or sets the phone number. 
            Phone number to be dialed according to the 'ITU-T Recommendation E.123' format, e.g. +43(7748)6586. 
            The entire phone number should always be specified (with country code). 
            Conversions to the actual number are done automatically. This string must be written in single quotation marks.</summary>
            <value>TelephoneNumber</value>
        </member>
        <member name="P:BR.AN.PviServices.ModemBase.Redial">
            <summary>Gets or sets the maximum number of unsuccessful dialing attempts. 
            Specifies how often it should be attempted to re-establish a broken connection. 
            If "INFINITE" is specified, redialing continues indefinitely. 
            A value 0 means that no attempts at redialing are made. The parameter is only relevant if PhoneNumber is set.</summary>
            <value>Redial</value>
        </member>
        <member name="P:BR.AN.PviServices.ModemBase.RedialTimeout">
            <summary>Gets or sets the timeout for redialing in seconds. 
            If a dialing attempt fails, then this time interval is always observed before another attempt is made. DEFAULT = 60.</summary>
            <value>RedialTimeout</value>
        </member>
        <member name="P:BR.AN.PviServices.ModemBase.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <value>All parameters which belong to the PVI DEVICE object.</value>
        </member>
        <member name="M:BR.AN.PviServices.Modem.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Modem.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Modem.#ctor">
            <summary>Initializes a new instance of the Modem class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Modem.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="T:BR.AN.PviServices.ModemNET2000">
            <summary>Implements a modem description for NET2000 modem devices.</summary>
            <remarks>Although this class has an implementaion PviServices does not support the NET2000 protocoll!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ModemNET2000.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the device configuration to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ModemNET2000.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ModemNET2000.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModemNET2000.#ctor">
            <summary>Initializes a new instance of the NET2000 Modem class.</summary>
        </member>
        <member name="T:BR.AN.PviServices.FlowControls">
            <summary>The flow control flags. 
            Sample: "/RS=422". 
            This parameter controls the data flow of the CTS (clear to send) and the RTS (request to send) cable of the serieal device.
            
            Valid values are:
            NOT_SET = -2:The RS flag will not be set for communication.
            SYSTEM = -1: PVI does not change the settings. The settings set in the OS Control Panel will be used.
            RTS_OFF = 0: Permanently turn off the RTS line. (RTS flow control is disabled).
            RS232 = 232: Use RTS Handshake.
            RS422 = 422: Permanently turn on RTS line.
            
            The CTS flow control is deactivated for all values bigger than 0.
            
            Some USB to serial adapters are not able to handle the CTS and RTS flow control. 
            To use these devices anyway set the flow control to RTS_OFF.</summary>
        </member>
        <member name="F:BR.AN.PviServices.FlowControls.NOT_SET">
            <summary>TheRS flag will not be set for communication.</summary>
        </member>
        <member name="F:BR.AN.PviServices.FlowControls.SYSTEM">
            <summary>PVI does not change the settings. The settings set in the OS Control Panel will be used.</summary>
        </member>
        <member name="F:BR.AN.PviServices.FlowControls.RTS_OFF">
            <summary>Permanently turn off the RTS line. (RTS flow control is disabled).</summary>
        </member>
        <member name="F:BR.AN.PviServices.FlowControls.RS232">
            <summary>Use RTS Handshake.</summary>
        </member>
        <member name="F:BR.AN.PviServices.FlowControls.RS422">
            <summary>Permanently turn on RTS line.</summary>
        </member>
        <member name="T:BR.AN.PviServices.Serial">
            <summary>
            This class is used to connect to a serial device.
            The device contains the following default parameters: 
            Channel = 2			 <br/>
            BaudRate = 57600	 <br/>
            Parity = Parity.Even <br/>
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Serial.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Serial.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Serial.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.Serial.#ctor">
            <summary>Initializes a new instance of the Serial class</summary>
        </member>
        <member name="M:BR.AN.PviServices.Serial.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Serial.Channel">
            <summary>
            Gets or sets the channel of this instance.
            By default = COM1 to COM4. 
            With some serial interface cards, it is possible to have more than COM4.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Serial.BaudRate">
            <summary>
            Gets or sets baud rate in bits per second
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Serial.Parity">
            <summary>
            Gets or sets the parity.
            </summary>
            <remarks>
            Default = Parity.Even.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.Serial.FlowControl">
            <summary>Gets or sets the flow control flag. 
            Sample: "/RS=422". 
            This parameter controls the data flow of the CTS (clear to send) and the RTS (request to send) cable of the serieal device.
            
            Valid values are:
            NOT_SET = -2:TheRS flag will not be set for communication.
            SYSTEM = -1: PVI does not change the settings. The settings set in the OS Control Panel will be used.
            RTS_OFF = 0: Permanently turn off the RTS line. (RTS flow control is disabled).
            RS232 = 232: Use RTS Handshake.
            RS422 = 422: Permanently turn on RTS line.
            
            The CTS flow control is deactivated for all values bigger than 0.
            
            Some USB to serial adapters are not able to handle the CTS and RTS flow control. 
            To use these devices anyway set the flow control to RTS_OFF.</summary>
            <value>FlowControl</value>
        </member>
        <member name="P:BR.AN.PviServices.Serial.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <value>All parameters which belong to the PVI DEVICE object.</value>
        </member>
        <member name="T:BR.AN.PviServices.Shared">
            <summary>Implements the shared device (LS251).</summary>
        </member>
        <member name="M:BR.AN.PviServices.Shared.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Shared.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">The owner of the instance which will be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Shared.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.Shared.#ctor">
            <summary>Initializes a new instance of the Serial class</summary>
        </member>
        <member name="M:BR.AN.PviServices.Shared.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Shared.Channel">
            <summary>Gets or sets the channel of this instance. By default = LS251_1 to LS251_9. </summary>
            <value>Channel</value>
        </member>
        <member name="T:BR.AN.PviServices.TCPModes">
            <summary>Initialization modes for the TCPIP device</summary>
        </member>
        <member name="F:BR.AN.PviServices.TCPModes.NONE">
            <summary>Initialize the communication object to ZEROs.</summary>
        </member>
        <member name="F:BR.AN.PviServices.TCPModes.STANDARD">
            <summary>Default initialization for standard tcpip devices. /SA=1 /DA=2 /REPO=11159</summary>
        </member>
        <member name="F:BR.AN.PviServices.TCPModes.AR000">
            <summary>Default initialization for an ARsim device. /SA=1 /DA=2 /DAIP=127.0.0.1 /REPO=11160</summary>
        </member>
        <member name="F:BR.AN.PviServices.TCPModes.ARSIM">
            <summary>Default initialization for an ARsim device. /SA=1 /DA=2 /DAIP=127.0.0.1 /REPO=11160</summary>
        </member>
        <member name="F:BR.AN.PviServices.TCPModes.AR010">
            <summary>Default initialization for an ARwin device. /SA=1 /DA=2 /DAIP=192.168.0.2</summary>
        </member>
        <member name="T:BR.AN.PviServices.TcpIp">
            <summary>
            This class is used to connect to a Ethernet UDP device
            The device contains the following default parameters: 
            </summary>
            <example>
            SourceStation		= 1 <br/>
            DestinationStation	= 7 <br/>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.DeviceBase)">
            <summary>
            Reads device configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.UpdateParameters(System.String,System.Boolean)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
            <param name="bCpu">The parameters belongs to the CPU if TRUE.</param>
            <returns>true if successful else false -> call the update function of the base class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.UpdateDeviceParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.UpdateCpuParameters(System.String)">
            <summary>Updates the instance by a parameter string array.</summary>
            <param name="parameters">The parameters to be used for this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.InitTCpParams(System.Byte,System.Byte,System.UInt32,System.UInt32,System.String)">
            <summary>Initializes a new instance of the TcpIp class</summary>
            <param name="sa"></param>
            <param name="da"></param>
            <param name="sp"></param>
            <param name="dp"></param>
            <param name="daip"></param>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.#ctor">
            <summary>Initializes a new instance of the TcpIp class</summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.#ctor(BR.AN.PviServices.TCPModes)">
            <summary>Initializes a new instance of the TcpIp class</summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.InitMode(BR.AN.PviServices.TCPModes)">
            <summary>Initializes a new instance of the TcpIp class</summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpIp.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.TcpMode">
            <summary>Gets or sets the TCPIP mode.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.CheckDestinationStation">
            <summary>Gets or sets wheter to check the destination adress if its unambiguous or not.</summary>
            <remarks>can be 0 if OFF or 1 if ON</remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.LocalPort">
            <summary>
            Gets or sets the port number of the source station (separate station) 
            </summary>
            <remarks>
            A different default port number then only needs to be set if it is not unique within the local computer.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.SourcePort">
            <summary>
            Gets or sets the port number of the source station (separate station) 
            </summary>
            <remarks>
            A different default port number then only needs to be set if it is not unique within the local computer.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.Target">
            <summary>Gets or sets the value for the target. Defaul is 'i386'</summary>
            <value>Target</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.SourceStation">
            <summary>
            Gets or sets the station number of the source station (separate station) 
            </summary>
            <remarks>
            The station number must be unique within the network.
            The highest station number possible is 99 for SG3 targets and 255 for SG4 targets.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.RemotePort">
            <summary>
            Gets or sets the TCP/IP port number of the target station.
            </summary>
            <remarks>
            The port number must match the setting on the target station (PLC).
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.DestinationPort">
            <summary>Gets or sets the TCP/IP port number of the target station. Rather use <seealso cref="P:BR.AN.PviServices.TcpIp.RemotePort"/> because this property is limited to 32767!!</summary>
            <remarks>The port number must match the setting on the target station (PLC).</remarks>
            <value>DestinationPort</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.QuickDownload">
            <summary>Gets teh quick downlaod flag.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.DestinationStation">
            <summary>
            Gets or sets the station number of the target station.
            </summary>
            <remarks>
            The station number must be unique within the network.
            The lowest station number is 1.
            The highest station number possible is 99 for SG3 targets and 255 for SG4 targets.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.UniqueDeviceForSAandLOPO">
            <summary>Gets or sets wheter PVI should create uniqu objects for device objects whit diffen SourceAddress and LocalPort.</summary>
            <remarks>This feature will be supported by PVI starting with Version 3.0.2. For versions previous to 3.0.2 turn this feature off!!</remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.DestinationIpAddress">
            <summary>
            Gets or sets the IP address of the target station.
            </summary>
            <remarks>
            The IpAddress can be specified in addition to the DestinationAddress parameter.
            If the target station should be identified automatically, then the DestinationIpAddress 
            parameter must not be specified.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.DeviceParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the DEVICE parameters.</summary>
            <value>All parameters which belong to the PVI DEVICE object.</value>
        </member>
        <member name="P:BR.AN.PviServices.TcpIp.CpuParameterString">
            <summary>Call this method to split all parameters into CPU and device parameters and get the CPU parameters.</summary>
            <value>All parameters which belong to the PVI CPU object.</value>
        </member>
        <member name="T:BR.AN.PviServices.TcpDestinationSettings">
            <summary>This class implements the destination settings for an TCP connection.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpDestinationSettings.#ctor">
            <summary>Initializes a new instance of the TcpIp class</summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpDestinationSettings.Init">
            <summary>Initializes a new instance of the TcpIp class</summary>
        </member>
        <member name="M:BR.AN.PviServices.TcpDestinationSettings.Parse(System.String)">
            <summary>Will read the DestinationIPAddress, the RemotePortNumber, the DestinationStationNumber(optional) and finally the RoutingInformation(optional).</summary>
            <param name="strData">The string containing the destination parameters</param>
        </member>
        <member name="M:BR.AN.PviServices.TcpDestinationSettings.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the destination connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TcpDestinationSettings.DestinationIPAddress">
            <summary>IP address of the target station.
            Manual identification of the target station from the IP address or identification from the host name.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TcpDestinationSettings.RemotePortNumber">
            <summary>The IP port number of the target station.
            The port number must match the setting on the target station.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TcpDestinationSettings.DestinationStationNumber">
            <summary>Optional station number of the target station. 
            Automatic identification of the target station from the station number. 
            The station number must be unique within the INA2000 network.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TcpDestinationSettings.RoutingInformation">
            <summary>Optional Routing information. 
            Can be a connection to PLC stations on other networks via a PLC station communication connection. 
            These connections can also run via several PLC stations. 
            Individual stations are defined in the routing path. 
            
            Syntax for entry: 
            SL[Slot].SS[SubSlot].IF[Interface].[Address]
            
            Samples:
            <example>IF3/IF2.7</example> From the PC to the first PLC, then via IF3 to the next station (PLC) and from there to a CAN station with station number 7 via IF2. 
            <example>SL6.IF1</example> From PC to the first PLC, then from there via Slot 6 (e.g. IF050) and IF1. 
            <example>PP3</example> From the PC to the first PLC and then to peripheral processor 3.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Access">
            <summary>Access modes for PVI variable objects from the B+R PVI communication library. ( KWDESC_ATTRIBUTE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.Access.No">
            <summary>No access.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Access.Read">
            <summary>Read access. ( KWPVATTR_READ ... AT=r ). 
            Allows read access to the process data of a variable object. 
            If this attribute is not specified, a read access to the variable data is rejected with Error 12035. 
            In addition, PVI Manager doesn't carry out any cyclic read requests.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Access.Write">
            <summary>Write access. ( KWPVATTR_WRITE ... AT=w ).
            Allows write access to the process data of a variable object. 
            If this attribute is not specified, a write access attempt is rejected with Error 12034.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Access.ReadAndWrite">
            <summary>ReadAndWrite access. ( KWPVATTR_READ | KWPVATTR_WRITE ... AT=rw )</summary>
        </member>
        <member name="F:BR.AN.PviServices.Access.EVENT">
            <summary>PLC event operation.. ( KWPVATTR_EVENT ... AT=e ).
            Operating mode as a line or PLC event variable. 
            Monitoring for changes in the process data is carried out in the line or on the PLC. 
            For this reason, PVI Manager doesn't need to carry out any cyclic read requests.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Access.DIRECT">
            <summary>Direct event trigger in consequence of any data event. ( KWPVATTR_DIRECT ... AT=d ).
            This flag is only effective in connection with the Access.EVENT. 
            A direct event trigger means that all process data returned by the line or PLC is sent directly to the application.</summary>
            <remarks>Using this flag for normal PLC variables doesn't make much sense since the short-lived data changes cannot be detected within the refresh time anyway.
            This flag should be used when absolutely necessary for DCAN or MTC and with extreme care!</remarks>
        </member>
        <member name="F:BR.AN.PviServices.Access.FASTECHO">
            <summary>Immediate write echo in consequence of a write access on the PV data. ( KWPVATTR_WRECHO ... AT=h ).
            When set, the time between a write request and a resulting "Data Change" event can be reduced. 
            However, the write request itself cannot be accelerated with this (time between write request and write response). 
            The write data is compared with the process image before the transfer to the PLC and, if there is a change, a "Data Changed" event is triggered.</summary>
        </member>
        <member name="T:BR.AN.PviServices.AccessModes">
            <summary>Access modes for PVI objects from the B+R PVI communication library.</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Null">
            <summary>Undefined access mode. ( POBJ_MODE_NULL )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Event">
            <summary>Event response. ( POBJ_MODE_EVENT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Read">
            <summary>Response to a read request. ( POBJ_MODE_READ )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Write">
            <summary>Response to a write request. ( POBJ_MODE_WRITE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Create">
            <summary>Creat a PVI object. ( POBJ_MODE_CREATE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Delete">
            <summary>Delete an existing object. ( POBJ_MODE_DELETE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Link">
            <summary>Create a link object to an existing PVI process object. ( POBJ_MODE_LINK )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.ChangeLink">
            <summary>Change the connection of an object. ( POBJ_MODE_CHGLINK )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Unlink">
            <summary>Free a single link object. ( POBJ_MODE_UNLINK )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.UnlinkAll">
            <summary>Free all link objects. ( POBJ_MODE_UNLINKALL )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Attach">
            <summary>Response to a client attach. ( POBJ_MODE_ATTACH )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Detach">
            <summary>Response ta client detach. ( POBJ_MODE_DETACH )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.Acknowledge">
            <summary>Acknowledge. ( POBJ_MODE_ACK )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessModes.ModeCount">
            <summary>The total number of access modes. ( POBJ_MODE_CNT )</summary>
        </member>
        <member name="T:BR.AN.PviServices.AccessTypes">
            <summary>Access types for PVI objects from the B+R PVI communication library.</summary>
            <remarks>Not all access types are valid for all objects!!</remarks>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.None">
            <summary>Undefined access type. ( POBJ_MODE_NULL )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ObjectType">
            <summary>Access object information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Version">
            <summary>Access version information. ( POBJ_ACC_VERSION )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Error">
            <summary>Read error code. ( POBJ_ACC_ERROR )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.EventMask">
            <summary>Access event mask flags. ( POBJ_ACC_EVMASK )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.List">
            <summary>Access PVI internal list function for the object. ( POBJ_ACC_LIST )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListExtern">
            <summary>Access PVI- Line list function. ( POBJ_ACC_LIST_EXTERN )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Connect">
            <summary>Access connection description. ( POBJ_ACC_CONNECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Data">
            <summary>Access the value. ( POBJ_ACC_DATA )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Status">
            <summary>Access state information. ( POBJ_ACC_STATUS )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Type">
            <summary>Access object data type and attribute information from PVI. ( POBJ_ACC_TYPE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.TypeExtern">
            <summary>Access object data type and attribute information directly from PLC. ( POBJ_ACC_TYPE_EXTERN )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Refresh">
            <summary>Access refresh time. ( POBJ_ACC_REFRESH )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Hysteresis">
            <summary>Access hysteresis information. ( POBJ_ACC_HYSTERESE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Replace">
            <summary>Access replacment value. ( POBJ_ACC_DEFAULT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Function">
            <summary>Access scaling function. ( POBJ_ACC_FUNCTION )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.TypeIntern">
            <summary>Access object data type and attribute information directly from PLC. ( POBJ_ACC_TYPE_INTERN )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Upload">
            <summary>Start an upload. ( POBJ_ACC_UPLOAD )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Download">
            <summary>Start a down load by specifying the file name. ( POBJ_ACC_DOWNLOAD )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.DateTime">
            <summary>Access PLC date and time. ( POBJ_ACC_DATE_TIME )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.MemoryDelete">
            <summary>Delete a specified memory on the target. ( POBJ_ACC_MEM_DELETE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.MemoryInfo">
            <summary>Read the memory mapping from the target. ( POBJ_ACC_MEM_INFO )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ModuleType">
            <summary>Read the typ information of the module. ( POBJ_ACC_MOD_TYPE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.UploadStream">
            <summary>Upload moddule given a BYTE stream. ( POBJ_ACC_UPLOAD_STM )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.DownloadStream">
            <summary>Download moddule given a BYTE stream. ( POBJ_ACC_DOWNLOAD_STM )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ModuleData">
            <summary>Read logger data. ( POBJ_ACC_MOD_DATA )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.CpuModuleDelete">
            <summary>Delete a module using the link ID of the CPU object.  ( POBJ_ACC_MOD_DELETE )</summary>
            <remarks>The access type POBJ_ACC_MOD_DELETE is only supported by PVI Manager Version 3.50 (PviMan.exe file version) or higher, and by INA2000 Version 3.44 (LnIna2.dll file version).</remarks>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListLine">
            <summary>Get the list of available PVI protocolls. ( POBJ_ACC_LIST_LINE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListDevice">
            <summary>Get the list of available PVI interfaces. ( POBJ_ACC_LIST_DEVICE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListStation">
            <summary>Get the list of available PVI station objects. ( POBJ_ACC_LIST_STATION )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListCpu">
            <summary>Get the list of available PVI PLC objects. ( POBJ_ACC_LIST_CPU )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListModule">
            <summary>Get the list of available BR modules. ( POBJ_ACC_LIST_MODULE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListTask">
            <summary>Get the list of available BR tasks. ( POBJ_ACC_LIST_TASK )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ListVariable">
            <summary>Get the list of available PVI variables. ( POBJ_ACC_LIST_PVAR )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.CpuInfo">
            <summary>Access object type information. ( POBJ_ACC_CPU )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Cancel">
            <summary>Read PLC information. ( POBJ_ACC_CPU_INFO )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.UserTag">
            <summary>Access the user specific tag string. ( POBJ_ACC_USERTAG )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.License">
            <summary>Read PVI license information. ( POBJ_ACC_INFO_LICENCE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Global">
            <summary>Read global PVI information. ( POBJ_ACC_INFO_GLOBAL )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Config">
            <summary>Read PVI configuration information. ( POBJ_ACC_INFO_CONFIG )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Clients">
            <summary>Get a list of all connected PVI Client applications. ( POBJ_ACC_LIST_CLIENTS )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.PVIVersion">
            <summary>Read version string of the PVI installation. ( POBJ_ACC_PVI_VERSION )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Snapshot">
            <summary>Perform a PVI snaapshot. ( POBJ_ACC_SNAPSHOT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.DataLogger">
            <summary>Access data logger in read or write direction. ( POBJ_ACC_PVILOG )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.PviParameter">
            <summary>Access PVIManger parameter. ( POBJ_ACC_PVIMAN_PARAM )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.StopPviManager">
            <summary>Stop PVIManager.exe. ( POBJ_ACC_PVIMAN_EXIT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.MessageBox">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Info">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.TaskClass">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ModuleList">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ReadPhysicalMemory">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.WritePhysicalMemory">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.Reset">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.VariableList">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.StopCpu">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.StartCpu">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.StopTaskClass">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.StartTaskClass">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.CpuMemoryInfo">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.TTService">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ReadError">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.HardwareUpload">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LoadDiagnose">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ReadDiagModList">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.DeleteDiagModule">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.InstallModule">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.StartModule">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.StopModule">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ResumeModule">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.BurnModule">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.DeleteModule">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ClearMemory">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ForceOn">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ForceOff">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.GetRtc">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.SetRtc">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.GetErrorText">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.DisableCon">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.EnableCon">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ModulePath">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.SavePath">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ResolveNodeNumber">
            <summary>BRC_ACC_COMM_DST Read the destination properties for an existing TCPIP connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LinkNodeList">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LinkNodeForceOff">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LibraryList">
            <summary>Access object type information. ( POBJ_ACC_OBJECT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LIC_ListDongles">
            <summary>Read list of dongles. ( BRC_ACC_LIC_GET_DG_LST   APIF_LIC_GETDONGLES )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LIC_ListOfExistingLicenses">
            <summary>Read list of existing licenses. ( BRC_ACC_LIC_GET_LC_LST   APIF_LIC_GETLICENSES )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LIC_ListOfRequiredLicenses">
            <summary>Read list of required licenses. ( BRC_ACC_LIC_GET_NLC_LST   APIF_LIC_GETNEEDEDLICENSES )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LIC_ReadContext">
            <summary>Read license context. ( BRC_ACC_LIC_GET_CONTEXT   APIF_LIC_GETCONTEXT )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LIC_UpdateLicense">
            <summary>Write license update info. ( BRC_ACC_LIC_UPDATE_LC   APIF_LIC_UPDATELICENSES )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LIC_GetLicenseStatus">
            <summary>Read license update info. ( BRC_ACC_LIC_GET_LC_STATUS   APIF_LIC_GETLICENSESTATUS )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.LIC_BlinkDongle">
            <summary>Read license context. ( BRC_ACC_LIC_BLINK_DONGLE   APIF_LIC_BLINKDONGLE )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_CpuInfo">
            <summary>CPU information. ( POBJ_LNANSL_ACC_XML_CPU_INFO )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_ModuleInfo">
            <summary>Module information. ( POBJ_LNANSL_ACC_XML_MOD_INFO )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_TaskInfo">
            <summary>Task information. ( POBJ_LNANSL_ACC_XML_TASK_INFO )</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_ModuleList">
            <summary> POBJ_LNANSL_ACC_XML_MOD_LIST	(POBJ_ACC_LINEBASE+147)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_MemoryInfo">
            <summary> POBJ_LNANSL_ACC_XML_MEM_INFO	(POBJ_ACC_LINEBASE+148)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_HardwareInfo">
            <summary> POBJ_LNANSL_ACC_XML_HW_INFO		(POBJ_ACC_LINEBASE+149)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_RedundancyInfo">
            <summary> POBJ_LNANSL_ACC_XML_RED_INFO	(POBJ_ACC_LINEBASE+150)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_CpuExtendedInfo">
            <summary> POBJ_LNANSL_ACC_XML_EXT_INFO	(POBJ_ACC_LINEBASE+151)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_TaskClassInfo">
            <summary> POBJ_LNANSL_ACC_XML_TC_INFO	(POBJ_ACC_LINEBASE+152)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_ApplicationInfo">
            <summary> POBJ_LNANSL_ACC_XML_APPL_INFO	(POBJ_ACC_LINEBASE+153)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_LoggerModuleInfo">
            <summary> POBJ_LNANSL_ACC_XML_LOGM_INFO	(POBJ_ACC_LINEBASE+160)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_LoggerModuleData">
            <summary> POBJ_LNANSL_ACC_XML_LOGM_DATA	(POBJ_ACC_LINEBASE+161)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_RedundancyControl">
            <summary> POBJ_LNANSL_ACC_RED_CTRL		(POBJ_ACC_LINEBASE+184)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_TracePointsRegister">
            <summary> POBJ_LNANSL_ACC_TP_REGISTER	(POBJ_ACC_LINEBASE+194)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_TracePointsUnregister">
            <summary> POBJ_LNANSL_ACC_TP_DEREGISTER	(POBJ_ACC_LINEBASE+195)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_TracePointsReadData">
            <summary> POBJ_LNANSL_ACC_TP_READ	(POBJ_ACC_LINEBASE+196)</summary>
        </member>
        <member name="F:BR.AN.PviServices.AccessTypes.ANSL_LISTConnections">
            <summary>List all ANSL connections. ( POBJ_LNANSL_ACC_CONN_LIST )</summary>
        </member>
        <member name="T:BR.AN.PviServices.Action">
            <summary>Describes the action type from an event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.NONE">
            <summary>This flag indicates, that error will not be reported to the clien application for a specific method.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.DoNotReportErrors">
            <summary>This flag indicates, that error will not be reported to the clien application for a specific method.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ConnectedEvent">
            <summary>Connected event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.DisconnectedEvent">
            <summary>Disconnected event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ErrorEvent">
            <summary>Error event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.StatusEvent">
            <summary>Status event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ObjectRemoved">
            <summary>Object removed</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.DeleteObject">
            <summary>Object deleted</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LinkObject">
            <summary>Object link</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.UnLinkObject">
            <summary>Object link</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.Read">
            <summary>Read access to an object. (Type of read is not known; used when canceling an read request)</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.Write">
            <summary>Object link</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.Error">
            <summary>Object error information</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.UserTag">
            <summary>Object user tag information</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceDisconnectPOSTMSG">
            <summary>Service connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceLink">
            <summary>Service connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceEvent">
            <summary>Service connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceConnect">
            <summary>Service connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceDisconnect">
            <summary>Service disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceArrange">
            <summary>Service disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LicenceInfoUpdate">
            <summary>The license info of the sevice object has changed.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceReadVersion">
            <summary>Get the version of the PVI object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceReadLinesList">
            <summary>Get the list of lines.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceLinkVariable">
            <summary>Get the list of PVI internal variables.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceLinkLine">
            <summary>Create a line link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceReadDevicesList">
            <summary>Get the list of devices.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceLinkDevice">
            <summary>Create a device link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceReadStationsList">
            <summary>Get the list of stations.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceLinkStation">
            <summary>Create a station link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceReadCpuList">
            <summary>Get the list of cpus.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ServiceLinkCpu">
            <summary>Create a cpu link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadTasksList">
            <summary>Get the list of tasks.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuLinkTask">
            <summary>Create a task link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadVariableList">
            <summary>Create a cpu variable link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuLinkVariable">
            <summary>Create a cpu variable link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuLinkModule">
            <summary>Create a module link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskReadVariablesList">
            <summary>Get the list of task variables.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskLinkVariable">
            <summary>Create a task variable link object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LineConnect">
            <summary>Connect for the Pvi LINE object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.DeviceConnect">
            <summary>Cconnect for the Pvi DEVICE object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.StationConnect">
            <summary>Connect for the Pvi STATION object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuConnect">
            <summary>Cpu connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuDisconnect">
            <summary>Cpu disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuStart">
            <summary>Cpu start</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuStop">
            <summary>Cpu stop</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuWarmRestart">
            <summary>Cpu warmrestart</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuColdRestart">
            <summary>Cpu coldrestart</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuRestart">
            <summary>Cpu restart</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuDiagnostics">
            <summary>Cpu diagnostics</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuModulesUpload">
            <summary>Cpu modules upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuTasksUpload">
            <summary>Cpu tasks upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuVariablesUpload">
            <summary>Cpu variables upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadTime">
            <summary>Reads the date and time of the Cpu object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuWriteTime">
            <summary>Writes the date and time of the Cpu object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuTTService">
            <summary>Reads a TTService from the plc</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuWriteSavePath">
            <summary>Sets the save path of the Cpu object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadSavePath">
            <summary>Reads the save path of the Cpu object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuChangeConnection">
            <summary>Change the connection of the Cpu object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuStatus">
            <summary>Change the status of the Cpu object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuModuleDelete">
            <summary>Delete the module from the PLC.</summary>
            <remarks>Deleting the module by CPU is only supported by PVI Manager Version 3.50 (PviMan.exe file version) or higher, and by INA2000 Version 3.44 (LnIna2.dll file version).</remarks>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadPhysicalMemory">
            <summary>Read data from a physical PLC address.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuWritePhysicalMemory">
            <summary>Write data to a physical PLC address.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuGlobalForceOFF">
            <summary>Sets the global force state to OFF.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuExtendedInfoTOC">
            <summary>Gets the extended CPU info for TOC.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ReadError">
            <summary>Reads the error log book for the Cpu object. Only valid for SG3 targets up to OS version A2.85.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ReadErrorToFile">
            <summary>Reads the error log book for the Cpu object and saves the binary data to a file. Only valid for SG3 targets up to OS version A2.85.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ResolveNodeNumber">
            <summary>BRC_ACC_COMM_DST Read the destination properties for an existing TCPIP connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleConnect">
            <summary>Module connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleDisconnect">
            <summary>Module disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleStart">
            <summary>Module start</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleStop">
            <summary>Module stop</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleDelete">
            <summary>Module delete</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleUpload">
            <summary>Module upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleDownload">
            <summary>Module download</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleInfo">
            <summary>Module info</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleChangeConnection">
            <summary>Change the connection of the object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleState">
            <summary>State change event.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleResume">
            <summary>State change event.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleRunCycleForResume">
            <summary>Helper to implement set cycle to zero befor resume.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleProgressEvent">
            <summary>Module uploadprogress event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleCreatedEvent">
            <summary>Module created event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleChangedEvent">
            <summary>Module changed event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleDeletedEvent">
            <summary>Module deleted event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskConnect">
            <summary>Task connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskDisconnect">
            <summary>Task disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskStart">
            <summary>Task start</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskStop">
            <summary>Task stop</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskRunCycle">
            <summary>Task run cycle</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskDelete">
            <summary>Task delete</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskUpload">
            <summary>Task upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskVariablesUploaded">
            <summary>Task-variables uploaded</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskChangeConnection">
            <summary>Change the connection of the object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskRunCycleForResume">
            <summary>Helper to start task</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskInfo">
            <summary>Helper to get task info</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskRegisterTPs">
            <summary>Register trace variables</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskUnregisterTPs">
            <summary>Unregister trace variables</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskReadTPsData">
            <summary>Read the data for the trace variables</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskReadModuleList">
            <summary>Reads the module list for the tasks</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskCreatedEvent">
            <summary>Task created event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskChangedEvent">
            <summary>Task changed event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskDeletedEvent">
            <summary>Task deleted event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskUploadProgressEvent">
            <summary>Task uploadprogress event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableConnect">
            <summary>Variable connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableDisconnect">
            <summary>Variable disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableActivate">
            <summary>Variable activate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableDeactivate">
            <summary>Variable deactivate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableValueRead">
            <summary>Variablevalue read</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableValueWrite">
            <summary>Variablevalue write</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableGetForce">
            <summary>Variable get force</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableSetForce">
            <summary>Variable set force</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableGetType">
            <summary>Variable get type</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableSetType">
            <summary>Variable set type</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableGetRefreshTime">
            <summary>Variable get refreshtime</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableSetRefreshTime">
            <summary>Variable set refreshtime</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableGetHysteresis">
            <summary>Variable get hysteresis</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableSetHysteresis">
            <summary>Variable set hysteresis</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableSetFunction">
            <summary>Variable function</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableExtendedTypeInfoRead">
            <summary>Variable initial value read</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableValueChangedEvent">
            <summary>Variable value changed Event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableAccessTypeChange">
            <summary>Variable access type change</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablePollingPropertyChange">
            <summary>Variable polling property change</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableScalingChange">
            <summary>Variable scaling change</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableSetUserTag">
            <summary> Variable user tag </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableEVMaskChange">
            <summary> Variable event mask </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableWriteInitialValue">
            <summary> Write init value for variable</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableReadState">
            <summary> Read the state value for variable</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableChangeConnection">
            <summary>Change the connection of the object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableFormatChanged">
            <summary>The variables data typ information has changed.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesConnect">
            <summary>Variable collection connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesDisconnect">
            <summary>Variable collection disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesActivate">
            <summary>Variable collection activate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesDeactivate">
            <summary>Variable collection deactivate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TasksConnect">
            <summary>Tasks connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TasksDisconnect">
            <summary>Task collection disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TasksActivate">
            <summary>Task collection activate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TasksDeactivate">
            <summary>Task collection deactivate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LogicalsConnect">
            <summary>Logical object collection connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LogicalsDisconnect">
            <summary>Logical object collection disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LogicalsActivate">
            <summary>Logical object collection activate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LogicalsDeactivate">
            <summary>Logical object collection deactivate</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.MemoriesUpload">
            <summary>Memorie collection upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesUpload">
            <summary>Variable collection upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TasksUpload">
            <summary>Task collection upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModulesUpload">
            <summary>Module collection upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskClassesUpload">
            <summary>Taskclass collection upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ClearMemory">
            <summary>Clear memory on the target.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LinkNodesUpload">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesSetRefreshTime">
            <summary>Set refreshtime for variable collection</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggersUpload">
            <summary>Logger collection upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadModuleList">
            <summary>Reads the module list for the cpu</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggersConnect">
            <summary>Loggers connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerReadModuleList">
            <summary>Reads the module list for the loggers</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableUnlink">
            <summary>Variable unlink request</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableRead">
            <summary>Variable read</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableWrite">
            <summary>Variable write</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableUpload">
            <summary>Variable upload (Datatype structure)</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableLink">
            <summary>Variable link</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuUploadInfo">
            <summary>Cpu info upload</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuEvent">
            <summary>Cpu event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuLink">
            <summary>Cpu link</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskEvent">
            <summary>Task event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TaskLink">
            <summary>Task link</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleEvent">
            <summary>Module event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModuleLink">
            <summary>Module link</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableInternLink">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableInternUnlink">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableInternFormat">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuUploadHWInfo">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadRedundancyInfo">
            <summary>rednundancy info read</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuSwitchActiveCpu">
            <summary>active CPU changed</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuSynchronizeApplication">
            <summary>application synchronization completed</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadExtenedInfo">
            <summary>Read the extended CPU info (at the moment only TOC is supported)</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadMemoryInfo">
            <summary>Read the memory info as XML string (supported by ANSL only)</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadHardwareInfo">
            <summary>Read the hardware info as XML string (supported by ANSL only)</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuEventRedundancyInfo">
            <summary>rednundancy info changed</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpuReadApplicationInfo">
            <summary>application info as XML string (supported by ANSL only)</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LIC_GetStatus">
            <summary>Get Lic Status</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LinkNodeList">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IODataPointConnect">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IODataPointDisconnect">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IOFDataPointConnect">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IOFDataPointDisconnect">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IODataPointForceOn">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IODataPointForceOff">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IODataPointValueRead">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IODataPointValueWrite">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesDataValid">
            <summary>Variables memory</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IOPDataPointConnect">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.IOPDataPointDisconnect">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.PhysicalValueChangedEvent">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ForceValueChangedEvent">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesValuesWrite">
            <summary>Variables value write</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariablesValuesRead">
            <summary>Variables value read</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpusConnect">
            <summary>Cpus connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpusDisconnect">
            <summary>Cpus disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.CpusRestart">
            <summary>Cpus restart</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModulesDownload">
            <summary>Modules download</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModulesConnect">
            <summary>Modules connect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ModulesDisconnect">
            <summary>Modules disconnect</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TasksDownload">
            <summary>Tasks download</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerRead">
            <summary>Read the logger entries.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerReadEntry">
            <summary>Read one entry.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerContinuousActivate">
            <summary>Activate the continuous logger update.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerContinuousDeactivate">
            <summary>Deactivate the continuous logger update.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerReadBlock">
            <summary>Read a specified block of logger entries.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerClear">
            <summary>Do some cleanup.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerReadStatus">
            <summary>Read the status of the logger module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerIndexForRead">
            <summary>The index for the read access.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerIndexForConnect">
            <summary>The index for the connection</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerConnect">
            <summary>Connect the logger module for the communication</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerGlobalAdded">
            <summary>Add the logger to the global collection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerGlobalRemoved">
            <summary>Remove the logger from the global collection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerReadBlockForAdded">
            <summary>Read</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerIndexForUpdate">
            <summary>Read the logger entries for an update.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerReadEntryForCompare">
            <summary>Read the specified logger entry for comparision purpose.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerIndexForContinuousActivated">
            <summary>The index for the read access after continuous activate.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerDetectSGType">
            <summary>Detect the type of logger module (SG3 and SGC have onle the ErrorLogBook SG4 targets can have more logger modules).</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerGetStatus">
            <summary>Detect the status of the $arlogsys module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerDelete">
            <summary>Delete logger module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerDisconnect">
            <summary>Delete logger module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerUpload">
            <summary>Upload logger module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerCreatedEvent">
            <summary>Logger created event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerChangedEvent">
            <summary>Logger changed event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LoggerDeletedEvent">
            <summary>Logger deleted event</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TracePointConnect">
            <summary>Connect TracePoint.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TracePointDisConnect">
            <summary>Disconnect TracePoint.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.TracePointDataChanged">
            <summary>TracePoint data has changed.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerExtendedStart">
            <summary>
            Install B&amp;R Profiler definition module and start measurement (obsolete for version 4)
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerStart">
            <summary>
            Start B&amp;R Profiler measurement
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerStop">
            <summary>
            Stop B&amp;R Profiler measurement
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerInstall">
            <summary>
            Install B&amp;R Profiler definition module
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerDeinstall">
            <summary>
            Deinstall B&amp;R Profiler modules
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerGetStack">
            <summary>
            Start stack measurement only (obsolete for version 4)
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerGetInfo">
            <summary>
            Get B&amp;R Profiler Information from target
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerDefault">
            <summary>
            Install B&amp;R Profiler default definition module and start measurement (version 4 only)
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ProfilerReadState">
            <summary>1008 Read the profiler status.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.Cancel">
            <summary>1100  abort the active process.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LibraryConnect">
            <summary>1198  request a connect for the library..</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LibraryDisconnect">
            <summary>1199  request a disconnect for the library..</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LibraryUpload">
            <summary>1200  request a upload for the library..</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LibFunctionsUpload">
            <summary>1201  upload the library functions.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LibrariesUpload">
            <summary>1202  request a upload for the library collection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LibrariesConnect">
            <summary>1203  request a connect for the library collection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.LibrariesDisconnect">
            <summary>1204  request a disconnect for the library collection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.ChangeConnection">
            <summary>1300  change the connection.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.SNMPListStations">
            <summary>Get the listz of all available MAC addresses.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.SNMPListGlobalVariables">
            <summary>Get the list of all available global SNMP variables. Variables which do not belong to a MAC address.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.SNMPListLocalVariables">
            <summary>Get the list of all available local variables. Variables which belong to a MAC address.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.SNMPConnectLine">
            <summary>Create teh PVI line object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.SNMPConnectDevice">
            <summary>Create teh PVI device object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.SNMPConnectStation">
            <summary>Create the PVI station object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.SNMPConnectVariable">
            <summary>Create the PVI variable object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Action.VariableReadFormatInternal">
            <summary>Helper for Reading format information.</summary>
        </member>
        <member name="T:BR.AN.PviServices.Actions">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.BootMode">
            <summary>
            Boot mode
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.WarmRestart">
            <summary>WarmRestart</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.ColdRestart">
            <summary>ColdRestart</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.Reset">
            <summary>Reset</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.Reconfig">
            <summary>Reconfig</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.SYSSWCopy">
            <summary>System software copy</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.Diagnostics">
            <summary>Diagnostics</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.Error">
            <summary>Error</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.Boot">
            <summary>Boot</summary>
        </member>
        <member name="F:BR.AN.PviServices.BootMode.NMI">
            <summary>NMI</summary>
        </member>
        <member name="T:BR.AN.PviServices.CastModes">
            <summary>This is a combination of the supported cast / conversion modes. 
            Combine the different modes by using the logical OR operator.
            The cast mode parameter is a bit coded. 
            The adjustable conversion modes are represented by a bit within the bit list:
            Bit 0 (Value: 1) PG2000 or AS 1.3 - String variable:
            If the process object data format defines a i8 or u8 array (1 byte array), then the process data is regarded as a single variable of type string (VT=string) during data conversion.
            When reading the data format (access type TYPE or event "data format change"), "string" is returned as a variable type (i.e. actual data format = "VT=i8 VL=1 VN=24 CM=1" -> returned data format VT=string VL=24 VN=1). The parameter CM=1 must be specified in the process object for this. If CM=1 is only specified in the link object, then the actual data format is returned.
            Note: This conversion mode is provided for "old" PG2000 or AS 1.3 applications. New applications should not use these conversion parameters; rather, a String variable should also be defined as a String variable in the PLC.
            Bit 1 (Value: 2) Determines the way numbers appear in the string when converting from variable type String ("VT=string") to variable type Integer ("VT=i8, VT=u32"). 
            Decimal mode is not active (bit=0):
            A string with leading 0 places is interpreted as octal (i.e. -077, 0012). 
            If the string begins with "0x" or "0X", then the following places are interpreted as hexadecimal (i.e. 0x1f, -0x56a9, 0xA3). 
            In all other cases, the string is interpreted as decimal. 
            Decimal mode is active (bit = 1): 
            The string is always interpreted as decimal. In other words, a string with leading zeroes is interpreted as decimal; "0x123" (hexadecimal) cannot be interpreted.
            Bit 2 (Value: 4) Determines the behavior of a variable when the value range is violated. 
            A value range violation occurs if a number value cannot be represented in a variable. 
            Example: The value 130 cannot be represented in a variable of type i8 (value range: -128 to 127), 
            but rather in a variable of type u8 (value range: 0 to 255). If link objects and process objects use variable types of different value ranges, then a value range violation can occur in read or write direction (i.e. variable type in the link object i32 and in the process object i16, or variable type in the connection object i8 and in the process object u8). 
            Value range monitoring is not active (bit=0):
            Group type behavior during data conversion:
            Group type Integer to a variable type Integer with a smaller value range: The number is truncated binary. 
            Group type Float to a variable type with a smaller value range: In the number is not representable in the value range, then the result is undefined. 
            Group type String to a variable type Float or Integer: If the number is not representable in the value range, then the result is undefined. 
            Group type Float or Integer to variable type String: If the converted String is longer than the length of the string variable (parameter "VL"), then the string is truncated. 
            Value range monitoring is active (bit=1):
            The behavior during active value range monitoring is the same as the behavior of limit monitoring (see "Scaling and Limiting").
            Behavior when a violation of the value range occurs depends on the transfer direction:
            Writing variable data (PviWrite): Write tasks are halted when an error occurs. Data is not written to the PLC variable. Error code 12014 is returned in the write response. Additionally, the maximum representable value is returned with the write response and is sent to the application in the event data buffer (if specified) for function "PviWrite" or "PviWriteResultResponse". 
            Reading variable data (PviRead or data change event): The maximum representable value is sent instead of the variable data. An error message is not given. 
            In both cases, the respective status flags for Cast-overflow or Cast-underflow are set in the response info data (structure T_RESPONSE_INFO). Additional information concerning the response info data can be found in the "PviGetResponseInfo" function or the CB function SET_PVICALLBACK_DATA.
            Monitoring of limits is also carried out for String variable types ("VT=string"). A limit violation occurs when the string data is longer then the buffer size of the variables. Example: A string "abcdefg"+ terminating null cannot be put completely into a variable with the data format "VT=string VL=4".
            The status flag Cast-Overflow is set when a violation of the string limit or a violation in the positive value range of a numeric variable occurs. Cast-Underflow can only occur in connection with numeric variables with a negative value range (signed Integer, Float). A violation of the negative value range is signaled in this case. In non-interpretable characters are contained in a string which is to be converted to another variable type, this is handled like a string limit violation.
            Bit 3 (Value: 8) Determines the type of conversion of variable type Float ("VT=f32 ...") to variable type Integer ("VT=i8, VT=u32 ..."). 
            Rounding mode is not active (bit=0):
            All places behind the decimal point of a Float are truncated. Example:  1.3 -> 1,  -15.5 -> -15,  0.9999 -> 0.
            Rounding mode is active (bit = 1):
            All places behind the decimal point of a Float are rounded (4/5). Example:  1.3 -> 1,  -15.5 -> -16,  0.9999 -> 1.
            Default / standard conversion = 0.</summary>
        </member>
        <member name="F:BR.AN.PviServices.CastModes.DEFAULT">
            <summary>Default CAST- mode.</summary>
        </member>
        <member name="F:BR.AN.PviServices.CastModes.PG2000String">
            <summary>Bit 0 (Value: 1) 
            String variable for PG2000 or AS 1.3.
            If the variable object data format defines a i8 or u8 array (1 byte array), 
            then the process data is regarded as a single variable of type String (VT=string) during type conversion. 
            When reading the data format (access type POBJ_ACC_TYPE or event POBJ_EVENT_DATAFORM), 
            "String" is returned as the variable type (e.g. actual data format = "VT=i8 VL=1 VN=24" -> returned data format "VT=string VL=24 VN=1"). 
            Setting CM=1 should take place in the process object. If CM=1 is only specified in the link object, 
            the corresponding type conversion is carried out, but the actual data format is returned when the data format is read. 
            This conversion mode is intended for "old" PG2000 or AS 1.3 applications. New applications should not use this mode. 
            Instead, a string variable should also be defined as a string variable in the PLC. </summary>
        </member>
        <member name="F:BR.AN.PviServices.CastModes.DecimalConversion">
            <summary>Bit 1 (Value: 2) 
            Determines the way numbers appear in the string when converting from variable type String ("VT=string") 
            to variable type Integer ("VT=i8, VT=u32"). 
            Decimal mode is not active (bit=0):
            A string with leading 0 places is interpreted as octal (i.e. -077, 0012). 
            If the string begins with "0x" or "0X", then the following places are interpreted as hexadecimal 
            (i.e. 0x1f, -0x56a9, 0xA3). 
            In all other cases, the string is interpreted as decimal. 
            Decimal mode is active (bit = 1): 
            The string is always interpreted as decimal. 
            In other words, a string with leading zeroes is interpreted as decimal; 
            "0x123" (hexadecimal) cannot be interpreted.</summary>
        </member>
        <member name="F:BR.AN.PviServices.CastModes.RangeCheck">
            <summary>Bit 2 (Value: 4) Determines the behavior of a variable when the value range is violated. 
            A value range violation occurs if a number value cannot be represented in a variable. 
            Example: The value 130 cannot be represented in a variable of type i8 (value range: -128 to 127), 
            but rather in a variable of type u8 (value range: 0 to 255). If link objects and process objects use variable types of different value ranges, then a value range violation can occur in read or write direction (i.e. variable type in the link object i32 and in the process object i16, or variable type in the connection object i8 and in the process object u8). 
            Value range monitoring is not active (bit=0):
            Group type behavior during data conversion:
            Group type Integer to a variable type Integer with a smaller value range: The number is truncated binary. 
            Group type Float to a variable type with a smaller value range: In the number is not representable in the value range, then the result is undefined. 
            Group type String to a variable type Float or Integer: If the number is not representable in the value range, then the result is undefined. 
            Group type Float or Integer to variable type String: If the converted String is longer than the length of the string variable (parameter "VL"), then the string is truncated. 
            Value range monitoring is active (bit=1):
            The behavior during active value range monitoring is the same as the behavior of limit monitoring (see "Scaling and Limiting").
            Behavior when a violation of the value range occurs depends on the transfer direction:
            Writing variable data (PviWrite): Write tasks are halted when an error occurs. Data is not written to the PLC variable. Error code 12014 is returned in the write response. Additionally, the maximum representable value is returned with the write response and is sent to the application in the event data buffer (if specified) for function "PviWrite" or "PviWriteResultResponse". 
            Reading variable data (PviRead or data change event): The maximum representable value is sent instead of the variable data. An error message is not given. 
            In both cases, the respective status flags for Cast-overflow or Cast-underflow are set in the response info data (structure T_RESPONSE_INFO). Additional information concerning the response info data can be found in the "PviGetResponseInfo" function or the CB function SET_PVICALLBACK_DATA.
            Monitoring of limits is also carried out for String variable types ("VT=string"). A limit violation occurs when the string data is longer then the buffer size of the variables. Example: A string "abcdefg"+ terminating null cannot be put completely into a variable with the data format "VT=string VL=4".
            The status flag Cast-Overflow is set when a violation of the string limit or a violation in the positive value range of a numeric variable occurs. Cast-Underflow can only occur in connection with numeric variables with a negative value range (signed Integer, Float). A violation of the negative value range is signaled in this case. In non-interpretable characters are contained in a string which is to be converted to another variable type, this is handled like a string limit violation.</summary>
        </member>
        <member name="F:BR.AN.PviServices.CastModes.FloatConversion">
            <summary>Bit 3 (Value: 8) Determines the type of conversion of variable type Float ("VT=f32 ...") to variable type Integer ("VT=i8, VT=u32 ..."). 
            Rounding mode is not active (bit=0):
            All places behind the decimal point of a Float are truncated. Example:  1.3 -> 1,  -15.5 -> -15,  0.9999 -> 0.
            Rounding mode is active (bit = 1):
            All places behind the decimal point of a Float are rounded (4/5). Example:  1.3 -> 1,  -15.5 -> -16,  0.9999 -> 1.
            Default / standard conversion = 0.</summary>
        </member>
        <member name="F:BR.AN.PviServices.CastModes.StringTermination">
            <summary>Always terminating string variables with a binary 0 (zero):
            A string variable with a data format of "VT=string VL=4" can contain a maximum of 4 characters. 
            If string data "abcd" is assigned, then there is no more room for zero-termination. 
            If "zero-termination" mode is enabled, then the string variable will always be terminated with a binary 0 during type conversion. 
            In the example above, the string variable would contain "abc" and a binary 0 would hold the fourth position.</summary>
        </member>
        <member name="T:BR.AN.PviServices.CollectionType">
            <summary>Type of the collection.</summary>
        </member>
        <member name="T:BR.AN.PviServices.ConfigurationFlags">
            <summary>
            For loading and saving configurations its sometimes useful to define which data should be
            stored or loaded. For that reason, there are different flags which allow storing or loading
            additional configuration data.
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.None">
            <summary>No Flag</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.Values">
            <summary>Saving values</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.ConnectionState">
            <summary>Saving IsConnected-state</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.ActiveState">
            <summary>Saving IsActive-state</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.RefreshTime">
            <summary>Saving RefreshTime</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.VariableMembers">
            <summary>Saving member-Variable-objects</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.IOAttributes">
            <summary>Saving AttributeFlags(IO,Const)</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.Scope">
            <summary>Saving Scope(global, local)</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConfigurationFlags.All">
            <summary> Save all </summary>
        </member>
        <member name="T:BR.AN.PviServices.ConnectionType">
            <summary>Defines the ConnectionType of a PviServices object</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionType.None">
            <summary>No connection will be made</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionType.Create">
            <summary>Create a connection to the plc</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionType.Link">
            <summary>Create a connection to an existent Object on the plc</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionType.CreateAndLink">
            <summary>Create and link a connection to the plc</summary>
        </member>
        <member name="T:BR.AN.PviServices.ConnectionStates">
            <summary>These are the connection states a object can have.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.Unininitialized">
            <summary>The object is not connected, this is the initial state!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.Connecting">
            <summary>The object is about to be connected.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.ConnectedError">
            <summary>The object has been connected but is in error state.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.Connected">
            <summary>The object has been successfully connected.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.Disconnecting">
            <summary>The object is about to be disconnected.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.Disconnected">
            <summary>The object has been successfully disconnected.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.LinkBroken">
            <summary>The objects has lost its connection to PVI. This can happen if the connection to a remote PVI has been interrupted.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConnectionStates.ConnectionChanging">
            <summary>The connection is changing.</summary>
        </member>
        <member name="T:BR.AN.PviServices.CurrentCpuMode">
            <summary>
            Cpu modes
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.CurrentCpuMode.Offline">
            <summary>The CPU is Offline</summary>
        </member>
        <member name="F:BR.AN.PviServices.CurrentCpuMode.Boot">
            <summary>booting</summary>
        </member>
        <member name="F:BR.AN.PviServices.CurrentCpuMode.Diagnose">
            <summary>Diagnose</summary>
        </member>
        <member name="F:BR.AN.PviServices.CurrentCpuMode.Service">
            <summary>Service  (1 ... APIFC_CP_SERVICE)</summary>
        </member>
        <member name="F:BR.AN.PviServices.CurrentCpuMode.Run">
            <summary>Run  (0 ... APIFC_CP_RUN)</summary>
        </member>
        <member name="F:BR.AN.PviServices.CurrentCpuMode.Stop">
            <summary>Stop  (2 ... APIFC_CP_STOP)</summary>
        </member>
        <member name="F:BR.AN.PviServices.CurrentCpuMode.Undefined">
            <summary>???</summary>
        </member>
        <member name="T:BR.AN.PviServices.CpuState">
            <summary>
            Cpu states
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.CpuState.Run">
            <summary>Run  (0 ... APIFC_CP_RUN)</summary>
        </member>
        <member name="F:BR.AN.PviServices.CpuState.Service">
            <summary>Service  (1 ... APIFC_CP_SERVICE)</summary>
        </member>
        <member name="F:BR.AN.PviServices.CpuState.Stop">
            <summary>Stop  (2 ... APIFC_CP_STOP)</summary>
        </member>
        <member name="F:BR.AN.PviServices.CpuState.Undefined">
            <summary>NOT set</summary>
        </member>
        <member name="F:BR.AN.PviServices.CpuState.Offline">
            <summary>special PviServices internal mode.</summary>
        </member>
        <member name="T:BR.AN.PviServices.DeviceType">
            <summary>The communication device being used is determined with the DeviceType enumerator. 
            The following communication devices can be defined: Serial, TcpIp, Can and Shared.</summary>
            <remarks>Default is INA2000! e.g. use N2000_Serial for NET2000 line.</remarks>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.Serial">
            <summary>INA2000 Serial device</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.TcpIp">
            <summary>INA2000 TcpIp device</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.Can">
            <summary>INA2000 Can device</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.Shared">
            <summary>INA2000 Shared device (LS251) Will no longer be supported starting with PVI Version 3.00.02!!</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.Modem">
            <summary>INA2000 Modem device</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.AR000">
            <summary>INA2000 ARsim / SPWIN device</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.ARSIM">
            <summary>INA2000 ARsim / SPWIN device</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.ANSLTcp">
            <summary>Tcp communication using ANSL</summary>
        </member>
        <member name="F:BR.AN.PviServices.DeviceType.TcpIpMODBUS">
            <summary>MODBUS TcpIp device</summary>
        </member>
        <member name="T:BR.AN.PviServices.DomainState">
            <summary>
            Domain states
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.DomainState.NonExistent">
            <summary>NonExistent</summary>		
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Existent">
            <summary>Existent</summary>				
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Loading">
            <summary>Loading</summary>		
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Incomplete">
            <summary>Incomplete</summary>		
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Complete">
            <summary>Complete</summary>		
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Ready">
            <summary>Ready</summary>				
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Use">
            <summary>Use</summary>				
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Valid">
            <summary>Module is valid (used only in diagnostics mode)</summary>				
        </member>
        <member name="F:BR.AN.PviServices.DomainState.Invalid">
            <summary>Module is invalid (used only in diagnostics mode)</summary>				
        </member>
        <member name="T:BR.AN.PviServices.ErrorMode">
            <summary>Fehlerbehandlungsmöglichkeiten.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ErrorMode.None">
            <summary>No Errorhandling</summary>
        </member>
        <member name="F:BR.AN.PviServices.ErrorMode.Exception">
            <summary>Errorhandling by Exceptions</summary>
        </member>
        <member name="F:BR.AN.PviServices.ErrorMode.Event">
            <summary>Errorhandling by Events</summary>
        </member>
        <member name="T:BR.AN.PviServices.EventMessageType">
            <summary>Typ of PVI communication method.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventMessageType.CallBack">
            <summary>Callback functions are used. This option is not valid for the COMPACT FRAMEWORK!</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventMessageType.WindowMessage">
            <summary>Windows messages are used.</summary>
        </member>
        <member name="T:BR.AN.PviServices.EventTypes">
            <summary>The enumeration of the supported PVI event types.
            Some event types are generated by PVI Manager, others are generated by the line. 
            Therefore, event types which can be used depends on the PVI line being used.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.Error">
            <summary>Signals a change in the error state or error code of a process object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.Disconnect">
            <summary>Signals a change in the connection description of a process object. The event data contains the connection description in the format of the POBJ_ACC_CONNECT access type.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.Connection">
            <summary>Signals a change in the connection description of a process object. The event data contains the connection description in the format of the POBJ_ACC_CONNECT access type.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.Data">
            <summary>Signals a change in a variable object's process data or an end to a process object's error state.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.Status">
            <summary>Signals a status change in the process object. The event data contains the status in the format of the POBJ_ACC_STATUS access type. This event is generated by the line being used, not PVI Manager. Which line this status event supports can be found in the respective line description.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.Dataform">
            <summary>Signals a change in a variable object's data format.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.Proceeding">
            <summary>This event informs a PVICOM application about the progress of active requests. The POBJ_EVENT_PROCEEDING event is only sent to the application which made the request. This progress information is sent as a PROCEEDING_INFO structure. This event is generated by the line being used, not PVI Manager. Which line this progress event supports can be found in the respective line description. </summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.UserTag">
            <summary>Signals a change in the user tag. The event data contains the user tag in string format (see also access type POBJ_ACC_USERTAG).</summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.EVENT_LINEBASE">
            <summary>Values bigger 255 signals special line events. These events are generated by the line being used, not PVI Manager. Which PVI line these line events supports can be found in the respective line description. </summary>
        </member>
        <member name="F:BR.AN.PviServices.EventTypes.ModuleChanged">
            <summary>Module list has changed. </summary>
        </member>
        <member name="T:BR.AN.PviServices.InstallMode">
            <summary>
            Install modes
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.InstallMode.Overload">
            <summary>Reinitializes variables, execute Init Subroutine</summary>
        </member>
        <member name="F:BR.AN.PviServices.InstallMode.OneCycle">
            <summary>Prereserves local variable values, no Init Subroutine</summary>
        </member>
        <member name="F:BR.AN.PviServices.InstallMode.Copy">
            <summary>Task update within the cycle, no interface changes allowed, no variable datatype
            and scope changes allowed, no Init Subroutine</summary>
        </member>
        <member name="T:BR.AN.PviServices.ConversionModes">
            <summary>Enumeration of the supported conversion methods of BR modules.</summary>
            <remarks>Starting with PVI Setup Version 3.00.02 ther only BR and TXT will be supported!!!</remarks>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.BR">
            <summary>No conversion is neccessary! The module is already a BR module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.TXT">
            <summary>Simple text.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.NC_UPLOAD">
            <summary>This option is only valid for the Upload. This option is valid for conversion types CNC, ZPO, TDT, RPT, CAM and CAP.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.CNC">
            <summary>CNC program. For Module Uploads use ConversionModes.NC_UPLOAD!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.ZPO">
            <summary>Zero offset table. For Module Uploads use ConversionModes.NC_UPLOAD!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.TDT">
            <summary>Tool data table. For Module Uploads use ConversionModes.NC_UPLOAD!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.RPT">
            <summary>R parameter table. For Module Uploads use ConversionModes.NC_UPLOAD!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.CAM">
            <summary>Cam profile, definition using slave positions. For Module Uploads use ConversionModes.NC_UPLOAD!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ConversionModes.CAP">
            <summary>Cam profile, definition using polynomials. For Module Uploads use ConversionModes.NC_UPLOAD!</summary>
        </member>
        <member name="T:BR.AN.PviServices.CommentLanguages">
            <summary>Enumeration of the supported comment languages for the BR module conversion.</summary>
        </member>
        <member name="F:BR.AN.PviServices.CommentLanguages.DEFAULT">
            <summary>The default setting will be used or none.</summary>
        </member>
        <member name="F:BR.AN.PviServices.CommentLanguages.GER">
            <summary>The German comment text will be loaded..</summary>
        </member>
        <member name="F:BR.AN.PviServices.CommentLanguages.ENG">
            <summary>The English comment text will be loaded.</summary>
        </member>
        <member name="T:BR.AN.PviServices.InternAction">
            <summary>Actions for internal communication synchronization only.</summary>
        </member>
        <member name="F:BR.AN.PviServices.InternAction.ChangeConnection">
            <summary>This action is used for all objects to change an existing connection.</summary>
        </member>
        <member name="T:BR.AN.PviServices.IOVariableTypes">
            <summary>Implements an enumeration of IOVaribale types.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IOVariableTypes.PHYSICAL">
            <summary>producer variable (read only)</summary>
        </member>
        <member name="F:BR.AN.PviServices.IOVariableTypes.VALUE">
            <summary>consumer variable (read only)</summary>
        </member>
        <member name="F:BR.AN.PviServices.IOVariableTypes.FORCE">
            <summary>The force variable</summary>
        </member>
        <member name="T:BR.AN.PviServices.LogicalObjectsUsage">
            <summary>Defines the usage type of the LogicalCollection</summary>
        </member>
        <member name="F:BR.AN.PviServices.LogicalObjectsUsage.None">
            <summary>No usage of LogicalCollection</summary>
        </member>
        <member name="F:BR.AN.PviServices.LogicalObjectsUsage.FullName">
            <summary>FullName is used as key for adding to the LogicalCollection</summary>
        </member>
        <member name="F:BR.AN.PviServices.LogicalObjectsUsage.ObjectName">
            <summary>ObjectName is used as key for adding to the LogicalCollection</summary>
        </member>
        <member name="F:BR.AN.PviServices.LogicalObjectsUsage.ObjectNameWithType">
            <summary>ObjectName and type info is used ===> "@Pvi/LNINA2 OT=Line/...."</summary>
        </member>
        <member name="T:BR.AN.PviServices.MemoryType">
            <summary>
            Memory types
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.SystemRom">
            <summary>SystemRom (Do not use this enumerator member for download)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.SystemRam">
            <summary>SystemRam (Do not use this enumerator member for download)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.UserRom">
            <summary>UserRom</summary>		
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.UserRam">
            <summary>UserRam</summary>		
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.MemCard">
            <summary>MemCard not used in AR-SG4</summary>		
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.FixRam">
            <summary>FixRam not used in AR-SG4</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.Dram">
            <summary>Dram</summary>		
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.Permanent">
            <summary>AR-SG4: system- internal permanenter memory</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.SysInternal">
            <summary>AR-SG4: simulated BR- module (BrmSim)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.Remanent">
            <summary>remanent PVs</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.SystemSettings">
            <summary>non volatile system settings</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.TransferModule">
            <summary>AR-SG4: target memory for transfer modul</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.Os">
            <summary>Os (Logical memory area)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.Tmp">
            <summary>Tmp (Logical memory area)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.Io">
            <summary>Io (Logical memory area)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.GlobalAnalog">
            <summary>Global analog (Logical memory area)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.GlobalDigital">
            <summary>Global digital (Logical memory area)</summary>
        </member>
        <member name="F:BR.AN.PviServices.MemoryType.NOTValid">
            <summary>NOT valid</summary>
        </member>
        <member name="T:BR.AN.PviServices.MethodType">
            <summary>{secret}</summary>
        </member>
        <member name="T:BR.AN.PviServices.ModuleType">
            <summary>
            Module types
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Update">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Contents">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Contents2">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.MemoryExtension">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.BootModule">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.PlcTask">
            <summary>Application module ( cyclic task or library modules)</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.SystemTask">
            <summary>System task</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.UserTask">
            <summary>User task</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.TimerTask">
            <summary>Timer task</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.InterruptTask">
            <summary>Interrupt task</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.ExceptionTask">
            <summary>Exception task</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Startup">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.AvtLib">
            <summary>Library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.SysLib">
            <summary>System library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.HwLib">
            <summary>System library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.ComLib">
            <summary>System library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.MathLib">
            <summary>System library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Lib">
            <summary>System library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.InstLib">
            <summary>System library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.AddLib">
            <summary>System library module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Io">
            <summary>internal</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.IoMap">
            <summary>Io mapping module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.DataModule">
            <summary>Data module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Table">
            <summary>internal</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.AsFwHw">
            <summary>AS firmware or hardware module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.AsSafetyModule">
            <summary>AS SAFETY module.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.NcDriver">
            <summary>Motion data module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.ACP10">
            <summary>Motion data module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.ProfilerE">
            <summary>Profiler prfmod$e module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.ProfilerData">
            <summary>Profiler data</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.TracerDefinition">
            <summary>Motion data module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.TracerData">
            <summary>Motion data module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.NcUpdate">
            <summary>Motion data module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.History">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Error">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Logger">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Noc">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Merker">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.TkLoc">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.PlcConfig">
            <summary>Config module (sysconf)</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.ComConfig">
            <summary>Network communication module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.PpConfig">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.IOConfig">
            <summary>IO configuration module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.OpcConfig">
            <summary>OPC configuration module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.OpcUaConfig">
            <summary>OPC UA configuration module</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Config">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Exception">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Interrupt">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Device">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Exe">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Probe">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.ProbeIo">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.OsExe">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Data">
            <summary>For internal use only</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleType.Unknown">
            <summary>Unknown module</summary>
        </member>
        <member name="T:BR.AN.PviServices.ModuleListOptions">
            <summary>
            Otions for uploading the module list
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleListOptions.INA2000CompatibleMode">
            <summary>Depending on the CPU state lists the module list (RUN) or the diagnostic module list (DIAGNOSE).</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleListOptions.INA2000List">
            <summary>Lists module using the INA2000 MODList function. The result depends on the state of the CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleListOptions.INA2000DiagnosisList">
            <summary>Lists module using the INA2000 DIAGList function. The result depends on the state of the CPU.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ModuleListOptions.All">
            <summary>Lists all modules on the PLC for ANSL connections. For INA2000 connections wil result in INA2000CompatibleMode result list.</summary>
        </member>
        <member name="T:BR.AN.PviServices.ObjectType">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Parity">
            <summary>Parity settings.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Parity.None">
            <summary>No parity</summary>
        </member>
        <member name="F:BR.AN.PviServices.Parity.Odd">
            <summary>Odd parity</summary>
        </member>
        <member name="F:BR.AN.PviServices.Parity.Even">
            <summary>Even parity</summary>
        </member>
        <member name="F:BR.AN.PviServices.Parity.Mark">
            <summary>Mark parity</summary>
        </member>
        <member name="F:BR.AN.PviServices.Parity.Space">
            <summary>Space parity</summary>
        </member>
        <member name="T:BR.AN.PviServices.PlcObjectType">
            <summary>Type of the PLC object.</summary>
        </member>
        <member name="T:BR.AN.PviServices.ProgramState">
            <summary>
            Program states
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.NonExistent">
            <summary>NonExistent</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Unrunnable">
            <summary>Unrunnable</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Idle">
            <summary>Idle</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Running">
            <summary>Running</summary>		
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Stopped">
            <summary>Stopped</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Starting">
            <summary>Starting</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Stopping">
            <summary>Stopping</summary>		
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Resuming">
            <summary>Resuming</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgramState.Resetting">
            <summary>Resetting</summary>		
        </member>
        <member name="T:BR.AN.PviServices.Scope">
            <summary>Defines the scope of a variable object</summary>
        </member>
        <member name="F:BR.AN.PviServices.Scope.UNDEFINED">
            <summary>NOT set up to now</summary>
        </member>
        <member name="F:BR.AN.PviServices.Scope.Global">
            <summary>Global</summary>
        </member>
        <member name="F:BR.AN.PviServices.Scope.Local">
            <summary>Local</summary>
        </member>
        <member name="F:BR.AN.PviServices.Scope.Dynamic">
            <summary>Dynamic (can only be local)!!!</summary>
        </member>
        <member name="T:BR.AN.PviServices.TaskClassType">
            <summary>
            TaskClass types
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.NotValid">
            <summary>Not valid</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic1">
            <summary>Taskclass 1</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic2">
            <summary>Taskclass 2</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic3">
            <summary>Taskclass 3</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic4">
            <summary>Taskclass 4</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic5">
            <summary>Taskclass 5</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic6">
            <summary>Taskclass 6</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic7">
            <summary>Taskclass 7</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Cyclic8">
            <summary>Taskclass 8</summary>						
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Timer1">
            <summary>Timer taskclass 1</summary>				
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Timer2">
            <summary>Timer taskclass 2</summary>						
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Timer3">
            <summary>Timer taskclass 3</summary>						
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Timer4">
            <summary>Timer taskclass 4</summary>						
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Interrupt">
            <summary>Interrupt</summary>						
        </member>
        <member name="F:BR.AN.PviServices.TaskClassType.Exception">
            <summary>Exception taskclass</summary>
        </member>
        <member name="T:BR.AN.PviServices.ErrorLogBook">
            <summary>Implementation of the old Ar loggbook reader.
             This instance has to be used for AR versions previous to A2.85.</summary>
        </member>
        <member name="T:BR.AN.PviServices.Logger">
            <summary>Implements properties and methods to access the B+R logger entries on the PLC.</summary>
            <remarks>There are two kinds of loggers. One for SG3 targes up to OS version 285 and SG4 targets.</remarks>
        </member>
        <member name="T:BR.AN.PviServices.Module">
            <summary>
            This class represets a BR Module on the plc.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.isTaskObject(BR.AN.PviServices.ModuleType)">
            <summary>
            Gets wheter it is a task object or not
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.isLoggerObject(BR.AN.PviServices.ModuleType)">
            <summary>
            Gets wheter it is a task object or not
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Module.propModuleInfoRequested">
            <summary>Indicates wheter the module info request has been set up or not.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.#ctor(BR.AN.PviServices.Cpu,System.String,System.Boolean)">
            <summary>Initializes a new instance of the Module class.</summary>
            <param name="cpu">The parent cpu object.</param>
            <param name="name">The name of the logger module.</param>
            <param name="doNotAddToCollections">The name of the logger module.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>
            Initializes a new instance of the Module class
            </summary>
            <param name="cpu">Existing Cpu-object</param>
            <param name="name">object name</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.#ctor(BR.AN.PviServices.Cpu,System.String,System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Initializes a new instance of the Module class with parameter values from XmlTextReader</summary>
            <param name="cpu">Existing Cpu-object</param>
            <param name="name">object name</param>
            <param name="reader">The reference of the XML reader.</param>
            <param name="flags">Flags for the configuration load options.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.#ctor(BR.AN.PviServices.Cpu,System.String,BR.AN.PviServices.ModuleCollection)">
            <summary>
            Initializes a new instance of the Module class
            </summary>
            <param name="cpu">Existing Cpu-object</param>
            <param name="name">object name</param>
            <param name="collection">collection object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.#ctor(System.Object,System.String)">
            <summary>
            Fuer Logger Ableitung -> service als Parent
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
        </member>
        <member name="M:BR.AN.PviServices.Module.#ctor(BR.AN.PviServices.Cpu,BR.AN.PviServices.PviObjectBrowser,System.String)">
            <summary>
            Initializes a new instance of the Module class
            </summary>
            <param name="cpu">Existing Cpu-object</param>
            <param name="name">object name</param>
            <param name="objBrowser">PVI Object Browser to attach PVI objects.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Init(BR.AN.PviServices.Cpu,System.String)">
            <summary>
            {secret}
            </summary>
            <param name="cpu"></param>
            <param name="name"></param>
        </member>
        <member name="M:BR.AN.PviServices.Module.updateProperties(System.Object)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.updateProperties(System.Object,System.Boolean)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.updateProperties(BR.AN.PviServices.APIFC_ModulInfoRes)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.updateProperties(BR.AN.PviServices.ModuleInfoDecription,System.Boolean)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.updateProperties(BR.AN.PviServices.APIFC_DiagModulInfoRes)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.IsLeap(System.UInt32)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.UInt32ToDateTime(System.UInt32)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.TicksToInt32(System.Int64)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.TicksToUInt32(System.Int64)">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Connect">
            <summary>
            Creates a connection of this instance to the addressed module on the plc
            </summary>
            <remarks>
            The "Connected" event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. module does not exist)
            It is also possible to connect the Module-object, when its parent (Cpu-object) was not already
            connected. In that case the Module-object store this "connect"-action, to connect the
            Module-object automatically when the Cpu-Connected-Event received.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Module.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>
            Creates a connection of this instance to its processvariable.
            </summary>
            <param name="connectionType">Defines the ConnectionType of this Variable object</param>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the variable object, when its parent (cpu object) was not already
            connected. In that case the variable object store this "connect" action, to connect the
            variable object automatically when the cpu connectedevent received.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Module.getLinkDescription">
            <summary>Helper to get the link description for the object.</summary>
            <returns>The link description for the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.Connect(System.Boolean,BR.AN.PviServices.ConnectionType,System.UInt32)">
            <param name="forceConnection">The flag indicates wheter WaitForParentConnection should be ignored or not.</param>
            <param name="connectionType">The type of connection.</param>
            <param name="action">The action.</param>
            <returns>0 if successful else an error number.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.Disconnect">
            <summary>
            Disconnects this instance of the Module from the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Disconnect(System.Boolean)">
            <summary>
            Disconnects this instance of the Module from the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.DisconnectRet(System.UInt32)">
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.Disconnect(System.UInt32,System.Boolean)">
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.ModuleInfoRequest">
            <summary>
            {secret}
            </summary>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.ReadModuleInfo">
            <summary>
            {secret}
            </summary>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.Resume">
            <summary>
            Start the Module on the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Start(System.Int32)">
            <summary>
            Starts the Task on the plc
            </summary>
            <param name="numberOfCycles">The number of cycles the task shall run. Zero runs the task for ever!</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Start">
            <summary>
            Start the Module on the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Stop">
            <summary>
            Stop the Module on the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Delete">
            <summary>
            Delete the Module on the plc
            </summary>
            <remarks>
            To delete a module from the plc it is necessary to be connected to it.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Module.Delete(System.Boolean)">
            <summary>
            Delete the Module on the plc using the option to do this over the parent CPU object
            </summary>
            <remarks>
            To delete a module from the plc it is necessary to be connected to it.
            Deleting the module by CPU is only supported by PVI Manager Version 3.50 (PviMan.exe file version) or higher, and by INA2000 Version 3.44 (LnIna2.dll file version).
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Module.Upload(System.String)">
            <summary>
            Upload the Module from the plc
            </summary>
            <param name="fName">An absolute path for the BR module.</param>
            <example>
            <code>
            // Creating new module object
            Module mod = new Module(cpuObj,"sysconf");
            mod.Connect();
            mod.Connected +=PviEventHandler(Module_Connected);
            ...
            ...
            private void Module_Connected(object sender, PviEventArgs e)
            {
            	Module tmpMod = (Module)sender;
            	tmpMod.Upload("c:\\sysconf.br");
            	// Adding eventhandler for upload progress
            	tmpMod.UploadProgress+=new ModuleEventHandler(mod_UploadProgress);
            }
            ...
            ...
            private void mod_DownloadProgress(object sender, ModuleEventArgs e)
            {
            	// Setting value property of a progressbar
            	this.pgModuleUpload.Value = e.Percentage;
            	if ( e.Percentage % 5 == 0 )
            		this.lbPercent.Text = e.Percentage.ToString() + "%";
            }
             
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.Module.Upload(System.String,BR.AN.PviServices.ConversionModes)">
            <summary>Upload the module to the specified file. Make a conversion if neccessary.</summary>
            <param name="fName">The name of the file.</param>
            <param name="uploadConversion">The conversion mode.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Upload(System.String,BR.AN.PviServices.ConversionModes,BR.AN.PviServices.CommentLanguages)">
            <summary>Upload the module to the specified file. Make a conversion if neccessary.</summary>
            <param name="fName">The name of the file.</param>
            <param name="uploadConversion">The conversion mode.</param>
            <param name="commentLanguage">The language for the comment. Is valid for ConversionModes.NC_UPLOAD.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode,System.String)">
            <summary>
            Downloads the module file to the plc.
            The Address property of the Module and the name of the file (without extension) must be the same.
            For using a logical name for the Module, it is necessary to set the Address property (Sample2)
            </summary>
            <param name="memoryType">Destination MemoryType</param>
            <param name="installMode">Type of InstallMode</param>
            <param name="fileName">An absolute path for the BR module to transfer</param>
            <example>
            <code>
            Sample1: Name and Address are the same
            // Create new module object
            Module module = new Module(cpuObj,"ab_task");
            module.Download(MemoryType.UserRom,InstallMode.Overload,"C:\\ab_task.br");
            // Adding an eventhandler for download progress
            module.DownloadProgress += new ModuleEventHandler(mod_DownloadProgress);
            ...
            ...
            private void mod_DownloadProgress(object sender, ModuleEventArgs e)
            {
            	// Setting value property of a progressbar
            	this.pgModuleUpload.Value = e.Percentage;
            	if ( e.Percentage % 5 == 0 )
            		this.lbPercent.Text = e.Percentage.ToString() + "%";
            }
            
            Sample2: Using a logical name
            
            // Create new module object
            Module module = new Module(cpuObj,"LogicalName_for_ab_task");
            module.Address = "ab_task"
            module.Download(MemoryType.UserRom,InstallMode.Overload,"C:\\ab_task.br");
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download">
            <summary>Downloads the module file to the plc using the FileName property and transfering it to UserRam in Overload mode. </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType)">
            <summary>Downloads the module file to the plc using the FileName property in Overload mode</summary>
            <param name="memoryType">The location where the module should be installed.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode)">
            <summary>
            /// Downloads the module file to the plc using the FileName property.
            </summary>
            <param name="memoryType">The location where the module should be installed.</param>
            <param name="installMode">The mode of installation.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode,System.String,System.String,System.String)">
            <summary>Download a text file to the PLC.</summary>
            <remarks>This implementation can only be used for TEXT files!</remarks>
            <param name="memoryType">The location where the module should be installed.</param>
            <param name="installMode">The mode of installation.</param>
            <param name="srcFileName">The name of the source file.</param>
            <param name="moduleVersion">The optional module version. Use an empty string or null if you want to set the default value.</param>
            <param name="moduleName">The optional module name. Use an empty string or null if you want to set the default value.(This the Name property of the object if the Address property is not set)</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode,System.String,BR.AN.PviServices.ConversionModes,System.String)">
            <summary>Download CNC modules by using the conversion DLLs implemented in PVI.</summary>
            <param name="memoryType">The location where the module should be installed.</param>
            <param name="installMode">The mode of installation.</param>
            <param name="srcFileName">The name of the source file.</param>
            <param name="conversionMode">The conversion mode will help the translation DLL to perform the correct conversion from the source file.</param>
            <param name="moduleName">The optional module name. Use an empty string or null if you want to set the default value.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode,System.String,BR.AN.PviServices.ConversionModes,System.String,System.String)">
            <summary>Default procedure for downlading modules.</summary>
            <param name="memoryType">The location where the module should be installed.</param>
            <param name="installMode">The mode of installation.</param>
            <param name="srcFileName">The name of the source file.</param>
            <param name="conversionMode">The conversion mode will help the translation DLL to perform the correct conversion from the source file.</param>
            <param name="moduleVersion">The optional module version. Use an empty string or null if you want to set the default value.</param>
            <param name="moduleName">The optional module name. Use an empty string or null if you want to set the default value. (This the Name property of the object if the Address property is not set)</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode,BR.AN.PviServices.ConversionModes,System.String,System.String,System.IO.Stream)">
            <summary>Default procedure for downlading modules.</summary>
            <param name="memoryType">The location where the module should be installed.</param>
            <param name="installMode">The mode of installation.</param>
            <param name="conversionMode">The conversion mode will help the translation DLL to perform the correct conversion from the source file.</param>
            <param name="moduleVersion">The optional module version. Use an empty string or null if you want to set the default value.</param>
            <param name="moduleName">The optional module name. Use an empty string or null if you want to set the default value. (This the Name property of the object if the Address property is not set)</param>
            <param name="streamData">The Stream containing the data to be transfered.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode,BR.AN.PviServices.ConversionModes,System.String,System.String,System.Byte[])">
            <summary>Default procedure for downlading modules including all parameters.</summary>
            <param name="memoryType">The location where the module should be installed.</param>
            <param name="installMode">The mode of installation.</param>
            <param name="conversionMode">The conversion mode will help the translation DLL to perform the correct conversion from the source file.</param>
            <param name="moduleVersion">The optional module version. Use an empty string or null if you want to set the default value.</param>
            <param name="moduleName">The optional module name. Use an empty string or null if you want to set the default value. (This the Name property of the object if the Address property is not set)</param>
            <param name="moduleData">The data to be transfered.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Cancel">
            <summary>Call this method to abort actions.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnPviUnLinked(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="errorCode">The error code if unlinking the object failed.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.CheckModuleInfo(System.Int32)">
            <summary>
            Calls OnConnected, if ModuleInfo flag is set
            </summary>
            <param name="errorCode">ErrorCode from CB</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.RemoveReferences">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.RemoveObject">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
            <summary>Helper to </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Remove">
            <summary>
            This method removes the instances references from the PviServices hierarchy.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.RemoveFromBaseCollections">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.Fire_OnConnect">
            <summary>Helper for modules to fire connected event.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnConnected is called when a Module was connected to the plc. The function raises the Connected event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnDisconnected is called when a Module was disconnected to the plc. The function raises the Disconnected event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnRunCycleCountSet(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnStarted is called when a Module was started on the plc. The function raises the Started event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnStarted(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnStarted is called when a Module was started on the plc. The function raises the Started event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnStopped(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnStopped is called when a Module was stopped on the plc. The function raises the Stopped event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnDeleted(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnDeleted is called when a Module was deleted on the plc. The function raises the Deleted event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnUploaded(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnUploaded is called when a Module was uploaded from the plc. The function raises the Uploaded event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnDownloaded(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnDownloaded is called when a Module was downloaded to the plc. The function raises the Downloadad event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnUploadProgress(BR.AN.PviServices.ModuleEventArgs)">
            <summary>
            The function raises the UploadProgress event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnDownloadProgress(BR.AN.PviServices.ModuleEventArgs)">
            <summary>
            The function raises the DownloadProgress event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when an error occured.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnCancelled(BR.AN.PviServices.PviEventArgs)">
            <summary>
            Occurs when a download or upload process is cancelled
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>
            Reads device configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Module.SaveModuleConfiguration(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the configuration parameters to the configuration xml file.</summary>
            <param name="writer">The XML Writer used to save settings.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="F:BR.AN.PviServices.Module.propPIState">
            <summary>The program running state</summary>
        </member>
        <member name="M:BR.AN.PviServices.Module.OnProceeding(System.IntPtr,System.Int32,System.Int32)">
            <summary>Called when proceeding events are fired</summary>
            <param name="ptrData">The proceeding info data.</param>
            <param name="dataLen">Length of the proceeding info data</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Module.ANSLModuleDescriptionRead(System.IntPtr,System.UInt32,System.Int32)">
            <summary>
            Reads the Module description
            </summary>
            <param name="pData">The buffer t read from.</param>
            <param name="dataLen">The length of the buffer</param>
            <param name="errorCode">The error number</param>
        </member>
        <member name="P:BR.AN.PviServices.Module.DomainIndex">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.PiIndex">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.DomainState">
            <summary>
            Gets the DomainState of this instance
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.ProgramState">
            <summary>
            Gets the program state information such as Running, Resuming etc.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.PiCount">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.StartAddress">
            <summary>
            Gets the start address of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.Length">
            <summary>
            Gets the length of the Module in Bytes
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.Version">
            <summary>
            Gets the Version of the Module as Int16
            </summary>
            <example>
            The Version "V1.22.3" will be returned as 1223
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Module.VersionText">
            <summary>
            Gets the Version of the Module as String
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.CreationTime">
            <summary>
            Gets the creation time of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.LastWriteTime">
            <summary>
            Gets the last write time of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.CreationName">
            <summary>
            Gets the creation name of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.LastWriteName">
            <summary>
            Gets the last write time of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.TaskClassType">
            <summary>
            Gets the task class type of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.InstallNumber">
            <summary>
            Gets the install number of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.InstallationPriority">
            <summary>
            Gets the install priority of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.InstallationPriorityValid">
            <summary>
            Gets if the install priority of the Module is valid or not
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.VariableIndex">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.VariableCount">
            <summary>
            Gets the count of the variables (global and local) used by the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.AnalogMemoryAddress">
            <summary>
            Gets the start address of the analogous variables in memory
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.DigitalMemoryAddress">
            <summary>
            Gets the start address of the digital variables in memory
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.MemoryType">
            <summary>
            Gets the memory type of the Module e.g. UserRom, UserRam 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.ModUID">
            <summary>Gets the unique module id. This id will be generated by the service object.</summary>
            <value>ModUID</value>
        </member>
        <member name="P:BR.AN.PviServices.Module.Type">
            <summary>
            Gets the type of the Module e.g. UserTask, InterruptTask 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.Cpu">
            <summary>
            Gets the Cpu object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of the Module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.FileName">
            <summary>
            Gets the ConnectionType of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Module.ObjectBrowser">
            <summary>
            Object to browser through PVI Objects.
            If this object is not null, PVI Objects are attached to the service object.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.Stopped">
            <summary>Occurs when the Module on the plc is stopped</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.Started">
            <summary>Occurs when the Module on the plc is started</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.Deleted">
            <summary>Occurs when the Module on the plc is deleted</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.Uploaded">
            <summary>Occurs when the Module from the plc is uploaded</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.Downloaded">
            <summary>Occurs when the Module from the plc is downloaded</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.Cancelled">
            <summary>Occurs when a download or upload process is cancelled</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.UploadProgress">
            <summary>Occurs when upload is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.DownloadProgress">
            <summary>Occurs when download is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Module.RunCycleCountSet">
            <summary>Occurs when the cycle count for the run cycles for a module on the plc has changed.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Logger.KW_SYSLOGBOOK_NAME">
            <summary>The name of the system log book for SG4 targets.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Logger.KW_USRLOGBOOK_NAME">
            <summary>The name of the user log book for SG4 targets.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Logger.eIndexValid">
            <summary>Indicates wheter the error Index has been read or not.
            Connected event will only be sent after this info has been read.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.ResetIndex">
            <summary>Helper to reset the valid Index.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Logger.waitOnCancel">
            <summary>Indicates wheter to wait on a cancel request or not.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.#ctor(BR.AN.PviServices.Cpu,System.String,System.Boolean)">
            <summary>Initializes a new instance of the Logger class.</summary>
            <param name="cpu">The parent cpu object.</param>
            <param name="name">The name of the logger module.</param>
            <param name="doNotAddToCollections">The name of the logger module.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.#ctor(System.String)">
            <summary>Initializes a new instance of the Logger class.</summary>
            <param name="name">The name of the logger module.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>Initializes a new instance of the Logger class.</summary>
            <param name="cpu">The parent cpu object.</param>
            <param name="name">The name of the logger module.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.#ctor(BR.AN.PviServices.Service,System.String)">
            <summary>
            Handelt es sich um ein Service Objekt
            so wird das Logger Objekt in die zuvor generierte 
            LoggerCollection eingehaengt. Wird nur fuer das Laden
            eines Archievs verwendet.
            </summary>
            <param name="service"></param>
            <param name="name"></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.#ctor(BR.AN.PviServices.Service,System.String,System.Boolean)">
            <summary>
            Handelt es sich um ein Service Objekt
            so wird das Logger Objekt in die zuvor generierte 
            LoggerCollection eingehaengt. Wird nur fuer das Laden
            eines Archievs verwendet.
            </summary>
            <param name="service">The reference to the service object.</param>
            <param name="name">the name of the module.</param>
            <param name="isArchive">Is it an archive or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.RemoveObject">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
            <summary>Helper to </summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.ReadALL">
            <summary>Helper to read everything again</summary>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.Read">
            <summary>Read the whole logger module.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.Read(System.Int32)">
            <summary>Read a specified number of entries.</summary>
            <remarks>NO LONGER IN USE!!</remarks>
            <param name="count">number of entries to read.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.Read(System.Int32,System.Int32,BR.AN.PviServices.Action)">
            <summary>Helper to request logger data.</summary>
            <param name="count">block size</param>
            <param name="id">the start id to get the block</param>
            <param name="action">the LParam for the PVI method call.</param>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.ReadIndex(BR.AN.PviServices.Action)">
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>
            Creates a connection of this instance to its processvariable.
            </summary>
            <param name="connectionType">Defines the ConnectionType of this Variable object</param>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the variable object, when its parent (cpu object) was not already
            connected. In that case the variable object store this "connect" action, to connect the
            variable object automatically when the cpu connectedevent received.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Logger.ConnectEx">
            <summary>
            Creates a connection of this instance to its processvariable.
            </summary>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the variable object, when its parent (cpu object) was not already
            connected. In that case the variable object store this "connect" action, to connect the
            variable object automatically when the cpu connectedevent received.
            </remarks>
            <returns>0 if successful else an error number.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.CleanInit">
            <summary>Do the cleanup.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.Clear">
            <summary>Do the cleanup.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.CancelRequests">
            <summary>Helper to abort active requests.</summary>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.CleanLoggerEntries(System.Int32)">
            <summary>Helper to remove the logger entries from the collection and fire the corresponding events.</summary>
            <param name="eCode">The error code.</param>
            <returns>true if successful else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.ReadModuleInfo">
            <summary>
            {secret}
            </summary>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.ReadOutstandingData(System.Int32,System.Int32@,BR.AN.PviServices.Action)">
            <summary>Helper to update the logger IDs</summary>
            <param name="readCount">number of entries which have been read.</param>
            <param name="retVal">0 if the read requests inside the method succeeded.</param>
            <param name="action">The action parameter to be used for further read requests.</param>
            <returns>true if there is further logger data else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.FinaleReadData(System.Int32@,BR.AN.PviServices.Action)">
            <summary>Helper to read any further logger data.</summary>
            <param name="retVal">0 if the read requests inside the method succeeded.</param>
            <param name="action">The action parameter to be used for further read requests.</param>
            <returns>true if there is further logger data else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.LoggerEntriesDifffer(BR.AN.PviServices.LoggerEntry,BR.AN.PviServices.LoggerEntry)">
            <summary>Helper to check if the two entries differ</summary>
            <param name="lEntry1">The first entry</param>
            <param name="entryTo">The second entry</param>
            <returns>0 if they entries do not differ else any value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.accModuleData(System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.Action)">
            <summary>Helper for interpreting logger response data.</summary>
            <param name="errorCode">The error code.</param>
            <param name="pData">The data buffer reference.</param>
            <param name="dataLen">The length of the data buffer.</param>
            <param name="action">The action code.</param>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>This method will be called by the call back function whenever the connection of this object has been lost or has been disconnected.</summary>
            <remarks>When deriving from Logger you might want to overload this method instead of implementing your code in the event Disconnected.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.getLinkDescription">
            <summary>Helper to get the link description for the object.</summary>
            <returns>The link description for the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Logger.CheckModuleInfo(System.Int32)">
            <summary>
            Calls OnConnected, if ModuleInfo flag is set
            </summary>
            <param name="errorCode">ErrorCode from CB</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnDeleted(BR.AN.PviServices.PviEventArgs)">
            <summary>OnDeleted is called when a Module was deleted on the plc. The function raises the Deleted event</summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>Overridable method called when a connection to an object is established.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.PviEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnContinuousActivated(BR.AN.PviServices.PviEventArgs)">
            <summary>Overridable method called whenever the object is activated.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.PviEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnContinuousDeactivated(BR.AN.PviServices.PviEventArgs)">
            <summary>Overridable method called whenever the object is deactivated.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.PviEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnEntriesRead(BR.AN.PviServices.LoggerEventArgs)">
            <summary>Overridable method called whenever the entries have been read.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.LoggerEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnEntryBlockRead(BR.AN.PviServices.LoggerEventArgs)">
            <summary>Overridable method called whenever the entries have been read.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.LoggerEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnCleared(BR.AN.PviServices.PviEventArgs)">
            <summary>Overridable method called whenever the entries have been removed.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.PviEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when an error occured.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnEntryAdded(BR.AN.PviServices.LoggerEventArgs)">
            <summary>Overridable method called whenever an entriy has been add.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.LoggerEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.CallOnEntriesRemoved(BR.AN.PviServices.LoggerEventArgs)">
            <summary>Overridable method called whenever an entriy has been add.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.LoggerEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnEntriesRemoved(BR.AN.PviServices.LoggerEventArgs)">
            <summary>Overridable method called whenever an entriy has been add.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.LoggerEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnGlobalAdded(BR.AN.PviServices.LoggerEventArgs)">
            <summary>Overridable method called whenever an entry has been add.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.LoggerEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Logger.OnGlobalRemoved(BR.AN.PviServices.LoggerEventArgs)">
            <summary>Overridable method called whenever an entry has been removed.</summary>
            <param name="e">The event parameter structure<see cref="T:BR.AN.PviServices.LoggerEventArgs"/></param>
        </member>
        <member name="F:BR.AN.PviServices.Logger.propReadRequestActive">
            <summary>Gets if there are any read requests active or not.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Logger.RemoveFromBaseCollections">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Logger.LoggerEntries">
            <summary>The collection of logger entries</summary>
            <value>LoggerEntries</value>
        </member>
        <member name="P:BR.AN.PviServices.Logger.ReadRequestActive">
            <summary>Gets if there is any read reuqest active.
            Do not request data as long as a read request is active!!!</summary>
            <value>ReadRequestActive</value>
        </member>
        <member name="P:BR.AN.PviServices.Logger.IsArchive">
            <summary>Gets wheter this loggger is an archive or not.</summary>
            <value>IsArchive</value>
        </member>
        <member name="P:BR.AN.PviServices.Logger.ContinuousActive">
            <summary>Gets if the update for logger events is on.</summary>
            <value>ContinuousActive</value>
        </member>
        <member name="P:BR.AN.PviServices.Logger.GlobalMerge">
            <summary>Gets if global merge is activated or not.</summary>
            <value>GlobalMerge</value>
        </member>
        <member name="P:BR.AN.PviServices.Logger.ParentCollection">
            <summary>Gets the collection of parent objects.</summary>
            <value>ParentCollection</value>
        </member>
        <member name="P:BR.AN.PviServices.Logger.ReadBlockSize">
            <summary>Gets the size of the block to read.</summary>
            <value>ReadBlockSize</value>
        </member>
        <member name="E:BR.AN.PviServices.Logger.ContinuousActivated">
            <summary>
            Occurs when the logger instance continuous mode is activated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Logger.ContinuousDeactivated">
            <summary>
            Occurs when the logger instances continuous mode is deactivated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Logger.EntriesRead">
            <summary>
            Occurs when the logger instances continuous mode is deactivated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Logger.EntryBlockRead">
            <summary>Basic logger event.</summary>
            <seealso cref="T:BR.AN.PviServices.LoggerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Logger.Cleared">
            <summary>Basic logger event.</summary>
            <seealso cref="T:BR.AN.PviServices.PviEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Logger.EntryAdded">
            <summary>Basic logger event.</summary>
            <seealso cref="T:BR.AN.PviServices.LoggerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Logger.EntriesRemoved">
            <summary>Basic logger event called when ever entries have been removed.</summary>
            <seealso cref="T:BR.AN.PviServices.LoggerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Logger.GlobalAdded">
            <summary>Basic logger event.</summary>
            <seealso cref="T:BR.AN.PviServices.LoggerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Logger.GlobalRemoved">
            <summary>Basic logger event.</summary>
            <seealso cref="T:BR.AN.PviServices.LoggerEventHandler"/>
        </member>
        <member name="F:BR.AN.PviServices.ErrorLogBook.PT_ERROR_MASK">
            <summary>This mask will be used to get the error type!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ErrorLogBook.PT_ERROR_INFO">
            <summary>This will signal additional error info in the next entry.
            Therefore do not create a new LogEntry.
            Maximum 4 info items can follow!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ErrorLogBook.AR_V_ERROR_LOGBOOK">
            <summary>Starting with version A2.85 the AR supports Logger modules instead of the ErrorLogBook!</summary>
        </member>
        <member name="F:BR.AN.PviServices.ErrorLogBook.KW_LOGBOOK_NAME">
            <summary>The name of the system log book for AR versions previous A2.85. ($LOG285$)</summary>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.#ctor(BR.AN.PviServices.Cpu)">
            <summary>Initializes a new instance of the ErrorLogBook class.</summary>
            <param name="cpu">The referenc to the paren cpu object.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.InsertSysLogBookEntries(BR.AN.PviServices.APIFC_RLogbookRes_entry[],System.Int32,BR.AN.PviServices.LoggerEntryCollection)">
            <summary>Initializes the error entry collection</summary>
            <param name="lbEntries">APIFC_RLogbookRes_entry objects.</param>
            <param name="itemCnt">The number of sys log enzries.</param>
            <param name="eventEntries">The event entries..</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.IsNewEntry(BR.AN.PviServices.LogBookEntry,System.Int32)">
            <summary>Helper to check if the entry is allready in the list</summary>
            <param name="lbEntry">The log book entry read from the PLC.</param>
            <param name="eventEntryCnt">The number of logger entries for the current read response.</param>
            <returns>True if the entry is not in the collection else</returns>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Load(System.String)">
            <summary>Reads the binary data of a file assumes the data to be an error logbook and crestes the logger entries.</summary>
            <param name="fileName">The name of the binary data file to be read.</param>
            <returns>null if successfull els the error message.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Read(System.String)">
            <summary>Reads the binary data of the error logbook and saves it to the specified file</summary>
            <param name="fileName">The name of the file where to store the binary data.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Read">
            <summary>Call this method to upload all log book entries from the PLC</summary>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Read(System.Int32)">
            <summary>Call this method to read the specified number of elements.</summary>
            <remarks>The old style LogEntries can have mor than one line in the log book. 
            Therefore the number of returned entries my be different to the number of requested entries.</remarks>
            <param name="count">The number of entries to be read.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Read(System.Int32,System.Int32,BR.AN.PviServices.Action)">
            <summary>NOT supported by the target!</summary>
            <param name="count">The number of items. (will be ignored)</param>
            <param name="id">The id of the item which has to be read.</param>
            <param name="action">The action parameter.</param>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.ReadEntry(System.Int32)">
            <summary>NOT supported by the target!</summary>
            <param name="id">The index of the logbook entry.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.ReadIndex(BR.AN.PviServices.Action)">
            <summary>NOT supported by the target!</summary>
            <param name="action">The action parameter.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.ReadModuleInfo">
            <summary>Overrides the base method to prevent a method call which is not valid for this kind of object.</summary>
            <remarks>This method is empty!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Clear">
            <summary>Call this method to clear the logbook on the PLC. NOT supported for the LogBook!</summary>
            <remarks>This method can not be used for the old style logbook!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Connect">
            <summary>We do not need to connect this object because there is no module on the PLC which represents this kind of object.</summary>
            <remarks>The OnConnected Event will be fired immediately!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>We do not need to connect this object because there is no module on the PLC which represents this kind of object.</summary>
            <remarks>The OnConnected Event will be fired immediately!</remarks>
            <param name="connectionType">ConnectionType of a PviServices</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Delete">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnDeleted Event will be fired immediately!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Disconnect">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnDisconnected Event will be fired immediately!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Start">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnStarted Event will be fired immediately!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode)">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnDownloaded Event will be fired immediately!</remarks>
            <param name="memoryType">The PLC memory type.</param>
            <param name="installMode">The PLC install mode</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode,System.String)">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnDeleted Event will be fired immediately!</remarks>
            <param name="memoryType">The PLC memory type.</param>
            <param name="installMode">The PLC install mode</param>
            <param name="fileName">The file name to be downloaded.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Remove">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnError Event will be fired immediately!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Stop">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnStoped Event will be fired immediately!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorLogBook.Upload(System.String)">
            <summary>NOT suported by the LogBook object!</summary>
            <remarks>The OnUploaded Event will be fired immediately!</remarks>
        </member>
        <member name="P:BR.AN.PviServices.ErrorLogBook.CpuLinkId">
            <summary>Gets the Link ID of the parent CPU object.</summary>
            <value>CpuLinkId</value>
        </member>
        <member name="T:BR.AN.PviServices.CpuEventHandler">
            <summary>Delegate for CPU objects</summary>
            <param name="sender">The cpu object causing the event.</param>
            <param name="e">The CPU event parameters.</param>
        </member>
        <member name="T:BR.AN.PviServices.CpuEventArgs">
            <summary>Event parameters for CPUEventHandler</summary>
        </member>
        <member name="M:BR.AN.PviServices.CpuEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.DateTime)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="datetime">DateTime</param>
        </member>
        <member name="P:BR.AN.PviServices.CpuEventArgs.DateTime">
            <summary>
            Gets the DateTime of thi sending object 
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.CpuTTServiceEventHandler">
            <summary>Delegate for CPU TT services</summary>
            <param name="sender">The cpu object causing the event.</param>
            <param name="e">The CPU event parameters.</param>
        </member>
        <member name="T:BR.AN.PviServices.CpuTTServiceEventArgs">
            <summary>Event parameters for CPUEventHandler</summary>
        </member>
        <member name="M:BR.AN.PviServices.CpuTTServiceEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.UInt16,System.Byte,System.IntPtr,System.Byte)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="ttGroup">Group of TT service</param>
            <param name="ttServiceID">ID of TT service</param>
            <param name="pData">Data pointer for the TT service data</param>
            <param name="ttDataLen">Length of the TT service data</param>
        </member>
        <member name="P:BR.AN.PviServices.CpuTTServiceEventArgs.TTGroup">
            <summary>Gets TT group</summary>
        </member>
        <member name="P:BR.AN.PviServices.CpuTTServiceEventArgs.TTServiceID">
            <summary>Gets TT service ID</summary>
        </member>
        <member name="P:BR.AN.PviServices.CpuTTServiceEventArgs.TTData">
            <summary>Gets TT data</summary>
        </member>
        <member name="T:BR.AN.PviServices.CpuPhysicalMemReadEventHandler">
            <summary>Delegate for reading physical memory.</summary>
            <param name="sender">The cpu object causing the event.</param>
            <param name="e">The CPU event parameters.</param>
        </member>
        <member name="T:BR.AN.PviServices.CpuPhysicalMemReadEventArgs">
            <summary>Event parameters for CPUEventHandler</summary>
        </member>
        <member name="M:BR.AN.PviServices.CpuPhysicalMemReadEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="pData">Data pointer</param>
            <param name="dataLen">Length of data</param>
        </member>
        <member name="P:BR.AN.PviServices.CpuPhysicalMemReadEventArgs.DataLength">
            <summary>Gets the length of the binary data</summary>
        </member>
        <member name="P:BR.AN.PviServices.CpuPhysicalMemReadEventArgs.DataPtr">
            <summary>Gets the binary data</summary>
        </member>
        <member name="T:BR.AN.PviServices.ModuleEventHandler">
            <summary>The ModuleEventHandler delegate is used to generate ModuleEvents</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.ModuleEventArgs">
            <summary>This class is used to pass Module information to the event handler ModuleCreated, ModuleChanged 
            and ModuleDeleted when an event is raised. The class is derived from PviEventArgs.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.Module,System.Int32)">
            <summary>
            Creates a new instance of the ModuleEventArgs class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Error code</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="module">Module object</param>
            <param name="percentage">Percentage</param>
        </member>
        <member name="P:BR.AN.PviServices.ModuleEventArgs.Module">
            <summary>
            Gets or sets the Module object 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.ModuleEventArgs.Percentage">
            <summary>
            Returns the status of a Module upload or download operation as a percentage
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ErrorEventArgs">
            <summary>
            An instances of this class defines additional event information.
            </summary>
            <remarks>
            e.g. An error event was notified by a Variable-object and the ErrorCode is 
            the additional information for this event.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.ErrorEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action)">
            <summary>Initializes a new instance of the ErrorEventArgs class.</summary>
            <param name="name">Logical name of the PviServices object</param>
            <param name="address">Logical address of the PviServices object</param>
            <param name="errorCode">ErrorCode of the PviServices object</param>
            <param name="language">Language of the PviServices object</param>
            <param name="action">The action which caused the error.</param>
        </member>
        <member name="M:BR.AN.PviServices.ErrorEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.String)">
            <summary>Initializes a new instance of the ErrorEventArgs class.</summary>
            <param name="name">Logical name of the PviServices object</param>
            <param name="address">Logical address of the PviServices object</param>
            <param name="errorCode">ErrorCode of the PviServices object</param>
            <param name="language">Language of the PviServices object</param>
            <param name="action">The action which caused the error.</param>
            <param name="errorInfo">The optional additional error text.</param>
        </member>
        <member name="P:BR.AN.PviServices.ErrorEventArgs.ErrorInfo">
            <summary>Gets optional additional error text.</summary>
            <value>ErrorInfo</value>
        </member>
        <member name="T:BR.AN.PviServices.CollectionErrorEventArgs">
            <summary>An instances of this class defines additional event information.</summary>
        </member>
        <member name="M:BR.AN.PviServices.CollectionErrorEventArgs.#ctor(System.String,System.Int32,System.String,BR.AN.PviServices.Action)">
            <summary>Initializes a new instance of the ErrorEventArgs class.</summary>	
            <param name="name">Logical name of the PviServices object</param>
            <param name="errorCode">ErrorCode of the PviServices object</param>
            <param name="language">Language of the PviServices object</param>
            <param name="actEvent">The action which caused the error.</param>
        </member>
        <member name="P:BR.AN.PviServices.CollectionErrorEventArgs.NewItems">
            <summary>Gets the array list of names of new items.</summary>
            <value>NewItems</value>
        </member>
        <member name="P:BR.AN.PviServices.CollectionErrorEventArgs.ChangedItems">
            <summary>Gets array list of names of items which.</summary>
            <value>RemovedItems</value>
        </member>
        <member name="T:BR.AN.PviServices.DisposeEventArgs">
            <summary>An instances of this class defines additional event information.</summary>
        </member>
        <member name="M:BR.AN.PviServices.DisposeEventArgs.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the DisposeEventArgs class.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="P:BR.AN.PviServices.DisposeEventArgs.Disposing">
            <summary>Gets the flag indicating wheter to dispose or not.</summary>
        </member>
        <member name="T:BR.AN.PviServices.PviProgessEventArgs">
            <summary>This class is used to pass progress information to the event handler.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviProgessEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.Int32)">
            <summary>
            Creates a new instance of the ModuleEventArgs class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Error code</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="percentage">Percentage</param>
        </member>
        <member name="P:BR.AN.PviServices.PviProgessEventArgs.Percentage">
            <summary>
            Returns the status of a Module upload or download operation as a percentage
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviEventArgsXML">
            <summary>This class is used to pass progress information to the event handler.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviEventArgsXML.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.String)">
            <summary>
            Creates a new instance of the ModuleEventArgs class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Error code</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="xmlData">The XML data string.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviEventArgsXML.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.IntPtr,System.UInt32)">
            <summary>
            Creates a new instance of the ModuleEventArgs class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Error code</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="xmlData">The XML data string.</param>
        </member>
        <member name="P:BR.AN.PviServices.PviEventArgsXML.XMLData">
            <summary>
            Returns the status of a Module upload or download operation as a percentage
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviEventArgsXMLApplicationInfo">
            <summary>This class is used to pass application information to the event handler.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviEventArgsXMLApplicationInfo.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.IntPtr,System.UInt32)">
            <summary>
            Creates a new instance of the PviEventArgsXMLApplicationInfo class.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviEventArgsXMLApplicationInfo.ApplicationInfo">
            <summary>
            Information about the application running on the CPU
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.PviEventHandler">
            <summary>Event declaration for common PVI events.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.PviProgressHandler">
            <summary>Event declaration for common PVI progress events.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.PviValueEventHandler">
            <summary>Event declaration for common PVI value events.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="newValue">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.DisposeEventHandler">
            <summary>Event declaration for disposing events.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.PviEventHandlerXmlData">
            <summary>Event declaration for common PVI events which will include the event data in the eventargs property XMLData.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.PviEventHandlerXmlApplicationInfo">
            <summary>Event declaration for Application Information which will include the event data in the eventargs property XMLData and an object with the same information</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.PviException">
            <summary>
            An instance of this class describes an exception which is thrown when an error occurs.
            </summary>
            <remarks>
            To get an exception it is neccessary to set the Exception flag of the ErrorMode property
            for the Service object.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.PviException.#ctor(System.String,System.Int32,System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message">Message text</param>
            <param name="error">Error code</param>
            <param name="sender">Sender object</param>
            <param name="pviEvent">PviEventArgs object</param>
        </member>
        <member name="P:BR.AN.PviServices.PviException.Error">
            <summary>
            Errorcode
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviException.Sender">
            <summary>
            PviServices object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviException.PlcEvent">
            <summary>
            PviEventArgs for additional information
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.VariableEventHandler">
            <summary>Implements the delegate for variable specific events.</summary>
            <param name="sender">The object which caused this event</param>
            <param name="e">The variable event parameters.</param>
        </member>
        <member name="T:BR.AN.PviServices.VariableEventArgs">
            <summary>An instance of this class defines additional eventinformation for variable objects</summary>
        </member>
        <member name="M:BR.AN.PviServices.VariableEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.String[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="changedMembers">Changed members</param>
        </member>
        <member name="P:BR.AN.PviServices.VariableEventArgs.ChangedMembers">
            <summary>
            Gets a collection of changed member elements for array and structure variables.
            </summary>
            <remarks>
            By connecting a variable of type structure or array its possible to get those elements
            in this list which value changed.
            </remarks>
            <example>
            Reading values from structure elements
            <code>
            
            Variable structVar = new Variable(cpuObj,"stVar");
            structVar.Connect();
            structVar.Active = true;
            // Creating event handler
            structVar.ValueChanged += new VariableEventHandler(Var_ValueChanged);
            ...
            ...
            private void Var_ValueChanged(object sender, VariableEventArgs e)
            {
            	Variable tmpVar = (Variable)sender;
            	if (tmpVar.Value.DataType == DataType.Structure )
            	{
            		// Iterating ChangedMembers property
            		foreach ( String strVar in e.ChangedMembers )
            		{
            			// Accessing values by string index -> tmpVar.Value["subSt.subElem_INT"]
            			labelText.Text += String.Format("{0}   {1}\n",strVar,tmpVar.Value[strVar].ToString());
            		}
            	}
            	...
            	...
            }
            </code>
            </example>
        </member>
        <member name="T:BR.AN.PviServices.ArrayDerivation">
            <summary>
            The abstract class Base builds the base for all variable data type derivations
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.DerivationBase">
            <summary>
            The abstract class Base builds the base for all variable data type derivations
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.DerivationBase.#ctor(System.String,BR.AN.PviServices.DataType)">
            <summary>Initializes a new instance of the internal DerivationBase class.</summary>
            <param name="typeName">The name of the type this instance is derived from.</param>
            <param name="basicType">The Type information.</param>
        </member>
        <member name="F:BR.AN.PviServices.DerivationBase.propDerivedFrom">
            <summary>Gets the derivation definition if this derivation is already derived from an other type.</summary>
        </member>
        <member name="M:BR.AN.PviServices.DerivationBase.SetDerivation(BR.AN.PviServices.DerivationBase)">
            <summary>Updates the derivation hierarchy.</summary>
            <param name="derivation">The derivation object this instance is derived from.</param>
        </member>
        <member name="M:BR.AN.PviServices.DerivationBase.ToPviString">
            <summary>Helper to get the PVI string representation of this instance.</summary>
            <returns>The PVI string representation of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.DerivationBase.DerivationPath">
            <summary>Helper to get the PVI derivation hierarchie.</summary>
            <returns>The derivation hierarchie.</returns>
        </member>
        <member name="M:BR.AN.PviServices.DerivationBase.DerivationParameters">
            <summary>Helper to get the PVI string representation of the derivation only.</summary>
            <returns>The PVI string representation of the derivation only.</returns>
        </member>
        <member name="M:BR.AN.PviServices.DerivationBase.ToString">
            <summary>Overrides the basic ToString method.</summary>
            <returns>The string representation of this enum.</returns>
        </member>
        <member name="P:BR.AN.PviServices.DerivationBase.Name">
            <summary>Gets the name of the type this instance is derived from</summary>
            <value>The name of the type this instance is derived from.</value>
        </member>
        <member name="P:BR.AN.PviServices.DerivationBase.DataType">
            <summary>Gets the basice data type this instance is derived from.</summary>
            <value>The basic data type this instance is derived from.</value>
        </member>
        <member name="P:BR.AN.PviServices.DerivationBase.DerivedFrom">
            <summary>Gets the derivation definition if this derivation is already derived from an other type.</summary>
            <value>DerivedFrom</value>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDerivation.#ctor(System.String,BR.AN.PviServices.DataType,BR.AN.PviServices.ArrayDimension)">
            <summary>Initializes a new instance of the internal ArrayDerivation class.</summary>
            <param name="typeName">The name of the type this instance is derived from.</param>
            <param name="basicType">The Type information.</param>
            <param name="arrayDim">The Arraydefinition to be used.</param>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDerivation.DerivationParameters">
            <summary>Helper to get the PVI string representation of the derivation only.</summary>
            <returns>The PVI string representation of the derivation only.</returns>
        </member>
        <member name="P:BR.AN.PviServices.ArrayDerivation.MinIndex">
            <summary>Gets the MIN index value for this derivation.</summary>
            <value>The MIN index value for this derivation.</value>
        </member>
        <member name="P:BR.AN.PviServices.ArrayDerivation.MaxIndex">
            <summary>Gets the MAX index value for this derivation.</summary>
            <value>The MAX index value for this derivation.</value>
        </member>
        <member name="T:BR.AN.PviServices.ArrayDimension">
            <summary>The class implements the description for an array.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimension.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the ArrayDimension class.</summary>
            <param name="endIdx">The end index.</param>
            <param name="startIdx">The starting index.</param>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimension.#ctor(BR.AN.PviServices.ArrayDimension)">
            <summary>Initializes a new instance of the ArrayDimension class.</summary>
            <param name="cloneItem">The item to be cloned.</param>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimension.#ctor(System.Int32)">
            <summary>Initializes a new instance of the ArrayDimension class.</summary>
            <param name="endIdx">The end index.</param>
        </member>
        <member name="F:BR.AN.PviServices.ArrayDimension.propStartIdx">
            <summary>The start index of the array.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ArrayDimension.propEndIdx">
            <summary>The end index of the array.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimension.ToString">
            <summary>Overrides the basic ToString method.</summary>
            <returns>The string representation of this array dimension.</returns>
        </member>
        <member name="P:BR.AN.PviServices.ArrayDimension.StartIndex">
            <summary>Gets the start index of the array.</summary>
            <value>The start index of the array.</value>
        </member>
        <member name="P:BR.AN.PviServices.ArrayDimension.EndIndex">
            <summary>Gets the end index of the array.</summary>
            <value>The end index of the array.</value>
        </member>
        <member name="P:BR.AN.PviServices.ArrayDimension.NumOfElements">
            <summary>Gets the size of the array dimension.</summary>
            <value>The size of the array dimension.</value>
        </member>
        <member name="T:BR.AN.PviServices.ArrayDimensionArray">
            <summary>Implements a collection of ArrayDimension types.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimensionArray.#ctor">
            <summary>Initializes a new instance of the internal ArrayDimensionArray class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimensionArray.Clear">
            <summary>Free allocated memory</summary>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimensionArray.Clone">
            <summary>Allocates an array of memory</summary>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimensionArray.Add(System.String[])">
            <summary>Adds an ArrayDimension definition to the array.</summary>
            <param name="dims">The parameter values to be parsed.</param>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimensionArray.Add(BR.AN.PviServices.ArrayDimension)">
            <summary>Adds an ArrayDimension definition to the array.</summary>
            <param name="arrayDimItem">The array dimension definition to be add.</param>
        </member>
        <member name="M:BR.AN.PviServices.ArrayDimensionArray.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns>A System.String that represents the current System.Object.</returns>
        </member>
        <member name="P:BR.AN.PviServices.ArrayDimensionArray.Count">
            <summary>Gets the number of array items</summary>
            <value>The size of the array.</value>
        </member>
        <member name="P:BR.AN.PviServices.ArrayDimensionArray.Item(System.Int32)">
            <summary>Gets the ArrayDimension for the specified index.</summary>
        </member>
        <member name="T:BR.AN.PviServices.EnumArray">
            <summary>Implements a collection of enumeration types.</summary>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.#ctor(System.String)">
            <summary>Initializes a new instance of the internal EnumArray class.</summary>
            <param name="name">The name of the enumeration.</param>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.Clone">
            <summary>Initializes a new instance of the internal EnumArray class.</summary>
            <returns>The enumeration to be cloned.</returns>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.Clear">
            <summary>Free allocated memory</summary>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.AddEnum(BR.AN.PviServices.EnumBase)">
            <summary>Adds an enum definition to the array.</summary>
            <param name="enumVal">The parameter values to be parsed.</param>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.EnumValue(System.String)">
            <summary>Get the value for a specified name.</summary>
            <param name="name">The name to search for.</param>
            <returns>The value for this enum name. NULL if the name is invalid.</returns>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.EnumName(System.Object)">
            <summary>Get the name for a specified value.</summary>
            <param name="value">The value to search for.</param>
            <returns>The name for this enum value. NULL if the value is invalid.</returns>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.ToPviString">
            <summary>Helper to get the PVI string representation of this instance.</summary>
            <returns>The PVI string representation of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.EnumArray.ToString">
            <summary>Overrides the basic ToString method.</summary>
            <returns>The string representation of this enumeration.</returns>
        </member>
        <member name="P:BR.AN.PviServices.EnumArray.Name">
            <summary>Gets the name of the type this instance is derived from</summary>
            <value>The name of the type this instance is derived from.</value>
        </member>
        <member name="P:BR.AN.PviServices.EnumArray.Names">
            <summary>Gets the names of the enumeration.</summary>
            <value>Names</value>
        </member>
        <member name="P:BR.AN.PviServices.EnumArray.Values">
            <summary>Gets the values of the enumeration.</summary>
            <value>Values</value>
        </member>
        <member name="P:BR.AN.PviServices.EnumArray.Item(System.Int32)">
            <summary>Gets the enum for the specified index.</summary>
        </member>
        <member name="P:BR.AN.PviServices.EnumArray.Count">
            <summary>Gets the number of array items</summary>
            <value>The size of the array.</value>
        </member>
        <member name="T:BR.AN.PviServices.EnumBase">
            <summary>
            The abstract class Base builds the base for all variable data type derivations
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.EnumBase.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance of the internal EnumBase class.</summary>
            <param name="name">The name of the enum.</param>
            <param name="value">The value of the enum.</param>
        </member>
        <member name="F:BR.AN.PviServices.EnumBase.propName">
            <summary>The name of enum.</summary>
        </member>
        <member name="F:BR.AN.PviServices.EnumBase.propValue">
            <summary>The name of enum.</summary>
        </member>
        <member name="M:BR.AN.PviServices.EnumBase.SetEnumValue(System.Object)">
            <summary>Helper to updat the value if the constructor does not supply a value.</summary>
            <param name="value">The value of the enum.</param>
        </member>
        <member name="M:BR.AN.PviServices.EnumBase.ToPviString">
            <summary>Helper to get the PVI string representation of this instance.</summary>
            <returns>The PVI string representation of this instance.</returns>
        </member>
        <member name="P:BR.AN.PviServices.EnumBase.Name">
            <summary>Gets the name of enum.</summary>
            <value>The name of the enum.</value>
        </member>
        <member name="P:BR.AN.PviServices.EnumBase.Value">
            <summary>Gets the name of enum.</summary>
            <value>The name of the enum.</value>
        </member>
        <member name="T:BR.AN.PviServices.Int32Enum">
            <summary>The Int32 enumeration typ.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Int32Enum.#ctor(System.String[])">
            <summary>Initializes a new instance of the internal Int32Enum class.</summary>
            <param name="values">The values of the enum.</param>
        </member>
        <member name="M:BR.AN.PviServices.Int32Enum.SetEnumValue(System.Object)">
            <summary>Helper to updat the value if the constructor does not supply a value.</summary>
            <param name="value">The value of the enum.</param>
        </member>
        <member name="M:BR.AN.PviServices.Int32Enum.ToString">
            <summary>Overrides the basic ToString method.</summary>
            <returns>The string representation of this enum.</returns>
        </member>
        <member name="T:BR.AN.PviServices.Int32MinMaxDerivation">
            <summary>
            The abstract class Base builds the base for all variable data type derivations
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Int32MinMaxDerivation.#ctor(System.String,BR.AN.PviServices.DataType,System.String[])">
            <summary>Initializes a new instance of the internal Int32MinMaxDerivation class.</summary>
            <param name="typeName">The name of the type this instance is derived from.</param>
            <param name="basicType">The Type information.</param>
            <param name="values">The values to parse. the first Element is the signature, therefore start at offset 1.</param>
        </member>
        <member name="M:BR.AN.PviServices.Int32MinMaxDerivation.DerivationParameters">
            <summary>Helper to get the PVI string representation of the derivation only.</summary>
            <returns>The PVI string representation of the derivation only.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Int32MinMaxDerivation.Minimum">
            <summary>Gets the MIN value for this derivation.</summary>
            <value>The MIN value for this derivation.</value>
        </member>
        <member name="P:BR.AN.PviServices.Int32MinMaxDerivation.Maximum">
            <summary>Gets the MAX value for this derivation.</summary>
            <value>The MAX value for this derivation.</value>
        </member>
        <member name="T:BR.AN.PviServices.PlcFamily">
            <summary>
            Family of the uploaded hardware module entry.
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.None">
            <summary>
            No family defined.
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.System2010">
            <summary>
            System B+R 2010
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.System2005">
            <summary>
            System B+R 2005
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.System2003">
            <summary>
            System B+R 2003
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.LogicScanner">
            <summary>
            5LS251.60-1.
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.Simulation">
            <summary>
            Simulation device (ARsim).
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.PowerPanel">
            <summary>
            Power Panel.
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.PanelC300">
            <summary>
            C300
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.PanelC200">
            <summary>
            C200
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.PlcFamily.X20">
            <summary>
            System B+R X20
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.HardwareInfo">
            <summary>Implements a collection of PLC hardware descriptions.</summary>
        </member>
        <member name="F:BR.AN.PviServices.HardwareInfo.propEntriesCount">
            <summary>APIF error code.</summary>
        </member>
        <member name="F:BR.AN.PviServices.HardwareInfo.propDataLength">
            <summary>The number of hw entries.</summary>
        </member>
        <member name="F:BR.AN.PviServices.HardwareInfo.propHWPLCFamily">
            <summary>The tyep of PLC family.</summary>
        </member>
        <member name="F:BR.AN.PviServices.HardwareInfo.propHWData">
            <summary>The hw info data.</summary>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.#ctor(BR.AN.PviServices.Cpu)">
            <summary>Initializes a new instance of the internal HardwareInfo class.</summary>
            <param name="cpuObj">The referenc to the parent CPU Object.</param>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.RemoveFromCBReceivers">
            <summary>Helper to remove the object from the PVI callback servicers ID array</summary>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.AddToCBReceivers">
            <summary>Helper to add all object which might receive a PVI callback to the service IDs array</summary>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.CopyTo(System.Array,System.Int32)">
            <summary>Not supported.
            Copies the entire System.Collections.ArrayList to a compatible one-dimensional System.Array, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ArrayList. The System.Array must have zero-based indexing.</param>
            <param name="count">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when an instances communication error occurs. The function raises the Error event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.OnUploaded(BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when each PviServices object is successful uploaded.
            The method raises the Uploaded event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.HardwareInfo.Upload">
            <summary>Call this method to read the HardwareInfo from the PLC.</summary>
            <remarks></remarks>
            <returns>Zero on success.</returns>
        </member>
        <member name="E:BR.AN.PviServices.HardwareInfo.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInfo.Service">
            <summary>Gets the service object.</summary>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInfo.Parent">
            <summary>Gets the parent object.</summary>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInfo.EntriesCount">
            <summary>Gets the number of hardware module entries in the uploaded data.</summary>
            <value>The number of hardware module entries in the uploaded data.</value>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInfo.DataLength">
            <summary>The number of hw entries.</summary>
            <value>The APIF error code.</value>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInfo.PlcFamily">
            <summary>The tyep of PLC family.</summary>
            <value>The Plc family.</value>
        </member>
        <member name="P:BR.AN.PviServices.HardwareInfo.HardwareInfoData">
            <summary>The hw info data.</summary>
            <value>The hw info data.</value>
        </member>
        <member name="E:BR.AN.PviServices.HardwareInfo.Error">
            <summary>Occurs when this instance notifies an error.</summary>
        </member>
        <member name="E:BR.AN.PviServices.HardwareInfo.Uploaded">
            <summary>Occurs when this instance notifies the success of the upload procedure.</summary>
        </member>
        <member name="T:BR.AN.PviServices.HashtableArray">
            <summary>Implements a hastable which can also be indexed by an array index.
            Each Add operation stores the position of the item.</summary>
        </member>
        <member name="M:BR.AN.PviServices.HashtableArray.#ctor">
            <summary>Initializes a new instance of the HashtableArray class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.HashtableArray.Remove(System.Object)">
            <summary>Removes the element with the specified key from the System.Collections.Hashtable.</summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:BR.AN.PviServices.HashtableArray.Add(System.Object,System.Object)">
            <summary>Adds an element with the specified key and value into the System.Collections.Hashtable.</summary>
            <remarks>Exceptions:
            		System.ArgumentNullException:  key is null.  
            		System.ArgumentException: An element with the same key already exists in the System.Collections.Hashtable.  
            		System.NotSupportedException: The System.Collections.Hashtable is read-only.  -or- The System.Collections.Hashtable has a fixed size.</remarks>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null.</param>
        </member>
        <member name="M:BR.AN.PviServices.HashtableArray.Clear">
            <summary>Removes all elements from the System.Collections.Hashtable.</summary>
            <remarks>Exceptions:
            		System.NotSupportedException: The System.Collections.Hashtable is read-only.</remarks>
        </member>
        <member name="M:BR.AN.PviServices.HashtableArray.GetEnumerator">
            <summary>Returns an enumerator for a section of the System.Collections.ArrayList.</summary>
            <remarks>Exceptions:
             System.ArgumentOutOfRangeException:  index is less than zero  -or-  count is less than zero.  
             System.ArgumentException: index and count do not specify a valid range in the System.Collections.ArrayList.</remarks>
            <returns>An System.Collections.IEnumerator for the specified section of the System.Collections.ArrayList.</returns>
        </member>
        <member name="M:BR.AN.PviServices.HashtableArray.ContainsKey(System.Object)">
            <summary>Determines whether the System.Collections.Hashtable contains a specific key.</summary>
            <remarks>System.ArgumentNullException: key is null. </remarks>
            <param name="key">The key to locate in the System.Collections.Hashtable.</param>
            <returns>true if the System.Collections.Hashtable contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.HashtableArray.Clone">
            <summary>Clones this instance.</summary>
            <returns>The clone of this instance.</returns>
        </member>
        <member name="P:BR.AN.PviServices.HashtableArray.Count">
            <summary>Gets the number of elements actually contained in the System.Collections.ArrayList. </summary>
            <value>Count</value>
        </member>
        <member name="P:BR.AN.PviServices.HashtableArray.Item(System.Object)">
            <summary>This indexer returns the object given the key.</summary>
            <param name="key">The key for the item to get.</param>
            <returns>The object if the index is valid.</returns>
        </member>
        <member name="P:BR.AN.PviServices.HashtableArray.Item(System.Int32)">
            <summary>Enumerator for the indexed version.</summary>
            <param name="index">Index for which to get the value objet.</param>
            <returns>The object if the index is valid.</returns>
        </member>
        <member name="P:BR.AN.PviServices.HashtableArray.Keys">
            <summary>Gets an System.Collections.ICollection containing the keys in the System.Collections.Hashtable.</summary>
            <value>Keys</value>
        </member>
        <member name="T:BR.AN.PviServices.IConvert">
            <summary>
            Defines methods that convert an instance of the Value class to an other Value instance.
            For using this functionality you have to implement a new class derived from IConvert.
            Additional you have to create a new instance of your class for setting the Convert property
            of your variable instance.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.IConvert.PviValueToValue(BR.AN.PviServices.Value)">
            <summary>This method is used to convert a plc variable value to an Value instance.</summary>
            <param name="value">Plc value object.</param>
            <returns>A new Value object</returns>
        </member>
        <member name="M:BR.AN.PviServices.IConvert.ValueToPviValue(BR.AN.PviServices.Value)">
            <summary>
            This method is used to convert a Value instance to a plc variable value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BR.AN.PviServices.User32">
            <summary>Implementation of W32 kernel functions</summary>
        </member>
        <member name="T:BR.AN.PviServices.PlcMessageWindow">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Pvi">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.GetTimeSpanInt32(System.Object)">
            <summary>Convert any value to a time representation.</summary>
            <remarks>On the PLC:
            T#-24d_20h_31m_23s_648ms ...T#24d_20h_31m_23s_647ms </remarks>
            <param name="value">the value to convert.</param>
            <returns>the integer representation of the value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.GetTimeSpanUInt32(System.Object)">
            <summary>Convert any value to a time representation.</summary>
            <remarks>On the PLC:
            T#-24d_20h_31m_23s_648ms ...T#24d_20h_31m_23s_647ms </remarks>
            <param name="value">the value to convert.</param>
            <returns>the unsigned integer representation of the value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.GetIntVal(System.Object)">
            <summary>Gets the int64 representation of the value.</summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.GetUIntVal(System.Object)">
            <summary>Gets the UInt64 representation of the value.</summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.IsLeapYear(System.Int32)">
            <summary>Gets or sets if it is a leap year or not</summary>
            <param name="year">the year to be evaluated</param>
            <returns>TRUE if it is a leap year else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Helper to construct a date time object. With range check an correction.</summary>
            <param name="tm_year">year ... 1 through 9999</param>
            <param name="tm_mon">month ... 1 through 12</param>
            <param name="tm_mday">day ...  1 through the number of days in month</param>
            <param name="tm_hour">hour ...  0 through 23</param>
            <param name="tm_min">minute   0 through 59 </param>
            <param name="tm_sec">second ... 0 through 59</param>
            <returns>The date and time representation</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Helper to construct a date time object. With range check an correction.</summary>
            <param name="tm_year">year ... 1 through 9999</param>
            <param name="tm_mon">month ... 1 through 12</param>
            <param name="tm_mday">day ...  1 through the number of days in month</param>
            <param name="tm_hour">hour ...  0 through 23</param>
            <param name="tm_min">minute   0 through 59 </param>
            <param name="tm_sec">second ... 0 through 59</param>
            <param name="tm_Msec">millisecond ... 0 through 999</param>
            <returns>The date and time representation</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.GetDateTimeUInt32(System.Object)">
            <summary>Convert the date time object to its UInt32 representation.</summary>
            <remarks>We do not care about dates bevor 1970!!!</remarks>
            <param name="value">the object to be converted.</param>
            <returns>The unsigned integer representation of the timestamp.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.GetDateUInt32(System.Object)">
            <summary>Convert the date time object to its UInt32 representation.</summary>
            <remarks>We do not care about dates bevor 1970!!!</remarks>
            <param name="value">the object to be converted.</param>
            <returns>The unsigned integer representation of the timestamp.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Pvi.DateTimeToUInt32(System.DateTime)">
            <summary>Gets the int value for a specified date time object.</summary>
            <remarks>Berechung des Schaltjahres
            Anhand des Vergleiches mit der Zahl 1582 wird ermittelt, 
            ob die julianische oder gregorianische Schaltregel verwendet werden muss: 
            Nach der julianischen Regel ist jedes vierte Jahr ein Schaltjahr, 
            und nach der gregorianischen Regel ist jedes vierte Jahr nur dann ein Schaltjahr, 
            wenn es nicht ohne Rest durch hundert teilbar ist, 
            es sei denn, die Jahreszahl ist durch vierhundert ohne Rest teilbar. </remarks>
            <param name="dt">Zeitstempel</param>
            <returns>The integer representing the time stamp.</returns>
        </member>
        <member name="T:BR.AN.PviServices.GlobalClass">
            <summary>Helper for countin objects.</summary>
        </member>
        <member name="F:BR.AN.PviServices.GlobalClass.m_ItemCounter">
            <summary>Counts objects.</summary>
        </member>
        <member name="T:BR.AN.PviServices.PviParse">
            <summary>Helper to parse system values</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviParse.TryParseInt32(System.String,System.Int32@)">
            <summary>
            Parses String to Int32 value
            </summary>
            <param name="s">String to parse</param>
            <param name="result">Int32 value</param>
            <returns>true on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviParse.TryParseInt16(System.String,System.Int16@)">
            <summary>
            Parses String to Int16 value
            </summary>
            <param name="s">String to parse</param>
            <param name="result">Int16 value</param>
            <returns>true on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviParse.TryParseUInt16(System.String,System.UInt16@)">
            <summary>
            Parses String to UInt16 value
            </summary>
            <param name="s">String to parse</param>
            <param name="result">Int16 value</param>
            <returns>true on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviParse.TryParseUInt32(System.String,System.UInt32@)">
            <summary>
            Parses String to UInt32 value
            </summary>
            <param name="s">String to parse</param>
            <param name="result">Int16 value</param>
            <returns>true on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviParse.TryParseDateTime(System.String,System.DateTime@)">
            <summary>
            Parses String to DateTime value
            </summary>
            <param name="s">String to parse</param>
            <param name="result">DateTime value</param>
            <returns>true on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviParse.TryParseDouble(System.String,System.Double@)">
            <summary>
            Parses String to Double value
            </summary>
            <param name="s">String to parse</param>
            <param name="result">Double value</param>
            <returns>true on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviParse.TryParseByte(System.String,System.Byte@)">
            <summary>
            Parses String to Byte value
            </summary>
            <param name="s">String to parse</param>
            <param name="result">Byte value</param>
            <returns>true on success</returns>
        </member>
        <member name="T:BR.AN.PviServices.PviMarshal">
            <summary>Helper to get common acces to the Marshalling methods of the framework.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.GetVersionInfos(System.IntPtr,System.Int32,System.Collections.Hashtable@)">
            <summary>
            helper to extract version info from PVI buffer
            </summary>
            <param name="pVersion">The version info buffer seperator is a line feed.</param>
            <param name="dataLen">the maximum length of the data buffer.</param>
            <param name="vInfos">The resulting collection.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.GetVersionInfos(System.IntPtr,System.Int32,System.Collections.Hashtable@,System.String)">
            <summary>
            helper to extract version info from PVI buffer
            </summary>
            <param name="pVersion">The version info buffer seperator is a line feed.</param>
            <param name="dataLen">the maximum length of the data buffer.</param>
            <param name="vInfos">The resulting collection.</param>
            <param name="addToKey">Additional string to be add to the kex if set.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToWString(System.IntPtr,System.UInt32)">
            <summary>Helper to convert byte data to System.Type.Stirng with wide character signature.</summary>
            <param name="pBuffer">The byte buffer to copy from</param>
            <param name="bufferLen">The length of the string byte buffer.</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToWString(System.IntPtr,System.Int32)">
            <summary>Helper to convert byte data to System.Type.Stirng with wide character signature.</summary>
            <param name="pBuffer">The byte buffer to copy from</param>
            <param name="bufferLen">The length of the string byte buffer.</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToWString(System.Byte[],System.Int32,System.Int32)">
            <summary>Helper to convert byte data to System.Type.Stirng with wide character signature.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <param name="strLen">The length of the string byte buffer.</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ReadInt64(System.IntPtr)">
            <summary>Reads a 64-bit signed integer from unmanaged memory. </summary>
            <remarks>Exceptions:
            		System.ArgumentException: ptr is not a recognized format.</remarks>
            <param name="ptr">The address in unmanaged from which to read.</param>
            <returns>The 64-bit signed integer read from the ptr parameter.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ReadInt64(System.IntPtr,System.Int32)">
            <summary>Reads a 64-bit signed integer from unmanaged memory. </summary>
            <remarks>Exceptions:
            		System.ArgumentException: ptr is not a recognized format.</remarks>
            <param name="ptr">The address in unmanaged from which to read.</param>
            <param name="offset">The address offset in unmanaged from which to read.</param>
            <returns>The 64-bit signed integer read from the ptr parameter.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ReadUInt64(System.IntPtr,System.Int32@)">
            <summary>Reads a 64-bit signed integer from unmanaged memory. </summary>
            <remarks>Exceptions:
            		System.ArgumentException: ptr is not a recognized format.</remarks>
            <param name="ptr">The address in unmanaged from which to read.</param>
            <param name="offset">The address offset in unmanaged from which to read.</param>
            <returns>The 64-bit signed integer read from the ptr parameter.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ReadByte(System.IntPtr,System.Int32@)">
            <summary>Reads a 8-bit unsigned integer from unmanaged memory. </summary>
            <remarks>Exceptions:
            		System.ArgumentException: ptr is not a recognized format.</remarks>
            <param name="ptr">The address in unmanaged from which to read.</param>
            <param name="offset">The address offset in unmanaged from which to read.</param>
            <returns>The 8-bit unsigned integer read from the ptr parameter.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ReadUInt32(System.IntPtr,System.Int32@)">
            <summary>Reads a 23-bit unsigned integer from unmanaged memory. </summary>
            <remarks>Exceptions:
            		System.ArgumentException: ptr is not a recognized format.</remarks>
            <param name="ptr">The address in unmanaged from which to read.</param>
            <param name="offset">The address offset in unmanaged from which to read.</param>
            <returns>The 32-bit unsigned integer read from the ptr parameter.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteSByte(System.IntPtr,System.SByte)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteSByte(System.IntPtr,System.Int32,System.SByte)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteUInt16(System.IntPtr,System.UInt16)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteUInt16(System.IntPtr,System.Int32,System.UInt16)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteUInt32(System.IntPtr,System.UInt32)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteUInt32(System.IntPtr,System.Int32,System.UInt32)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteUInt64(System.IntPtr,System.UInt64)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteUInt64(System.IntPtr,System.Int32,System.UInt64)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteInt64(System.IntPtr,System.Int64)">
            <summary>Helper to write signed types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
            <summary>Helper to write signed types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteSingle(System.IntPtr,System.Int32,System.Single)">
            <summary>Helper to write single types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteSingle(System.IntPtr,System.Int32,BR.AN.PviServices.Value)">
            <summary>Helper to write single types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteDouble(System.IntPtr,System.Int32,System.Double)">
            <summary>Helper to write double.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteDouble(System.IntPtr,System.Int32,BR.AN.PviServices.Value)">
            <summary>Helper to write double.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.WriteString(System.IntPtr,System.Int32,System.String)">
            <summary>Helper to write usigned types.</summary>
            <param name="ptr">The data pointer.</param>
            <param name="offset">The byte offset for the data pointer.</param>
            <param name="val">The value</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.HighDWord(System.Int64)">
            <summary>Get the HIGH DWord of the long integer</summary>
            <param name="value">The integer for which to get the HIGH DWord.</param>
            <returns>The HIGH DWord of the long integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.HighDWord(System.UInt64)">
            <summary>Get the HIGH DWord of the long integer</summary>
            <param name="value">The integer for which to get the HIGH DWord.</param>
            <returns>The HIGH DWord of the long integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.HighWord(System.UInt32)">
            <summary>Get the HIGH word of the integer</summary>
            <param name="value">The integer for which to get the HIGH word.</param>
            <returns>The HIGH word of the integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.HighWord(System.Int32)">
            <summary>Get the HIGH word of the integer</summary>
            <param name="value">The integer for which to get the HIGH word.</param>
            <returns>The HIGH word of the integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.LowWord(System.Int32)">
            <summary>Get the LOW word of the integer</summary>
            <param name="value">The integer for which to get the LOW word.</param>
            <returns>The LOW word of the integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.LowWord(System.UInt32)">
            <summary>Get the LOW word of the integer</summary>
            <param name="value">The integer for which to get the LOW word.</param>
            <returns>The LOW word of the integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.LowDWord(System.UInt64)">
            <summary>Get the LOW DWord of the long integer</summary>
            <param name="value">The integer for which to get the LOW DWord.</param>
            <returns>The LOW DWord of the long integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.LowDWord(System.Int64)">
            <summary>Get the LOW DWord of the long integer</summary>
            <param name="value">The integer for which to get the LOW DWord.</param>
            <returns>The LOW DWord of the long integer</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToDWord(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>Builds a 64-bit unsigned Integer from 4 ushort values</summary>
            <param name="hH">The high part of the high word</param>
            <param name="lH">The low part of the high word</param>
            <param name="hL">The high part of the low word</param>
            <param name="lL">The low part of the low word</param>
            <returns>The unsigned 64-bit integer value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToDWord(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>Builds a 64-bit Integer from 4 ushort values</summary>
            <param name="hH">The high part of the high word</param>
            <param name="lH">The low part of the high word</param>
            <param name="hL">The high part of the low word</param>
            <param name="lL">The low part of the low word</param>
            <returns>The signed 64-bit integer value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToDWord(System.UInt32,System.UInt32)">
            <summary>Builds a 64-bit unsigned Integer from 2 uint values</summary>
            <param name="high">The high part</param>
            <param name="low">The low part</param>
            <returns>The unsigned 64-bit integer value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToDWord(System.Int32,System.Int32)">
            <summary>Builds a 64-bit Integer from 2 int values</summary>
            <param name="high">The high part</param>
            <param name="low">The low part</param>
            <returns>The signed 64-bit integer value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toByte(System.Object)">
            <summary>Unsigned 8-bit integer: 0 to 255</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toUInt16(System.Object)">
            <summary>Unsigned 16-bit integer:  0 to 65535.</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toUInt32(System.Object)">
            <summary>Unsigned 32-bit integer:  0 to 4,294,967,295</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toSByte(System.Object)">
            <summary>Signed 8-bit integer:  -128 to 127.</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toInt16(System.Object)">
            <summary>Signed 16-bit integer:  -32,768 to 32,767.</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toInt32(System.Object)">
            <summary>Signed 32-bit integer: -2,147,483,648 to 2,147,483,647.</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.UInt64ToBytes(System.UInt64)">
            <summary>Copy an usigned int 64 to a byte array.</summary>
            <param name="u64Val">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toInt64(System.Object)">
            <summary>Signed 64-bit integer: -2,147,483,648 to 2,147,483,647.</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.toUInt64(System.Object)">
            <summary>Signed 64-bit integer: -2,147,483,648 to 2,147,483,647.</summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.PtrToModulInfoStructure(System.IntPtr,System.Type)">
            <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.PtrToDiagModulInfoStructure(System.IntPtr,System.Type)">
            <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.PtrToProgressInfoStructure(System.IntPtr,System.Type)">
            <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Copy(System.IntPtr,System.Int32,System.Int32[]@,System.Int32)">
            <summary>
            Copies elemts of dat from a SystemIntPtr using an offset
            </summary>
            <param name="ptrSource">The source data pointer.</param>
            <param name="srcOffset">The byte offset of the source data pointer.</param>
            <param name="dataDest">The destination array.</param>
            <param name="destElements">The number of elements in the destinationarray.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Copy(System.IntPtr,System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Copies elemts of dat from a SystemIntPtr using an offset
            </summary>
            <param name="ptrSource">The source data pointer.</param>
            <param name="srcOffset">The byte offset of the source data pointer.</param>
            <param name="dataDest">The destination array.</param>
            <param name="destElements">The number of elements in the destinationarray.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Copy(System.IntPtr,System.Int32,System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Copies elemts of dat from a SystemIntPtr using an offset
            </summary>
            <param name="ptrSource">The source data pointer.</param>
            <param name="srcOffset">The byte offset of the source data pointer.</param>
            <param name="destOffset">The byte offset of the destination data.</param>
            <param name="dataDest">The destination array.</param>
            <param name="destElements">The number of elements in the destinationarray.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Copy(System.UInt16,System.Int32,System.Byte[]@)">
            <summary>Copyies an unsigned int16 value to a byte array, starting at a specified index.</summary>
            <param name="ui16Src">The source data.</param>
            <param name="destOffset">The byte offset of the destination data.</param>
            <param name="dataDest">The destination array.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Copy(System.UInt32,System.Int32,System.Byte[]@)">
            <summary>Copyies an unsigned int32 value to a byte array, starting at a specified index.</summary>
            <param name="ui32Src">The source data.</param>
            <param name="destOffset">The byte offset of the destination data.</param>
            <param name="dataDest">The destination array.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Copy(System.UInt32,System.IntPtr)">
            <summary>Copyies an unsigned int32 value to a ptr.</summary>
            <param name="ui32Src">The source data.</param>
            <param name="dataDest">The destination.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Copy(System.IntPtr,System.UInt32@)">
            <summary>Copyies an unsigned int32 value to a ptr.</summary>
            <param name="dataSrc">The destination.</param>
            <param name="ui32Dest">The source data.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.TimeToUInt32(System.String)">
            <summary>
            Convert the PLC time stamp to an UInt32
            </summary>
            <param name="plcTimeCode">The plc Time coede</param>
            <returns>The Time decoded as UInt32.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToInt32(System.String)">
            <summary>
            Convert the a string to Int32
            </summary>
            <param name="strValue">The Int32 in dezimal or hex</param>
            <returns>The Int32.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToUInt32(System.String)">
            <summary>
            Convert the a string to UInt32
            </summary>
            <param name="strValue">The UInt32 in dezimal or hex</param>
            <returns>The UInt32.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.ToByte(System.String)">
            <summary>
            Convert the a string to Byte
            </summary>
            <param name="strValue">The Byte in dezimal or hex</param>
            <returns>The Byte.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.HexCharToByte(System.Char,System.Byte@)">
            <summary>
            Converts a hex character to ist numeric byte representation
            </summary>
            <param name="hexChar">The hex character.</param>
            <param name="byteVal">The resulting numeric value.</param>
            <returns>true on succes else false (if char is not recognized as a HEX value)</returns>
        </member>
        <member name="T:BR.AN.PviServices.PviMarshal.Convert">
            <summary>Herlper Class for conversion functions.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Convert.ToByte(System.SByte)">
            <summary>Helper to convert to byte.</summary>
            <param name="value">The value to convert</param>
            <returns>The byte representaton of the value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Convert.ToByte(System.Char)">
            <summary>Helper to convert to byte.</summary>
            <param name="value">The value to convert</param>
            <returns>The byte representaton of the value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Convert.BytesToUShort(System.Byte,System.Byte)">
            <summary>Helper to convert two bytes to a an unsigned short.</summary>
            <param name="value1">The first value of the ushort.</param>
            <param name="value2">The second value of the ushort.</param>
            <returns>The ushort representaton of the two bytes.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Convert.ToInt16(System.UInt16)">
            <summary>Helper to convert to Int16.</summary>
            <param name="value">The value to convert</param>
            <returns>The byte representaton of the value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviMarshal.Convert.ToInt32(System.UInt32)">
            <summary>Helper to convert to Int32.</summary>
            <param name="value">The value to convert</param>
            <returns>The byte representaton of the value.</returns>
        </member>
        <member name="T:BR.AN.PviServices.StringMarshal">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.XmlSanitizerStream">
            <summary>
            XML StreamReader that excludes XML-illegal characters while reading.
            The decimal range for ASCII control characters is 0 – 31, and 127.
            Version "1.0" of http://www.w3.org/TR/REC-xml/#charsets.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="path">The file to be loaded.</param>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.Read">
            <summary>Reads the next character from the input stream and advances the characterposition by one character.</summary>
            <returns>The next character from the input stream represented as an System.Int32 object, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.Peek">
            <summary>Returns the next available character but does not consume it.</summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.IsLegalXmlChar(System.Int32)">
            <summary>Check Whether a given character is allowed by XML 1.0.</summary>
            <param name="character">The character to be checked</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.Read(System.Char[],System.Int32,System.Int32)">
            <summary>Reads a maximum of count characters from the current stream into buffer, beginning at index.</summary>
            <param name="buffer">When this method returns, 
            contains the specified character array with the values between index 
            and (index + count - 1) replaced by the characters read from the current source.</param>
            <param name="index">The index of buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read, or 0 if at the end of the stream and no data was read. 
            The number will be less than or equal to the count parameter, 
            depending on whether the data is available within the stream.</returns>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>Reads a maximum of count characters from the current stream, and writes the data to buffer, beginning at index.</summary>
            <param name="buffer">When this method returns, 
            this parameter contains the specified character array with the values between index 
            and (index + count -1) replaced by the characters read from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The position of the underlying stream is advanced by the number of characters that were read into buffer.
            The number of characters that have been read.
            The number will be less than or equal to count, depending on whether all input characters have been read.</returns>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.ReadLine">
            <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
            <returns>The next line from the input stream, or null if the end of the input stream is reached.</returns>
        </member>
        <member name="M:BR.AN.PviServices.XmlSanitizerStream.ReadToEnd">
            <summary>Reads the stream from the current position to the end of the stream.</summary>
            <returns>The rest of the stream as a string, from the current position to the end.
            If the current position is at the end of the stream, returns the empty string("").</returns>
        </member>
        <member name="T:BR.AN.PviServices.Direction">
            <summary>For internal use only.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Direction.Input">
            <summary>Not supported </summary>
        </member>
        <member name="F:BR.AN.PviServices.Direction.Output">
            <summary>Not supported </summary>
        </member>
        <member name="T:BR.AN.PviServices.IODataPoint">
            <summary>This class implements all properties and access methods for B+r IO datapoints.</summary>
            <remarks>The class implements three IOVariables. (FORCE-, CONSUMER- and PRODUCER- variable)</remarks>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.reCreateState">
            <summary>Helper to recreate the items after a Service Disconnect</summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.Connect">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.Disconnect">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.Disconnect(System.Boolean)">
            <summary>Not supported </summary>
            <param name="noResponse">Do we want a response or not. Default the response will be sent.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.Disconnect(System.Int32)">
            <summary>Not supported </summary>
            <param name="internalAction">The action parameter</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.ReadValue(BR.AN.PviServices.IOVariableTypes)">
            <summary>Call this helper to read one of the values of the IO data point.</summary>
            <param name="vType">The type of value to PHYSICAL (producer value), VALUE (consumer value) or FORCE (force value) read.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.Remove">
            <summary>
            This method removes the instances references from the PviServices hierarchy.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.ReadValue">
            <summary>Call this helper to read the physical ( PRODUCER ) value</summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>The function is called when the instance was connected. The function raises the Connected event.</summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>The function is called when the instance was disconnected. The function raises the Disconnected event.</summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnForcedOn(System.Int32)">
            <summary>The function is called when the instances activation succeeded. The function raises the Activated event.</summary>
            <param name="error">the error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnForcedOff(System.Int32)">
            <summary>The function is called when the instances activation succeeded. The function raises the Activated event.</summary>
            <param name="error">the error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnValueWritten(System.Int32)">
            <summary>The function is called when the instances value was changed. The function raises the ValueWritten event. </summary>
            <param name="error">the error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnForceValueChanged(BR.AN.PviServices.Variable,System.Int32)">
            <summary>The function is called when the instances value was changed. The function raises the ValueChanged event.</summary>
            <param name="sender">The variable object.</param>
            <param name="error">teh error code</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnPhysicalValueChanged(BR.AN.PviServices.Variable,System.Int32)">
            <summary>The function is called when the instances value was changed. The function raises the PhysicalValueChanged event.</summary>
            <param name="sender">The variable object.</param>
            <param name="error">teh error code</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnValueChanged(BR.AN.PviServices.Variable,System.Int32)">
            <summary>The function is called when the instances value was changed. The function raises the ValueChanged event.</summary>
            <param name="sender">The variable object.</param>
            <param name="error">teh error code</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnValueRead(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs,BR.AN.PviServices.IOVariableTypes)">
            <summary>The function is called when the instances value was read. The function raises the ValueRead event.</summary>
            <param name="sender">the sender variable.</param>
            <param name="e">PviEventArgs object</param>
            <param name="ioVType">the io type of the variable.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.OnDataValidated">
            <summary>The function is called when the instances data isvalid. The function raises the DataValid event.</summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the configuration to the configuration xml file.</summary>
            <param name="writer">The XML Writer used to save settings.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.IODataPoint.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>
            Reads device configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.PhysicalValue">
            <summary>Gets the physical (PRODUCER) value which is READ only.</summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.ForceValue">
            <summary>Gets or sets the FORCE value.</summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.RefreshTime">
            <summary>Gets or sets the refreshtime of this instance.</summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.Value">
            <summary>Gets the consumer value which is READ onl</summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.Force">
            <summary>Gets or sets the force state of this IO Datapoint.</summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.FullName">
            <summary>Not supported </summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.Simulated">
            <summary>Gets or sets wheter ít is a simulated IO variable or not.</summary>
            <value>Simulated</value>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.Direction">
            <summary>Not supported </summary>
            <remarks>Will only check if %Q exists els assumes its an INPUT.</remarks>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.ForcedOn">
            <summary>
            Occurs when the variable-instance is activated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.ForcedOff">
            <summary>
            Occurs when the variable-instance is deactivated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.ForceValueWritten">
            <summary>
            Occurs when a value is written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.ValueChanged">
            <summary>
            Occurs when a value is written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.PhysicalValueChanged">
            <summary>
            Occurs when a value is written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.ForceValueChanged">
            <summary>
            Occurs when a value is written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.ValueRead">
            <summary>
            Occurs when a value is written.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPoint.Active">
            <summary>Gets or sets the active state of this instance.</summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.Deactivated">
            <summary>Occurs when the variable-instance is deactivated.</summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.Activated">
            <summary>Occurs when the variable-instance is activated.</summary>
        </member>
        <member name="E:BR.AN.PviServices.IODataPoint.DataValidated">
            <summary>Occurs when consumer, producer and force value data is valid.</summary>
        </member>
        <member name="T:BR.AN.PviServices.IODataPointCollection">
            <summary>IMplements a collection of IODatapoints.</summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.#ctor(BR.AN.PviServices.Base,System.String)">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.#ctor(System.Object,System.String)">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.Disconnect(System.Boolean)">
            <summary>Disconnects each Module object of the collection.</summary>
            <remarks>The Disconnected event notifies each successful aborted connection.</remarks>
            <param name="noResponse">If true the object will not receive a response for the request!</param>      
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.Upload">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.Upload(BR.AN.PviServices.Scope)">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when an error occured.
            This method raises the Error event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.Add(BR.AN.PviServices.IODataPoint)">
            <summary>Not supported </summary>
        </member>
        <member name="M:BR.AN.PviServices.IODataPointCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="P:BR.AN.PviServices.IODataPointCollection.Item(System.String)">
            <summary>Not supported </summary>
        </member>
        <member name="P:BR.AN.PviServices.IODataPointCollection.Service">
            <summary>
            Gets the Service object of the collections parent
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.IOVariable">
            <summary>An instance of this class offers methods for reading and writing, data or properties of a process variable.
            Syntax des Linknode Status:
            
            	ST=Lkn.$Source$ FC=$Force$ UL=$Unresolved Link$ [IO=$Attribute$]
            
            	Par. Beschreibung  
            	ST Mit $Source$ wird die Quelle der Daten der Linknode Variablen angegeben.
            	'd' .. Default-Wert, 'p' .. Producer-Wert, 'f' .. Force-Wert.
            	Die Angabe der Quelle ist abhängig vom verwendeten Abgriffpunkt. 
            	FC Mit $Force$ wird der Force-Zustand angegeben.
            	1 .. Force aktiv, 0 .. Force nicht aktiv. 
            	UL Mit $Unresolved Link$ werden PV Verknüpfungen zu der Linknode signalisiert.
            	1 .. mindestens eine PV Verknüpfung vorhanden, 0 .. keine PV Verknüpfung vorhanden.  
            	IO Mit $Attribute$ wird die Art der IO Verknüpfung signalisiert.
            	'r' .. Verknüpfung mit Eingang (Input), 'w' .. Verknüpfung mit Ausgang (Output).
            	Ist der Parameter IO nicht angegeben, existiert keine IO Verknüpfung.  
            
            	Beispiel für Linknode Status:
            
            	ST=Lkn.p FC=0 UL=1 IO=r</summary>
        </member>
        <member name="T:BR.AN.PviServices.Variable">
            <summary>An instance of this class offers methods for reading and writing, data or properties of a process variable.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Variable.mapNameToMember">
            <summary>This hashtable holds all members of a structure.
            It will be empty if the object is a variable of a simple data type</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.InitializeMembers">
            <summary>Initializes a new instance of the internal Variable class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Initialize(BR.AN.PviServices.Base,BR.AN.PviServices.Base,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the internal Variable class.</summary>
            <param name="pObj">The parent object.</param>
            <param name="oObj">The owner object.</param>
            <param name="expandMembers">when set to true all members will be expanded.</param>
            <param name="automaticWrite">when set to true the value will be written automatically.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ResizePviDataPtr(System.Int32)">
            <summary>Helper to set the size of the value</summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor">
            <summary>Initializes a new instance of the internal Variable class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Cpu)">
            <summary>Initializes a new instance of the internal Variable class.</summary>
            <param name="cpu">Cpu-object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Service,System.String)">
            <summary>Initializes a new instance of the variable class</summary>
            <param name="service">Service-object</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.SimpleNetworkManagementProtocol,System.String)">
            <summary>Initializes a new instance of the variable class</summary>
            <param name="snmp">The SNMP-object</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.NetworkAdapter,System.String)">
            <summary>Initializes a new instance of the variable class</summary>
            <param name="nwAdapter">The SNMP network adapter -object</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Service,System.String,System.Boolean)">
            <summary>Initializes a new instance of the variable class</summary>
            <param name="service">Service-object</param>
            <param name="name">variable name</param>
            <param name="isUploded">the variable has been uploaded </param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Service,System.Boolean,System.String)">
            <summary>Initializes a new instance of the variable class</summary>
            <param name="service">Service-object</param>
            <param name="expandMembers">when set to true all members will be expanded.</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>
            Initializes a new instance of the variable class to get connected to a 
            global Variable on the plc.
            </summary>
            <exception cref="T:System.ArgumentException">Variable object allready exists.</exception>
            <remarks>
            This instance will be automatically added to the parents variable collection. For this reason its necessary
            to check this collection for already existing objects.
            </remarks>
            <example>
            <code>
            // CPU already connected
            // Getting global variable list from the plc
            cpu.Variables.Upload();
            cpu.Variables.Uploaded += new PviEventHandler(Variables_Uploaded);
            ...
            ...
            private void Variables_Uploaded(object sender, PviEventArgs e)
            {
            	Variable myVar=null;
            	// Creating new variable "var_01" and get connected to it
            	if ( cpu.Variables.ContainsKey("var_01") )
            		myVar = cpu.Variables["var_01"];		// Variable already exists
            	else
            		myVar = new Variable(cpu,"var_01");	// Variable not exist -&gt; create
            	myTask.Connect();
            	
            }
            </code>
            </example>
            <param name="cpu">Cpu-object</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Cpu,System.Boolean,System.String)">
            <summary>Initializes a new instance of the variable class to get connected to a global variable on the PLC.</summary>
            <param name="cpu">Cpu-object</param>
            <param name="expandMembers">when set to true all members will be expanded.</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Task,System.String)">
            <summary>
            Initializes a new instance of the variable class to get connected to a 
            local variable on the plc.
            </summary>
            <exception cref="T:System.ArgumentException">Variable object allready exists.</exception>
            <remarks>
            This instance will be automatically added to the parents variable collection. For this reason its necessary
            to check this collection for already existing objects.
            </remarks>
            <example>
            <code>
            // Task already connected
            // Getting local variable list from the task on the plc
            task.Variables.Upload();
            task.Variables.Uploaded += new PviEventHandler(Variables_Uploaded);
            ...
            ...
            private void Variables_Uploaded(object sender, PviEventArgs e)
            {
            	Variable myVar=null;
            	// Creating new variable "var_01" and get connected to it
            	if ( cpu.Variables.ContainsKey("var_01") )
            		myVar = task.Variables["var_01"];		// Variable already exists
            	else
            		myVar = new Variable(task,"var_01");	// Variable not exist -&gt; create
            	myTask.Connect();
            	
            }
            </code>
            </example>
            <param name="task">Task-object</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Task,System.Boolean,System.String)">
            <summary>Initializes a new instance of the variable class to get connected to a local variable on the plc.</summary>
            <param name="task">Task-object</param>
            <param name="expandMembers">when set to true all members will be expanded.</param>
            <param name="name">variable name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Variable,System.String)">
            <summary>
            Initializes a new instance of the variable class to create a member object. 
            This instance will be automatically added to the parents MemberCollection.
            </summary>
            <param name="variable">Existing variable object of type structure</param>
            <param name="name">Structure member name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Variable,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the variable class to create a member object. 
            This instance will be automatically added to the parents MemberCollection.
            </summary>
            <param name="variable">Existing variable object of type structure</param>
            <param name="expandMembers">when set to true all members will be expanded.</param>
            <param name="name">Structure member name</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(System.Boolean,BR.AN.PviServices.Variable,System.String,System.Boolean)">
            <summary>Initializes a new instance of the variable class to create a member object. 
            This instance will be automatically added to the parents MemberCollection.</summary>
            <param name="isMember">If true the varible is a member var.</param>
            <param name="variable">Existing variable object of type structure</param>
            <param name="name">Structure member name</param>
            <param name="addToVColls">Indicates wheter this is a PviServices variable member only or not.
            If addToVColls is set to true this object is accessable through the variable and also through the Variables collections.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(System.String,BR.AN.PviServices.Variable,System.Boolean,System.Int32,System.Int32,BR.AN.PviServices.Scope)">
            <summary>
            Initializes a new instance of the variable class to create a member object. 
            This instance will be automatically added to the parents MemberCollection.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="parentVar">The parent member object.</param>
            <param name="addToVCollections">Should the item be add to the global variable collections or not.</param>
            <param name="offset">The byte offset in the data buffer.</param>
            <param name="alignment">The struct alignment.</param>
            <param name="vScope">The variable scope.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CloneVariable(BR.AN.PviServices.Variable,BR.AN.PviServices.Variable,BR.AN.PviServices.Variable,System.Boolean,System.Boolean)">
            <summary>Clone a variable instance.</summary>
            <param name="varClone">Existing variable object to be cloned with all elements.</param>
            <param name="root">The root object of this structure.</param>
            <param name="parentVar">The parent member object.</param>
            <param name="addToVCollections">If true the PV will be add to the global variables map.</param>
            <param name="bAddToAll">Equals the Service.AddStructMembersToMembersToo flag.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Variable,System.String,System.Boolean)">
            <summary>Initializes a new instance of the variable class to create a member object. 
            This instance will be automatically added to the parents MemberCollection.</summary>
            <param name="variable">Existing variable object of type structure</param>
            <param name="name">Structure member name</param>
            <param name="addToVColls">Indicates wheter this is a PviServices variable member only or not.
            If addToVColls is set to true this object is accessable through the variable and also through the Variables collections.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.#ctor(BR.AN.PviServices.Variable,System.Boolean,System.String,System.Boolean)">
            <summary>Initializes a new instance of the variable class to create a member object. 
            This instance will be automatically added to the parents MemberCollection.</summary>
            <param name="variable">Existing variable object of type structure</param>
            <param name="expandMembers">when set to true all members will be expanded.</param>
            <param name="name">Structure member name</param>
            <param name="memberOnly">Indicates wheter this is a PviServices variable member only or not.
            If memberOnly is set to true this object is only accessable through the variable but not through the Service collection.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Init(System.String)">
            <summary>Initializes the members.</summary>
            <param name="name">The name of the variable object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Init(System.String,System.Boolean)">
            <summary>Initializes the members.</summary>
            <param name="name">The name of the variable object.</param>
            <param name="isServiceUploadedVar">Has the variable been uploaded from PVI or is it a new instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.AddMember(BR.AN.PviServices.Variable)">
            <summary>Helper to add struct member variables.</summary>
            <param name="newVar">The variable to be add.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.AddStructMembers(BR.AN.PviServices.Variable,BR.AN.PviServices.Variable)">
            <summary>Helper to recursivly add the member to the items members maps</summary>
            <param name="parentVar">The parent of the member variable object.</param>
            <param name="memberVar">The member variable to be add.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.AddStructMember(System.String,BR.AN.PviServices.Variable)">
            <summary>Helper to add struct member member variables.</summary>
            <param name="name">The name of the member variable.</param>
            <param name="memberVar">The variable to be add.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SetTypeInfo(BR.AN.PviServices.DataType)">
            <summary>Helper to initialize the Datatype information.</summary>
            <param name="type">The data type</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SetTypeInfo(System.Int32,BR.AN.PviServices.DataType)">
            <summary>Helper to initialize the Datatype information.</summary>
            <param name="bitOffset">The offset for bit addressing.</param>
            <param name="type">The data type</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SetTypeInfo(BR.AN.PviServices.DataType,System.Int32)">
            <summary>Helper to initialize the Datatype information.</summary>
            <param name="type">The data type</param>
            <param name="arraySize">The number of array elements.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SetTypeInfo(BR.AN.PviServices.DataType,System.Int32,System.Int32)">
            <summary>Helper to initialize the Datatype information.</summary>
            <param name="type">The data type</param>
            <param name="arraySize">The number of array elements.</param>
            <param name="bitOffset">The offset for bit addressing.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.reCreateState">
            <summary>Helper to recreate the items after a Service Disconnect</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ChangeConnection">
            <summary>Use this member function to change the connection of the object.
            When the function has changed the connection the Event ConnectionChanged will be fired.</summary>
            <remarks>At the moment the address is the only parameter which can be changed!!</remarks>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Connect">
            <summary>
            Creates a connection of this instance to its processvariable.
            </summary>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the task-object, when its parent (cpu-object) was not already
            connected. In that case the task-object store this "connect"-action, to connect the
            task-object automatically when the cpu-connected-event received.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>
            Creates a connection of this instance to its processvariable.
            </summary>
            <param name="conType">Defines the ConnectionType of this Variable object</param>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the variable object, when its parent (cpu object) was not already
            connected. In that case the variable object store this "connect" action, to connect the
            variable object automatically when the cpu connectedevent received.
            
            For creating a link object to an existing variable object its needed to specify the LinkName property
            with the FullName property of the variable to link.
            </remarks>
            <example>
            <code>
            // Creating service and cpu object
            Service service = new Service("Service1");
            service.Connect();
            Cpu cpu = new Cpu(service,"Cpu1");
            cpu.Connect();
            ..
            ..
            // Creating connection to global Variable
            Variable globVar = new Variable(cpu,"var1");
            globVar.Connect();
            globVar.Connected += new PviEventHandler(Var_Connected);
            ..
            ..
            private void Var_Connected(object sender, PviEventArgs e)
            {
            	// Creating link connection to existing variable
            	Variable linkToGlobVar = new Variable(cpuObj,"linkVar");
            	linkToGlobVar.LinkName = "Service1.Cpu1.var1";	// or globVar.FullName;
            	linkToGlobVar.Connect(ConnectionType.Link);
            }
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Connect(System.Boolean)">
            <summary>helper to force a connect bevor Connected of the Task or CPU has been fired.</summary>
            <param name="forceConnect">The flag indicates wheter WaitForParentConnection should be ignored or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetLinkParameters(BR.AN.PviServices.ConnectionType,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Gets the link object parameters for this variable.</summary>
            <param name="conType">The type of connection.</param>
            <param name="dt">The data type.</param>
            <param name="fs">Scaling function.</param>
            <param name="lp">The LPARAM as string.</param>
            <param name="va">The variable addressing string.</param>
            <param name="cm">The CAST mode string.</param>
            <param name="vL">The number of bytes (the length.</param>
            <param name="vN">The number of elements.</param>
            <returns>The PVI link parameters.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetEventMaskParameters(BR.AN.PviServices.ConnectionType,System.Boolean)">
            <summary>gets the event mask for this variable depending on the state of the variable.</summary>
            <param name="conType">The type of connection.</param>
            <param name="useParamMarker">If set to true the parameter will be something like EV=ed, else ed.</param>
            <returns>The even mask string for PVI.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetEventMaskParameters(BR.AN.PviServices.ConnectionType)">
            <summary>gets the event mask for this variable depending on the state of the variable.</summary>
            <param name="conType">The type of connection.</param>
            <returns>The even mask string for PVI.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetObjectParameters(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Gets the object parameters for this variable object.</summary>
            <param name="rf">Refresh time.</param>
            <param name="hy">Hysteresis.</param>
            <param name="at">Access Attributes.</param>
            <param name="fs">Scaling function.</param>
            <param name="ut">The user tag.</param>
            <param name="dt">Datatype (required for internal PVs)</param>
            <param name="vL">The number of bytes (the length.</param>
            <param name="vN">The number of elements.</param>
            <returns>The PVI appropriate object parameter string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetDataTypParameters">
            <summary>Call this helper to get data typ information especially for internal PVI PVs.</summary>
            <returns>Gets the DataType information.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetCastModeParameters">
            <summary>Call this helper to get the cast mode.</summary>
            <returns>Gets the Cast mode.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetAttributeParameters">
            <summary>Gets the access attributes.</summary>
            <returns>The attribute string for PVI.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetUserTagParameters">
            <summary>Call this helper to get the user tag info.</summary>
            <returns>The user tag as string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetScalingFunctionParameters">
            <summary>Call this helper to get the scaling function.</summary>
            <returns>The scaling function.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.UpdateAddress(BR.AN.PviServices.ConnectionType)">
            <summary>Call this helper to update the address info.</summary>
            <param name="conType">The type of connect to execute.</param>
            <returns>The new address string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetLTParameters">
            <summary>Call this helper to get the string containing information which data (raw or process value) should be used.</summary>
            <returns>The string containing information which data (raw or process value) should be used.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetConnectionDescription">
            <summary>Call this method to get the connection descriptionString for the object.</summary>
            <returns>The connection description used to create the PVI object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Connect(BR.AN.PviServices.ConnectionType,System.Int32)">
            <summary>Helper to connect this instance to a PVI variable object.</summary>
            <param name="conType">Which type of connection is it<seealso cref="T:BR.AN.PviServices.ConnectionType"/>.</param>
            <param name="internalAction">Additional info parameter.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Connect(System.Boolean,BR.AN.PviServices.ConnectionType,System.UInt32)">
            <summary>Helper to connect this instance to a PVI variable object.</summary>
            <param name="forceConnection">The flag indicates wheter WaitForParentConnection should be ignored or not.</param>
            <param name="conType">Which type of connection is it<seealso cref="T:BR.AN.PviServices.ConnectionType"/>.</param>
            <param name="internalAction">Additional info parameter.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetObjectName">
            <summary>
            The Name of the object.
            </summary>
            <returns>The name of the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Upload">
            <summary>
            If instances datatype equals DataType.Structure, this method uploads all members
            and submembers of this instance from the plc.
            </summary>
            <example>
            <code>
            Variable var = new Variable(cpuObj,"structVar");
            var.Connect(); // Upload is called automatically when Connected event occurs
            
            // Accessing variable member after upload
            Variable element = var["item1"];
            element.Connect();
            ...
            ...
            // Accessing a submember
            Variable subElement = var["stItem.subItem1"];
            subElement.Connect();
            ...
            ...
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instance was connected. The function raises the Connected event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CheckActiveRequests(BR.AN.PviServices.PviEventArgs)">
            <summary>Helper to check the activation state. Will fire Activated if all variables have been activated.</summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Disconnect">
            <summary>
            Disconnects this instance of its variable on the plc.
            </summary>
            <remarks>
            The Disconnected event notifies the disconnection.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Disconnect(System.Boolean)">
            <summary>
            Disconnects this instance of its variable on the plc.
            </summary>
            <remarks>
            The Disconnected event notifies the disconnection.
            </remarks>
            <param name="noResponse">Do we want a response or not. Default the response will be sent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Disconnect(System.UInt32)">
            <summary>Helper for to stop the PLC connection of the object.</summary>
            <param name="internalAction">The action code internaly used for identifying the events.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Disconnect(System.UInt32,System.Boolean)">
            <summary>Helper for to stop the PLC connection of the object.</summary>
            <param name="internalAction">The action parameter.</param>
            <returns>0 if successful else an error code.</returns>
            <param name="noResponse">Do we want a response or not. Default the response will be sent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instance was disconnected. The function raises the Disconnected event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when an instances communication error occurs. The function raises the Error event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnDataValidated(BR.AN.PviServices.PviEventArgs)">
            <summary>The function is called when the instances data was valid. The function raises the DataValid event.</summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnValueChanged(BR.AN.PviServices.VariableEventArgs)">
            <summary>
            The function is called when the instances value was changed. The function raises the ValueChanged event.
            </summary>
            <param name="e">VariableEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnValueWritten(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances value was changed. The function raises the ValueWritten event. 
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnValueRead(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances value was read. The function raises the ValueRead event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Fire_ValueChanged(System.Object,BR.AN.PviServices.VariableEventArgs)">
            <summary>
            The function is called when the instances value was changed. The function raises the ValueChanged event.
            </summary>
            <param name="sender">The object which caused to send this event.</param>
            <param name="e">VariableEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Fire_ValueWritten(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances value was changed. The function raises the ValueWritten event. 
            </summary>
            <param name="sender">The object which caused to send this event.</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Fire_ValueRead(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances value was read. The function raises the ValueRead event.
            </summary>
            <param name="sender">The object which caused to send this event.</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Fire_Activated(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances activation succeeded. The function raises the Activated event.
            </summary>
            <param name="sender">The object which caused to send this event.</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Fire_Deactivated(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances deactivation succeded. The function raises the Deactivated event.
            </summary>
            <param name="sender">The object which caused to send this event.</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnExtendedTypeInfoRead(BR.AN.PviServices.PviEventArgs)">
            <summary>The function is called when the instances extended typ information has been read. The function raises the <seealso cref="E:BR.AN.PviServices.Variable.ExtendedTypeInfoRead"/> event.</summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnActivated(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances activation succeeded. The function raises the Activated event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnDeactivated(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances deactivation succeded. The function raises the Deactivated event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPropertyChanged(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when a property changed (e.g RefreshTime).
            The function raises the PropertyChanged event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnUploaded(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances upload succeded. The function raises the Uploaded event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnForcedOn(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances deactivation succeded. The function raises the Deactivated event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnForcedOff(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances deactivation succeded. The function raises the Deactivated event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.UpdateValueData(System.IntPtr,System.UInt32,System.Int32)">
            <summary>Helper to updat the data.</summary>
            <param name="pData">The data Ptr</param>
            <param name="dataLen">The length of the data.</param>
            <param name="error">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.InterpretTypInfo(System.Int32,System.String,System.Int32)">
            <summary>Helper for interpreting data type info.</summary>
            <param name="errorCode">The error code.</param>
            <param name="pviText">The type description in PVI format.</param>
            <param name="actionCode">The action code.</param>
            <returns>zero on suvcess.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviUnLinked(System.Int32,System.Int32)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="errorCode">The error code if unlinking the object failed.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviDeleted(System.Int32)">
            <summary>Global CallBack function for PVI deletes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.OnPviChangedLink(System.Int32)">
            <summary>Global CallBack function for PVI link changes.</summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetForceStatus(System.String,System.Boolean@)">
            <summary>Gets the force info from the PVI description string.</summary>
            <param name="pviString">The Pvi description string.</param>
            <param name="forceValue">The force value.</param>
            <returns>true if the FC attribute is available else false!</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetAccessStatus(System.String)">
            <summary>Gets the force info from the PVI description string.</summary>
            <param name="pviString">The Pvi description string.</param>
            <returns>true if the FC attribute is available else false!</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CreateMembers(System.String,System.Int32@,System.Boolean)">
            <summary>Helper to create the structure or array members.</summary>
            <param name="pviText">The structure or array info.</param>
            <param name="typeLength">newly calculated length of the datatype based on the alignment calculation.</param>
            <param name="expandMembers">should the members be created as variable members or not.</param>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.AddComplexVariableItem">
            <summary>
            Helper to add Array items to variable root.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CreateNestedStruct(BR.AN.PviServices.Variable,BR.AN.PviServices.Variable,System.String[],System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>Helper to get the structures members.</summary>
            <param name="root">The root object of this structure.</param>
            <param name="varParent">The parent member object.</param>
            <param name="typeInfo">The array containing the typ information.</param>
            <param name="offset">The byte offset for this instance to use.</param>
            <param name="nesting">The nesting must not be higher than this when creting sub elements.</param>
            <param name="infoIdx">The index of the typ info array.</param>
            <param name="addToVCollections">If true the member will be add to the Variables collections.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CreateNestedStructClone(BR.AN.PviServices.Variable,BR.AN.PviServices.Variable,BR.AN.PviServices.Variable,BR.AN.PviServices.Variable,System.Int32@,System.Int32,System.Boolean,System.Boolean)">
            <summary>Helper to get the structures members.</summary>
            <param name="root">The root object of this structure.</param>
            <param name="varParent">The parent member object.</param>
            <param name="varOwner">The owner member object.</param>
            <param name="varClone">The clone containing the typ information.</param>
            <param name="offset">The byte offset for this instance to use.</param>
            <param name="nesting">The nesting must not be higher than this when creting sub elements.</param>
            <param name="addToVCollections">If true the member will be add to the Variables collections.</param>
            <param name="addStructMembersToMembersToo">Equals the Service.AddStructMembersToMembersToo flag.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.AddNextDimensionItem(System.String,BR.AN.PviServices.ArrayDimensionArray,System.Int32,System.Int32,System.Collections.ArrayList@)">
            <summary>Helper to get the iteration for array dimensions.</summary>
            <param name="strDims">The stringrepresentaion of a single item.</param>
            <param name="aDims">The dimension definitions.</param>
            <param name="numDim">The index of the next dimension.</param>
            <param name="totalDims">The numer of dimension definitions.</param>
            <param name="lstOfItems">The resulting item names e.g.: [0,0,0].</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.AddDimensionIndexs(BR.AN.PviServices.ArrayDimensionArray,System.Collections.ArrayList@)">
            <summary>Helper to get the array dimensions.</summary>
            <param name="aDims">The dimension definitions.</param>
            <param name="lstOfItems">The resulting item names e.g.: [0,0,0].</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CreateStructArray(BR.AN.PviServices.Variable,BR.AN.PviServices.Variable,System.String[],System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Helper to get the array members.</summary>
            <param name="root">The root object of this structure.</param>
            <param name="parentVar">The parent member object.</param>
            <param name="byteOffset">The calculated byte offset.</param>
            <param name="typeInfo">The array containing the typ information.</param>
            <param name="offset">The byte offset for this instance to use.</param>
            <param name="infoIdx">The index of the typ info array.</param>
            <param name="addToVCollections">Should the item be add to the global variable collections or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ReadValue">
            <summary>
            Reads the actual value of processvariable.
            </summary>
            <remarks>The event ValueRead notifies, that the value was successful read.</remarks>
            <example>
            <code>
            Variable var = new Variable(cpuObj,"global_INT");
            var.Connect();
            var.Connected += new PviEventHandler(Var_Connected);
            ...
            ...
            private void Var_Connected(object sender, PviEventArgs e)
            {
            	Variable tmpVar = (Variable)sender;
            	tmpVar.ReadValue();
            	tmpVar.ValueRead += new PviEventHandler(Var_ValueReadX);
            }
            ...
            ...
            private void Var_ValueRead(object sender, PviEventArgs e)
            {
            	Variable tmpVar = (Variable)sender;
            	this.lbValue.Text = tmpVar.Value.ToString();
            }
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ReadExtendedTypeInfo">
            <summary>Get the extended type information (derivatio, enums, Bit- String and the InitialValue).</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ReadValueEx">
            <summary>
            Reads the actual value of processvariable.
            </summary>
            <remarks>The event ValueRead notifies, that the value was successful read.</remarks>
            <example>
            <code>
            Variable var = new Variable(cpuObj,"global_INT");
            var.Connect();
            var.Connected += new PviEventHandler(Var_Connected);
            ...
            ...
            private void Var_Connected(object sender, PviEventArgs e)
            {
            	Variable tmpVar = (Variable)sender;
            	int retVal = tmpVar.ReadValueEx();
            	tmpVar.ValueRead += new PviEventHandler(Var_ValueReadEx);
            }
            ...
            ...
            private void Var_ValueReadEx(object sender, PviEventArgs e)
            {
            	Variable tmpVar = (Variable)sender;
            	this.lbValue.Text = tmpVar.Value.ToString();
            }
            </code>
            </example>
            <returns>0 if the read was successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ReadValue(System.Boolean)">
            <summary>Call this member to read the value of this instance. If synchronous == TRUE the method will not return until the value is read.</summary>
            <param name="synchronous">If set to TRUE will cause the method to wait for the result. The Value property is updated when the function returns.
            If set to false, the method will simply initiate a read request. The result will be reported in the Event ValueRead.</param>
            <returns>0 if the read was successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ReadValue(System.Boolean,System.Collections.ArrayList@)">
            <summary>Call this member to read the value of this instance. If synchronous == TRUE the method will not return until the value is read.</summary>
            <param name="synchronous">If set to TRUE will cause the method to wait for the result. The Value property is updated when the function returns.
            If set to false, the method will simply initiate a read request. The result will be reported in the Event ValueRead.</param>
            <param name="changes">The array list of changed members if the value is of type struct or array.</param>
            <returns>0 if the read was successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.WriteInitialValue">
            <summary>Helper to write the INITVALUE</summary>
            <remarks>Does not request a response!!</remarks>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.UpdateAssignedData(System.IntPtr,System.Int32,System.Int32)">
            <summary>Helper to update the data value.</summary>
            <param name="pD">The pointer to the local data.</param>
            <param name="byteOffset">the byte offset.</param>
            <param name="dSize">the size.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.WriteValue(System.Array,System.Int32)">
            <summary>Helper to write arrays of values.</summary>
            <param name="values">The array of values to be written.</param>
            <param name="offset ">The byte offset if the element is an array item.</param>
            <returns>0 if successful else an error number.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.WriteValue(System.Array)">
            <summary>Helper to write arrays of values.</summary>
            <param name="values">The array of values to be written.</param>
            <returns>0 if successful else an error number.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.WriteValue">
            <summary>Writes the instances actual value.</summary>
            <remarks>The event Value notifies, that the value was successfully written.</remarks>
            <returns>0 if successful else an error number.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ValueCBWriteRequest(System.IntPtr,System.Int32,System.UInt32,System.Boolean)">
            <summary>Helper</summary>
            <param name="pData"></param>
            <param name="dataLen"></param>
            <param name="msgID"></param>
            <param name="sync"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SendWriteValue(System.Boolean)">
            <summary>Writes the instances actual value.</summary>
            <remarks>The event Value notifies, that the value was successfully written.</remarks>
            <param name="sync">If set to true make a synchronuous write!</param>
            <returns>0 if successful else an error number.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.WriteValue(System.Boolean)">
            <summary>Writes the value of this instance.</summary>
            <param name="synchronous">If true the method waits until the data has been transfered to the PLC. There will be no event indicating the success or failure of the execution.
            If set to false you will have to wait for the Event <seealso cref="E:BR.AN.PviServices.Variable.ValueWritten"/> to get the state of execution.</param>
            <returns>0 if successful else the error code. If synchronous is set to true and the method returns 0 this will indicate, that the data has been successfully transfered to the PLC.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.WriteValueForced(System.Boolean)">
            <summary>Writes the instances actual value.</summary>
            <remarks>The event Value notifies, that the value was successful written.</remarks>
        </member>
        <member name="M:BR.AN.PviServices.Variable.InternalSetValue(System.IntPtr,System.UInt32,System.Int32)">
            <summary>Helper to update the structre value.</summary>
            <param name="pData">The byte data.</param>
            <param name="dataLen">The total size of the data recived from PVI. When using strings dataLen my be less than DataSize!!!.</param>
            <param name="offset">The offset.</param>
            <returns>The Value of the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.InternalSetValue(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>Helper to update the structre value.</summary>
            <param name="pData">The byte data.</param>
            <param name="dataLen">The total size of the data recived from PVI. When using strings dataLen my be less than DataSize!!!.</param>
            <param name="offset">The offset.</param>
            <param name="len">The length of the data.</param>
            <returns>The Value of the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetValueUseOldStyleName(System.String)">
            <summary>Helper to get members in old style format ( "adr[0]" instead of "[0]" or "adr.elem1" instead of "elem1")</summary>
            <param name="varName">The name of the variable</param>
            <returns>The new Value object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetStructureMemberValue(System.Int32)">
            <summary>Call this method to get the array Element at a given position.</summary>
            <remarks>This method is valid for arrays only!</remarks>
            <param name="index">The array index</param>
            <returns>The value object representing the PLC Value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.setValue(BR.AN.PviServices.Variable,BR.AN.PviServices.Value)">
            <summary>Heper to set struct members.</summary>
            <param name="owner">The owner of this struct or array member.</param>
            <param name="newValue">The value object.</param>
            <returns>0 if everything went OK.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.UpdatedStructValue">
            <summary>Helper to update the value of a struct variable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.UpdatingStructValue">
            <summary>Called when updating the value of a struct variable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CalculateOffset(System.Int32[],BR.AN.PviServices.Value)">
            <summary>helper to calculate the offset </summary>
            <param name="indices">The indices.</param>
            <param name="pPviValue">The PVI value object.</param>
            <returns>The offset in the memory.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SetStructureMemberValue(BR.AN.PviServices.Value,System.Int32[])">
            <summary>Helper to update the structure members.</summary>
            <param name="value">The name of the variable</param>
            <param name="indices">The value object.</param>
            <returns>0 if everything went OK.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SetStructureMemberValue(System.String,BR.AN.PviServices.Value)">
            <summary>Helper to update the structure members.</summary>
            <param name="varName">The name of the variable</param>
            <param name="value">The value object.</param>
            <returns>0 if everything went OK.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.CleanupMemory">
            <summary>Helper to free extra allocated memory.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Remove">
            <summary>
            This method removes the instances references from the PviServices hierarchy.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.Remove(System.Object)">
            <summary>
            This method removes the instances references from the PviServices hierarchy.
            </summary>
            <param name="coll">The collection from where to remove the item.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.WriteScaling">
            <summary>
            This function writes the actual defined scaling points to
            the variable on the PLC.
            On response will fire the event PropertyChanged(... Action.VariableScalingChange)
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>
            Reads device configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ReadMemberVariables(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Variable)">
            <summary>
            Reads member variables from xml configuration file and updates var Object.
            
            Verifies if ConfigurationFlags.VariableMembers is set.
            This flag is removed if service object is connected.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="var">Variable Object to add members.</param>
        </member>
        <member name="M:BR.AN.PviServices.Variable.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.SaveVariableConfiguration(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Variable)">
            <summary>Saves the device configuration parameters to the configuration xml file.</summary>
            <param name="writer">The XML Writer used to save settings.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <param name="var">The variable instance for which to save the attributes.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetVariable(System.Int32[])">
            <summary>Gets an array element of type variable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.InitializeValue(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>Helpert to initialize a new value instance</summary>
            <param name="baseVal">The value to be used for initialization</param>
            <param name="newVal">The new value.</param>
            <returns>The value object wtih the correct data type info.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetMemberDataType(System.String)">
            <summary>Call this member to get the type code of this instance.</summary>
            <param name="name">The name of the struct member for which to get the data type.</param>
            <returns>The system type code for the specified struct member. If the runtime object is not initilized this method call will return System.TypeCode.Empty.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetMemberDataSize(System.String)">
            <summary>Call this member to get the size of the datatype of this instance.</summary>
            <param name="name">The name of the struct member for which to get the data type.</param>
            <returns>The size in bytes for the specified struct member. If the runtime object is not initilized this method call will return 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetMemberArrayLength(System.String)">
            <summary>Call this member to get the array length of this instance.</summary>
            <param name="name">The name of the struct member for which to get the data type.</param>
            <returns>The array length for the specified struct member. If the runtime object is not initilized this method call will return 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Variable.DeactivateInternal">
            <summary>Helper to deactivate the item.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Variable.getMemberName">
            <summary>Gets the name of the structure element if this variable is part of a complex data type.
            The name starts at the first nesting level.
            If you call this method for the root item you will get an empty string!</summary>
            <value>StructMemberName</value>
        </member>
        <member name="M:BR.AN.PviServices.Variable.GetStructMemberName(BR.AN.PviServices.Variable)">
            <summary>Gets the name of the structure element if this variable is part of a complex data type.
            The name starts at the first nesting level.
            If you call this method for the root item you will get an empty string!</summary>
            <value>StructMemberName</value>
        </member>
        <member name="E:BR.AN.PviServices.Variable.ValueChanged">
            <summary>
            Occurs when the Value of the processvariable changes
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.ValueWritten">
            <summary>
            Occurs when a value is written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.ValueRead">
            <summary>
            Occurs when a value is read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.ExtendedTypeInfoRead">
            <summary>
            Occurs when the extended typ information of a Variable has been read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.DataValidated">
            <summary>
            Occurs when value data is valid.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.Activated">
            <summary>
            Occurs when the variable-instance is activated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.Deactivated">
            <summary>
            Occurs when the variable-instance is deactivated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.Uploaded">
            <summary>
            Occurs when the instances members are uploaded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.ForcedOn">
            <summary>
            Occurs when the instances force state changes from OFF to ON (only for SG3)
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Variable.ForcedOff">
            <summary>
            Occurs when the instances force state changes from ON to OFF (only for SG3)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Item(System.Int32[])">
            <summary>Gets an array element of type variable.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Item(System.Int32)">
            <summary>Gets an array element of type variable.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Item(System.String)">
            <summary>
            Gets the subitem of a structure Variable
            </summary>
            /// <example>
            <code>
            Variable var = new Variable(cpuObj,"structVar");
            var.Connect(); // Upload is called automatically when Connected event occurs
            
            // Accessing variable member after upload
            Variable element = var["item1"];
            element.Connect();
            ...
            ...
            // Accessing a submember
            Variable subElement = var["stItem.subItem1"];
            subElement.Connect();
            ...
            ...
            </code>
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Variable.ExpandMembers">
            <summary>Gets or sets if mebers of a struct or array should be expanded.
            If set to false no Variable objects will be created. The binary data which is a byte array will be accessable directly.</summary>
            <value>ExpandMembers</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.RefreshTime">
            <summary>
            Gets or sets the refreshtime of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Hysteresis">
            <summary>
            Gets or sets the hysterese-value of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.IsConnected">
            <summary>Gets or sets the connection state of the PviServices object</summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.ReadOnly">
            <summary>Gets or sets wheter the varible is readonly or not. Instead of using this member you can also set the member Access to Access.Read.
            Allows read access to the process data of a variable object. 
            If this attribute is not specified, a read access to the variable data is rejected with Error 12035. 
            In addition, PVI Manager doesn't carry out any cyclic read requests.</summary>
            <value>ReadOnly</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.IECDataType">
            <summary>Gets the IEC compliant data type infomration.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Value">
             <summary>
             Gets the actually read value or sets the value
             of the processvariable depending on the <see cref="P:BR.AN.PviServices.Variable.WriteValueAutomatic"/> 
             property(Event: ValueWritten) 
             </summary>
             <remarks>
             <b>Accessing values (writing or reading) is raised always 
             by the variable object which is located on the left side 
             from the ".Value["..."]" property call. </b>
             For this reason it is <b>not possible</b> to set the value of a structure member on the plc
             by doing something like this:
             <code>
            	// Creating a new structur variable
             Variable stVar = new Variable(cpuObj,"stVar");
             stVar.Connect();
             ...
             ...
             // After Connected Event was raised
             Variable tmpMember = stVar["subSt.subElem_1"];
             tmpMember.Value = 23; // This does not work, because the "tmpMember" is not connected.
            	// Connecting the "tmpMember" object makes value accessing possible.
             </code>
             This works:
             <code>
             stVar.Value["subSt.subElem_1"] = 23;
             </code>
             </remarks>
             <example>
             This example describes using the ValueChanged event for structure variables
             <code>
             // Setting variable values:
             Variable var = new Variable(cpuObj,"globVar");
             var.Connect();
             
             var.Value = 22.45;
             
             
             // Setting structure member values:
             Variable structVar = new Variable(cpuObj,"stVar");
             structVar.Connect();
             
             structVar.WriteValueAutomatic = false;
             // Setting member values
             structVar.Value["elem_BOOL"] = true;
             structVar.Value["elem_SINT"] = 15;
             structVar.Value["elem_DINT"] = 345578;
             
             // Writing whole structure
             structVar.WriteValue();
             structVar.WriteValueAutomatic = true;
            
             //Reading values from structure elements using ValueChanged event
             Variable structVar = new Variable(cpuObj,"stVar");
             structVar.Connect();
             structVar.Active = true;
             structVar.ValueChanged += new VariableEventHandler(Var_ValueChanged);
             ...
             ...
             private void Var_ValueChanged(object sender, VariableEventArgs e)
             {
            		Variable tmpVar = (Variable)sender;
            		if (mpVar.Value.DataType == DataType.Structure )
            		{
            			// Iterating ChangedMembers property
            			foreach ( String strVar in e.ChangedMembers )
            			{
            				// Accessing values by string index -&gt; tmpVar.Value["subSt.subElem_INT"]
            				labelValueText.Text = tmpVar.Value[strVar].ToString();
            			}
            		}
            		...
            		...
             }
             
             </code>
             </example>
             <example>
             This example describes value accessing on variables of type structure.
             <code>
             // Creating a new variable which describes a structure with arraylenght 5 on the plc
             // (object"cpuObj" already connected)
             Variable structArr = new Variable(cpuObj,"stArray");
             // Creating a new variable which describes a simple structure on the plc
             Variable structSimple = new Variable(cpuObje,"struct");
             
             // Connecting each variable object
             struct.Connect();
             structArr.Connect();
             // Adding handler to Connected events
             struct.Connected +=new PviEventHandler(struct_Connected);
             structArr.Connected +=new PviEventHandler(structArr_Connected);
             ...
             ...
             private void struct_Connected(object sender, PviEventArgs e)
             {
            		// Reading values from structure variables by using the string indexer
            		Int32 myValue=null;
            		Variable tmpVar = (Varialbe)sender;
            		// Reading value from an element 
            		myValue = tmpVar.Value["elem_1"];
            		// Reading value from a subelement
            		myValue = tmpVar.Value["elem_2.subElem_1"];
            		// Reading value from a subelement which arraylength is 5
            		myValue = tmpVar.Value["elem_2.subElem_2[4]"];
             }
             ...
             ...
             // Reading values from variable objects of type structure which arraylength is bigger than 1
             // requires an expansion of the string indexer. For that it is necessary to insert the name
             // of the structure array + the indexer in brackets before the "normal" indexer string.
             private void structArr_Connected(object sender, PviEventArgs e)
             {
            		// Reading values from structure array variables by using the string indexer
            		Int32 myValue=null;
            		Variable tmpVar = (Varialbe)sender;
            		// Reading value from an element 
            		myValue = tmpVar.Value["stArray[0].elem_1"];
            		// Reading value from a subelement
            		myValue = tmpVar.Value["stArray[1].elem_2.subElem_1"];
            		// Reading value from a subelement which arraylength is 5
            		myValue = tmpVar.Value["stArray[2].elem_2.subElem_2[4]"];
             }
             </code>
             </example>
        </member>
        <member name="P:BR.AN.PviServices.Variable.InitialValue">
            <summary>Gets the INITIAL value from the PLC. Will be null as long no one calls ReadInitialValue or if the method fails.
            Do not mix up <seealso cref="P:BR.AN.PviServices.Variable.InitValue"/> with InitialValue!!!</summary>
            <value>Initial value from PLC.</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Members">
            <summary>Gets a collection of type <see cref="T:BR.AN.PviServices.MemberCollection"/> which holds all members of this variable.
            Does only return objects of the first nesting level.
            Use StructureMembers to get a hashtable of all objects.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.StructureMembers">
            <summary>Gets the hashtable of all structure members of this variable not only of the first nesting level like Members does.
            Do not add or remove objects to this hashtable.</summary>
            <value>StructureMembers</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.ForceValue">
            <summary>
            Gets or sets
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Active">
            <summary>
            Gets or sets the active state of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.WriteValueAutomatic">
            <summary>
            Gets or sets the WriteValueAutomatic state of this instance.
            </summary>
            <remarks>
            If this property is set true (default case) a value object is written
            automatically by assigning it to its connected variable object.
            </remarks>
            <example>
            For writing values to structure members it is useful to set this property false:
            <code>
            Variable structVar = new Variable(cpuObj,"stVar" );
            structVar.Connect();
            
            structVar.WriteValueAutomatic = false;
            // Setting member values
            structVar.Value["elem_BOOL"] = true;
            structVar.Value["elem_SINT"] = 15;
            structVar.Value["elem_DINT"] = 345578;
            
            // Writing whole structure
            structVar.WriteValue();
            structVar.WriteValueAutomatic = true;
            </code>
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Scope">
            <summary>
            Gets the scope of the instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.DataValid">
            <summary>
            Gets the state of the instances data.
            </summary>
            <remarks>
            For accessing values of an instance it is neccessary that DataValid
            is true.
            <code>
            Variable varArray = new Variable(cpuObj,"globArray");
            varArray.Connect();
            varArray.Active = true		// Set active = true to get data from the plc
            ..
            ..
            ..
            // Connection event received ...
            // Checking DataValid state
            if ( varArray.DataValid )
            	Int32 i = varArray.Value[3].ToInt32(null);
            </code>
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.Variable.RuntimeObjectIndex">
            <summary>
            Gets or sets the options for the RuntimeObjectIndex for INA2000.
            Use this options for arrays which have a start index != 0.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.FullName">
            <summary>
            Gets the FullName of this instance.
            <seealso cref="P:BR.AN.PviServices.Base.FullName"></seealso> 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.StructMemberName">
            <summary>Gets the name of the structure element if this variable is part of a complex data type.
            The name starts at the first nesting level.
            If you call this method for the root item you will get an empty string!</summary>
            <value>StructMemberName</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.PVRoot">
            <summary>Helper to acces the PV root of a struct or array</summary>
            <value>PVRoot</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Parent">
            <summary>
            Gets the parent object of this instance (Parent types Cpu, Task or Service)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Convert">
            <summary>
            Gets or sets the Convert class of the Variable Value
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.InitValue">
            <summary>Gets or sets the value which is used for the creation command.
            Will not be used if not set or empty. You must not mix up InitValue with <seealso cref="P:BR.AN.PviServices.Variable.InitialValue"/> .</summary>
            <value>InitValue</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.CastMode">
            <summary>This is a combination of the supported cast / conversion modes. 
            Combine the different modes by using the logical OR operator.
            The cast mode parameter is a bit coded. 
            The adjustable conversion modes are represented by a bit within the bit list:
            Bit 0 (Value: 1) PG2000 or AS 1.3 - String variable:
            If the process object data format defines a i8 or u8 array (1 byte array), then the process data is regarded as a single variable of type string (VT=string) during data conversion.
            When reading the data format (access type TYPE or event "data format change"), "string" is returned as a variable type (i.e. actual data format = "VT=i8 VL=1 VN=24 CM=1" -> returned data format VT=string VL=24 VN=1). The parameter CM=1 must be specified in the process object for this. If CM=1 is only specified in the link object, then the actual data format is returned.
            Note: This conversion mode is provided for "old" PG2000 or AS 1.3 applications. New applications should not use these conversion parameters; rather, a String variable should also be defined as a String variable in the PLC.
            Bit 1 (Value: 2) Determines the way numbers appear in the string when converting from variable type String ("VT=string") to variable type Integer ("VT=i8, VT=u32"). 
            Decimal mode is not active (bit=0):
            A string with leading 0 places is interpreted as octal (i.e. -077, 0012). 
            If the string begins with "0x" or "0X", then the following places are interpreted as hexadecimal (i.e. 0x1f, -0x56a9, 0xA3). 
            In all other cases, the string is interpreted as decimal. 
            Decimal mode is active (bit = 1): 
            The string is always interpreted as decimal. In other words, a string with leading zeroes is interpreted as decimal; "0x123" (hexadecimal) cannot be interpreted.
            Bit 2 (Value: 4) Determines the behavior of a variable when the value range is violated. 
            A value range violation occurs if a number value cannot be represented in a variable. 
            Example: The value 130 cannot be represented in a variable of type i8 (value range: -128 to 127), 
            but rather in a variable of type u8 (value range: 0 to 255). If link objects and process objects use variable types of different value ranges, then a value range violation can occur in read or write direction (i.e. variable type in the link object i32 and in the process object i16, or variable type in the connection object i8 and in the process object u8). 
            Value range monitoring is not active (bit=0):
            Group type behavior during data conversion:
            Group type Integer to a variable type Integer with a smaller value range: The number is truncated binary. 
            Group type Float to a variable type with a smaller value range: In the number is not representable in the value range, then the result is undefined. 
            Group type String to a variable type Float or Integer: If the number is not representable in the value range, then the result is undefined. 
            Group type Float or Integer to variable type String: If the converted String is longer than the length of the string variable (parameter "VL"), then the string is truncated. 
            Value range monitoring is active (bit=1):
            The behavior during active value range monitoring is the same as the behavior of limit monitoring (see "Scaling and Limiting").
            Behavior when a violation of the value range occurs depends on the transfer direction:
            Writing variable data (PviWrite): Write tasks are halted when an error occurs. Data is not written to the PLC variable. Error code 12014 is returned in the write response. Additionally, the maximum representable value is returned with the write response and is sent to the application in the event data buffer (if specified) for function "PviWrite" or "PviWriteResultResponse". 
            Reading variable data (PviRead or data change event): The maximum representable value is sent instead of the variable data. An error message is not given. 
            In both cases, the respective retVal flags for Cast-overflow or Cast-underflow are set in the response info data (structure T_RESPONSE_INFO). Additional information concerning the response info data can be found in the "PviGetResponseInfo" function or the callback function SET_PVICALLBACK_DATA.
            Monitoring of limits is also carried out for String variable types ("VT=string"). A limit violation occurs when the string data is longer then the buffer size of the variables. Example: A string "abcdefg"+ terminating null cannot be put completely into a variable with the data format "VT=string VL=4".
            The retVal flag Cast-Overflow is set when a violation of the string limit or a violation in the positive value range of a numeric variable occurs. Cast-Underflow can only occur in connection with numeric variables with a negative value range (signed Integer, Float). A violation of the negative value range is signaled in this case. In non-interpretable characters are contained in a string which is to be converted to another variable type, this is handled like a string limit violation.
            Bit 3 (Value: 8) Determines the type of conversion of variable type Float ("VT=f32 ...") to variable type Integer ("VT=i8, VT=u32 ..."). 
            Rounding mode is not active (bit=0):
            All places behind the decimal point of a Float are truncated. Example:  1.3 -> 1,  -15.5 -> -15,  0.9999 -> 0.
            Rounding mode is active (bit = 1):
            All places behind the decimal point of a Float are rounded (4/5). Example:  1.3 -> 1,  -15.5 -> -16,  0.9999 -> 1.
            Default / standard conversion = 0.</summary>
            <value>This is a combination (logical OR) of the supported cast modes.</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.BitOffset">
            <summary>The offset used for bitwise access to the variable. This parameter equals the Pvi VA parameter.
            Variable addressing. Default: -1 No variable addressing
             Using variable addressing, link objects can address subsets from the process data of a variable object. 
             Bit addressing:
             With bit addressing, an individual bit is defined an integer variable. In the link object, the data format of the single variable or array must be defined with variable type Boolean (VT=boolean) or to a type which can be converted to Boolean. The variable object must have variable type Integer (signed or unsigned). The bit number is specified with the VA parameter. The bit number begins with 0 at the lowest valued bit.
             Example: "VT=boolean VA=2" - addresses Bit 2.
             If the variable object is an array of Integers, then a Boolean array can also be defined in the link object. Bit addressing is then carried out for each individual array.</summary>
            <value>BitOffset</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.ChangedStructMembers">
            <summary>Gets the array of names of the changed members if this variable is a struct or array.</summary>
            <value>ChangedStructMembers is the array of names of the members which have changed since the last read or value changed event.</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.StructName">
            <summary>Gets the name of the structure if the variable is of type struct.</summary>
            <value>StructName is the name of the structure on the PLC if it is a structure else it returns null.</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Cpu">
            <summary>get the Cpu object.</summary>
            <value>Cpu</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.DataAlignment">
            <summary>Gets the alignment for structures. This is the alignment of the structure on the PLC only!!!</summary>
            <value>DataAlignment</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Access">
            <summary>Gets or sets the access type of this variable object.
            Object attributes control the approach when acquiring and handling process data of variable objects. 
            Use OR to combine the different access types.</summary>
            <remarks>If the property "Polling" is set to "false" Access.EVENT will be add to "Access" else the flag will be removed.
            If the property "ReadOnly" is set to true Access.Write will be removed from property "Access" else will be add.</remarks>
            <value>Access</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Polling">
            <summary>Gets or sets the Polling state of the instance.
            Operating mode as a line or PLC event variable. 
            If "false" monitoring for changes in the process data is carried out in the line or on the PLC. 
            For this reason, PVI Manager doesn't need to carry out any cyclic read requests.</summary>
            <value>Polling</value>
        </member>
        <member name="P:BR.AN.PviServices.Variable.Scaling">
            <summary>
            Gets or sets a Scaling object for value manipulation
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.IODataPoints">
            <summary>The collection of IO data points.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Variable.UserTag">
            <summary>
            Gets or sets user specific information of type string
            for interaction between server and client variables
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Variable.ROIoptions">
            <summary>Options for the ROI options in INA2000.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Variable.ROIoptions.OFF">
            <summary>The ROI is OFF. (/ROI=1). Assume all arrays will be zero based addressed.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Variable.ROIoptions.NonZeroBasedArrayIndex">
            <summary>If start index of an Array != 0 you will have to use this option to be able to address non zero based.</summary>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.#ctor(BR.AN.PviServices.Cpu,System.String,BR.AN.PviServices.IOVariableTypes)">
            <summary>Initializes a new Instance of an IO variable object</summary>
            <param name="cpu">Cpu-object</param>
            <param name="ioName">the name of the IO address.</param>
            <param name="ioType">the type of IO variable (CONSUMER, PRODUCER or FORCE).</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.Disconnect(System.UInt32,System.Boolean)">
            <summary>Helper for to stop the PLC connection of the object.</summary>
            <param name="internalAction">The action parameter.</param>
            <returns>0 if successful else an error code.</returns>
            <param name="noResponse">Do we want a response or not. Default the response will be sent.</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.InternalWriteIOValue">
            <summary>Writes the instances actual value.</summary>
            <remarks>The event Value notifies, that the value was successful written.</remarks>
            <returns>0 if successful.</returns>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.WriteIOValue(BR.AN.PviServices.Value)">
            <summary>Helper to write the IO value</summary>
            <param name="val">the new value</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.GetLinkParameters(BR.AN.PviServices.ConnectionType,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Gets the link object parameters for this variable.</summary>
            <param name="conType">The type of connection.</param>
            <param name="dt">The data type.</param>
            <param name="fs">Scaling function.</param>
            <param name="lp">The LPARAM as string.</param>
            <param name="va">The variable addressing string.</param>
            <param name="cm">The CAST mode string.</param>
            <param name="vL">The number of bytes (the length.</param>
            <param name="vN">The number of elements.</param>
            <returns>The PVI link parameters.</returns>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.GetEventMaskParameters(BR.AN.PviServices.ConnectionType,System.Boolean)">
            <summary>gets the event mask for this variable depending on the state of the variable.</summary>
            <param name="conType">The type of connection.</param>
            <param name="useParamMarker">If set to true the parameter will be something like EV=ed, else ed.</param>
            <returns>The even mask string for PVI.</returns>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.GetObjectParameters(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Gets the object parameters for this variable object.</summary>
            <param name="rf">Refresh time.</param>
            <param name="hy">Hysteresis.</param>
            <param name="at">Access Attributes.</param>
            <param name="fs">Scaling function.</param>
            <param name="ut">The user tag.</param>
            <param name="dt">Datatype (required for internal PVs)</param>
            <param name="vL">The number of bytes (the length.</param>
            <param name="vN">The number of elements.</param>
            <returns>The PVI appropriate object parameter string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnValueChanged(BR.AN.PviServices.VariableEventArgs)">
            <summary>
            The function is called when the instances value was changed. The function raises the ValueChanged event.
            </summary>
            <param name="e">VariableEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnValueWritten(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances value was changed. The function raises the ValueWritten event. 
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnValueRead(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances value was read. The function raises the ValueRead event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnActivated(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances activation succeeded. The function raises the Activated event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.IOVariable.OnDeactivated(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when the instances deactivation succeded. The function raises the Deactivated event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="E:BR.AN.PviServices.IOVariable.StatusChanged">
            <summary>Occurs when this instance status has changed.</summary>
        </member>
        <member name="P:BR.AN.PviServices.IOVariable.IOType">
            <summary>Gets the IO variable type. Consumer and producer variables are read only!</summary>
            <value>IOType</value>
        </member>
        <member name="P:BR.AN.PviServices.IOVariable.Force">
            <summary>Not supported </summary>
        </member>
        <member name="T:BR.AN.PviServices.LibraryType">
            <summary>Enumeration of availabel library types.</summary>
        </member>
        <member name="F:BR.AN.PviServices.LibraryType.Intern">
            <summary>internal</summary>
        </member>
        <member name="F:BR.AN.PviServices.LibraryType.Extern">
            <summary>external</summary>
        </member>
        <member name="T:BR.AN.PviServices.Library">
            <summary>Basic implementaion of the PVI Library class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Library.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>Initializes a new instance of the Library class.</summary>
            <param name="cpu">the parent object.</param>
            <param name="name">The name of the library.</param>
        </member>
        <member name="M:BR.AN.PviServices.Library.Disconnect(System.Int32)">
            <summary>Not supported </summary>
            <param name="internalAction">The action parameter</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Library.UploadFunctions">
            <summary>Method to request the upload for the library functions.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Library.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Library.OnFunctionsUploaded(BR.AN.PviServices.PviEventArgs)">
            <summary>Virtual member called whenever the function upload completed.</summary>
            <param name="e">The event parameters <see cref="T:BR.AN.PviServices.PviEventArgs"/></param>
        </member>
        <member name="M:BR.AN.PviServices.Library.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Library.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>
            Reads configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Library.Functions">
            <summary>Get the functions.</summary>
            <value>Functions</value>
        </member>
        <member name="P:BR.AN.PviServices.Library.Type">
            <summary>Get the typ of the library.</summary>
            <value>Type</value>
        </member>
        <member name="P:BR.AN.PviServices.Library.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Library.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Library.Cpu">
            <summary>Get access to  the parent CPU object.</summary>
            <value>Cpu</value>
        </member>
        <member name="E:BR.AN.PviServices.Library.FunctionsUploaded">
            <summary>Event handler called when functions have been uploaded.</summary>
            <seealso cref="T:BR.AN.PviServices.PviEventHandler"/>
        </member>
        <member name="T:BR.AN.PviServices.Function">
            <summary>Basic implementation of a library function description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Function.#ctor(BR.AN.PviServices.Library,System.String)">
            <summary>Initializes a new instance of the Function class.</summary>
            <param name="library">The reference to the library.</param>
            <param name="name">The name of the function.</param>
        </member>
        <member name="P:BR.AN.PviServices.Function.Name">
            <summary>Gets the Name of the function.</summary>
            <value>Name</value>
        </member>
        <member name="P:BR.AN.PviServices.Function.Library">
            <summary>Gets access to the library containing this function.</summary>
            <value>Library</value>
        </member>
        <member name="P:BR.AN.PviServices.Function.Reference">
            <summary>Gets the reference.</summary>
            <value>Reference</value>
        </member>
        <member name="T:BR.AN.PviServices.LibraryCollection">
            <summary>Implements a collection of Library objects.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>Initializes a new instance of the LibraryCollection class.</summary>
            <param name="cpu">The parent object.</param>
            <param name="name">The name of the object.</param>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.Add(BR.AN.PviServices.Library)">
            <summary>Add the library object to the collection.</summary>
            <param name="library">The library module.</param>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.Upload">
            <summary>Request the upload for the library.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.Connect">
            <summary>Connects each collection object.</summary>
            <remarks>The event Connected notifies that the connection of all elements succeded.</remarks>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>Connects each collection object using the ConnectionType property.</summary>
            <remarks>The Connected event notifies each successful created connection.</remarks>
            <param name="connectionType">ConnectionType</param>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when an error occured.
            This method raises the Error event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.LibraryCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="P:BR.AN.PviServices.LibraryCollection.Service">
            <summary>
            Gets the Service object of the collections parent
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.LibraryCollection.Item(System.String)">
            <summary>Indexer function.</summary>
            <param name="name">The name used as indexer.</param>
            <returns>The Library if the name is valid else NULL.</returns>
        </member>
        <member name="T:BR.AN.PviServices.APIFCerrtyp">
            <summary>Types of erros for AR Versions previous A285.</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFCerrtyp.APIFC_ET_EXCEPTION">
            <summary>0 ... System error / Exception.</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFCerrtyp.APIFC_ET_FATAL">
            <summary>1 ... Fatal error.</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFCerrtyp.APIFC_ET_WARNING">
            <summary>2 ... Warning.</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFCerrtyp.APIFC_ET_INFO">
            <summary>3 ... Information.</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFCerrtyp.APIFC_ET_USER_FATAL">
            <summary>129 ... USER-entry fatal error.</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFCerrtyp.APIFC_ET_USER_WARNING">
            <summary>130 ... USER-entry warning.</summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_RLogbookRes_entry">
            <summary> 
             {secret}
            This structure implements the layout of an old style log book entry. ( previous to AR Version A285)</summary>
        </member>
        <member name="T:BR.AN.PviServices.AnyRadix">
            <summary>This class implements the "Ra" formatting code. An instance of this
            class should be passed to methods requiring an IFormatProvider.</summary>
        </member>
        <member name="M:BR.AN.PviServices.AnyRadix.GetFormat(System.Type)">
            <summary>This method returns an object that implements ICustomFormatter  to do the formatting. </summary>
            <param name="argType">The argument type.</param>
            <returns>An object that implements ICustomFormatter  to do the formatting</returns>
        </member>
        <member name="M:BR.AN.PviServices.AnyRadix.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>This method does the formatting only if it recognizes the format codes. </summary>
            <param name="formatString">The format string.</param>
            <param name="argToBeFormatted">The value to be formated.</param>
            <param name="provider">The format provider.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:BR.AN.PviServices.LogBookEntry">
            <summary>Summary description for LogBookEntry.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LogBookEntry.#ctor(BR.AN.PviServices.APIFC_RLogbookRes_entry)">
            <summary>Initializes a new instance of the internal LogBookEntry class.</summary>
            <param name="eLog"></param>
        </member>
        <member name="M:BR.AN.PviServices.LogBookEntry.EqualsTo(BR.AN.PviServices.LoggerEntry)">
            <summary>Helper to check if the given logger entry equals this instance.</summary>
            <param name="lEntry">The logger entry to compare to.</param>
            <returns>true if the two entries do match else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LogBookEntry.GetHexRepresentation(System.UInt32)">
            <summary>The hexadecimal representation of the value.</summary>
            <param name="eInfo">The error info.</param>
            <returns>The hexadecimal representation of the value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LogBookEntry.T5TimeStampToDT(BR.AN.PviServices.APIFC_RLogbookRes_entry)">
            <summary>Call this method to build a DateTime instance based on a T5 time representation.</summary>
            <param name="eLog">The logbook entry.</param>
            <returns>A DateTime representation of the logbook entries time stamp.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LogBookEntry.GetTaskName(BR.AN.PviServices.APIFC_RLogbookRes_entry)">
            <summary>Helper to get the task name.</summary>
            <remarks>Returns the error task number if task name can not be evaluated.</remarks>
            <param name="eInfo">The error information object.</param>
            <returns>The name of the task.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LogBookEntry.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LogBookEntry.Dump">
            <summary>Dum all properties</summary>
        </member>
        <member name="T:BR.AN.PviServices.LoggerEventHandler">
            <summary>Basic delegate for logger events.</summary>
            <param name="sender">The sending object.</param>
            <param name="e">The event parameter object.</param>
        </member>
        <member name="T:BR.AN.PviServices.LoggerEventArgs">
            <summary>Basic implementation of logger event parameters.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.LoggerEntryCollection)">
            <summary>Initializes a new instance of the LoggerEventArgs class.</summary>
            <param name="name">The name of the logger.</param>
            <param name="address">The physical address of the object.</param>
            <param name="error">The error code.</param>
            <param name="language">The language code.</param>
            <param name="action">The action.</param>
            <param name="entries">The collection of logger entries.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEventArgs.#ctor(BR.AN.PviServices.LoggerEventArgs,BR.AN.PviServices.Action)">
            <summary>Initializes a new instance of the LoggerEventArgs class.</summary>
            <param name="e">The event arguments.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEventArgs.Entries">
            <summary>Gets the collection of logger entries.</summary>
            <value>Entries</value>
        </member>
        <member name="T:BR.AN.PviServices.LoggerCollectionEventArgs">
            <summary>
            An instance of this class defines additional eventinformation for logger objects
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollectionEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.LoggerCollection)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="loggerMods">Logger list</param>
        </member>
        <member name="P:BR.AN.PviServices.LoggerCollectionEventArgs.Loggers">
            <summary>
            Gets a collection of referenced objects
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.LoggerCollection">
            <summary>Implementation of a collectio of logger module objects.</summary>
            <remarks>This collection does not care about SG3 or SG4 logger modules. The collection treats them as Logger objects.</remarks>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.#ctor(System.Object,System.String)">
            <summary>Initializes a new instance of the LoggerCollection class.</summary>
            <param name="parent">The parent object.</param>
            <param name="name">The name of the logger collection.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.LoggerListFromCB(System.Int32,System.IntPtr,System.UInt32,System.Boolean)">
            <summary>Reads the ModuleInfoList from CallbackData</summary>
            <param name="errorCode">The error number.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="isANSL">Is it an ANSL connection or NOT.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Disconnect(System.Boolean)">
            <summary>Disconnects each Module object of the collection.</summary>
            <remarks>The Disconnected event notifies each successful aborted connection.</remarks>
            <param name="noResponse">If true the object will not receive a response for the request!</param>      
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.CleanUpOnDispose(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Load(System.IO.StreamReader)">
            <summary>
            This method loads logger entries from a stream.
            </summary>
            <param name="stream">StreamReader object</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Load(System.String)">
            <summary>
            This method loads logger entries from a xml file.
            </summary>
            <param name="xmlFile">An absolute path for a xml file</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Save(System.String)">
            <summary>Call this member to save the logger entries to a file.</summary>
            <param name="file">The file name.</param>
            <returns>0 if everything went OK else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Remove(System.String)">
            <summary>Helper to remove a arrayList item by specifying the name of the module.</summary>
            <param name="key">The name of the module.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Add(BR.AN.PviServices.Logger)">
            <summary>Add the logger to the collection.</summary>
            <param name="logger">The reference of the logger module to add.</param>
            <returns>The position where the logger has been add.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.OnLoggerUploaded(BR.AN.PviServices.Logger,BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnLoggerUploaded is called when a task object within the collection was uploaded 
            from the plc. The function raises the Uploaded event
            </summary>
            <param name="logMod">Task object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.Upload">
            <summary>Call this method to upload the logger modules.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.UpdateLoggerList">
            <summary>Updates ModuleList for the Logger</summary>
            <returns>0 on success, -1 if request already set, -2 if cpu is not connected</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.OnError(BR.AN.PviServices.CollectionEventArgs)">
            <summary>The function is called when an error occurs. The function raises the Error event of the instances parent.</summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.OnCollectionUploaded(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all collection upload requests are responded.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.DiagnosticModeUpdateModuleInfo(BR.AN.PviServices.APIFC_DiagModulInfoRes,System.Int32,System.Int32@)">
            <summary>Updates logger info for a single object of this collection.</summary>
            <param name="diagModInfo">The diagnostic info for the module.</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <returns>0, on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.EmptyCollection">
            <summary>Helper to remove all elements</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.UpdateLoggerInfo(BR.AN.PviServices.APIFC_ModulInfoRes,System.Int32,System.Int32@)">
            <summary>Updates Module Info for a single element</summary>
            <param name="moduleInfoStruct">The ModuleInformation</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <returns>0, on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerCollection.UpdateLoggerInfo(BR.AN.PviServices.ModuleInfoDecription,System.Int32,System.Int32@)">
            <summary>Updates Module Info for a single element</summary>
            <param name="moduleInfoStruct">The ModuleInformation</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <returns>0, on success</returns>
        </member>
        <member name="E:BR.AN.PviServices.LoggerCollection.LoggerUploaded">
            <summary>Occurs when the Module from the plc is uploaded</summary>
        </member>
        <member name="E:BR.AN.PviServices.LoggerCollection.CollectionUploaded">
            <summary>Occurs when all upload requests of each object are responded.</summary>
        </member>
        <member name="P:BR.AN.PviServices.LoggerCollection.Service">
            <summary>
            Gets the Service object of the collections parent
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.LoggerCollection.Item(System.String)">
            <summary>
            Gets a Task object by its index.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.LoggerCollection.ModuleCreated">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.LoggerCollection.ModuleChanged">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.LoggerCollection.ModuleDeleted">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.LoggerEntry">
            <summary>Derived implementation of properties describing a logger entry on th PLC.</summary>
        </member>
        <member name="T:BR.AN.PviServices.LoggerEntryBase">
            <summary>Base Implementation of properties describing a logger entry on th PLC.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.Initialize(System.Object,System.DateTime,System.Boolean,System.Boolean)">
            <summary>Initializes the instance</summary>
            <param name="parent">The parent object.</param>
            <param name="dateTime">The time stamp</param>
            <param name="addKeyOnly">the flag indicating wheter to get the global ID and the time stamp for the key or not.</param>
            <param name="reverseOrder">the flag indicating wheter to generate a key in reverse order or not. (increment id or decrement id)</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.#ctor">
            <summary>Initializes the instance</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.#ctor(System.DateTime)">
            <summary>Initializes the instance</summary>
            <param name="dateTime">The date and time.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.#ctor(System.Object,System.DateTime)">
            <summary>Initializes the instance</summary>
            <param name="parent">The parent object.</param>
            <param name="dateTime">The date and time.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.#ctor(System.Object,System.DateTime,System.Boolean,System.Boolean)">
            <summary>Initializes the instance</summary>
            <param name="parent">The parent object.</param>
            <param name="dateTime">The date and time.</param>
            <param name="addKeyOnly">the flag indicating wheter to get the global ID and the time stamp for the key or not.</param>
            <param name="reverseOrder">the flag indicating wheter to generate a key in reverse order or not. (increment id or decrement id)</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.Finalize">
            <summary>Initializes the instance</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.LevelToString(System.Int32,System.Int32)">
            <summary>Convert error level to string.</summary>
            <param name="levelType">The error level.</param>
            <param name="error">The error number.</param>
            <returns>The converted error level.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.DateTimeToString">
            <summary>Convert the error timestamp to string.</summary>
            <returns>The formatted error time stamp.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.BinaryToString">
            <summary>Helper to get the string representation of the binary data for this logger entry.</summary>
            <returns>The string representation of the binary data.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.UpdateUKey">
            <summary>Helper to update the entry KEY</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryBase.UpdateUKey(System.UInt64)">
            <summary>Helper to update the entry KEY</summary>
        </member>
        <member name="F:BR.AN.PviServices.LoggerEntryBase.propLoggerModuleName">
            <summary>The name of the logger module.</summary>
        </member>
        <member name="E:BR.AN.PviServices.LoggerEntryBase.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.LevelType">
            <summary>Gets the LevelType</summary>
            <value>LevelType</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.DateTime">
            <summary>Gets the DateTime</summary>
            <value>DateTime</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.ErrorNumber">
            <summary>Gets the ErrorNumber</summary>
            <value>ErrorNumber</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.ErrorInfo">
            <summary>Gets the ErrorInfo</summary>
            <value>ErrorInfo</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.ModuleIndex">
            <summary>Gets the index of the module.</summary>
            <value>ModuleIndex</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.TaskIndex">
            <summary>Gets the index of the last active cyclic task.</summary>
            <value>TaskIndex</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.CodeOffset">
            <summary>Gets the code offset where the error occured</summary>
            <value>CodeOffset</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.Task">
            <summary>Gets the Task</summary>
            <value>Task</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.ErrorDescription">
            <summary>Gets the ErrorDescription</summary>
            <value>ErrorDescription</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.ErrorText">
            <summary>Gets the ErrorText</summary>
            <value>ErrorText</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.Binary">
            <summary>Gets the Binary</summary>
            <remarks>Binary</remarks>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.Exception">
            <summary>Gets the Exception</summary>
            <value>Exception</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.ID">
            <summary>Gets the </summary>
            <value>ID</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.Key">
            <summary>Gets the key as string.</summary>
            <value>Key</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.UniqueKey">
            <summary>Gets the key of the logger entry.</summary>
            <value>UniqueKey</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.InternId">
            <summary>Gets the internal identifier.</summary>
            <value>InternId</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.LoggerModule">
            <summary>Gets the LoggerModule</summary>
            <value>LoggerModule</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.LoggerModuleName">
            <summary>Gets the name of module the entry logger entry belongs to.</summary>
            <value>LoggerModuleName</value>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryBase.Service">
            <summary>Gets the Service</summary>
            <value>Service</value>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.#ctor(System.Object,System.DateTime)">
            <summary>Initializes the instance</summary>
            <param name="parent">The parent object.</param>
            <param name="dateTime">The date and time.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.#ctor(System.Object,System.String,System.DateTime,System.Boolean)">
            <summary>Initializes the instance</summary>
            <param name="parent">The parent object.</param>
            <param name="loggerName">The name of the logger module.</param>
            <param name="dateTime">The date and time.</param>
            <param name="arLess2850">Is the logger entry from an SG3 or SG4 target. If true the logger entry is from an SG3 or SGC target.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.#ctor">
            <summary>Initializes the instance</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.#ctor(System.String,BR.AN.PviServices.LogBookEntry)">
            <summary>Initializes a new instance of the internal LoggerEntry class.</summary>
            <param name="arV">The runtime version.</param>
            <param name="eLog">The logger entry from the PLC</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.#ctor(BR.AN.PviServices.ErrorLogBook,BR.AN.PviServices.LogBookEntry,System.Int32,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the internal LoggerEntry class.</summary>
            <param name="parent">The Parent object reference</param>
            <param name="eLog">The logger entry from the PLC</param>
            <param name="internalid">the logger id.</param>
            <param name="addKeyOnly">the flag indicating wheter to get the global ID and the time stamp for the key or not.</param>
            <param name="reverseOrder">the flag indicating wheter to generate a key in reverse order or not. (increment id or decrement id)</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.#ctor(BR.AN.PviServices.Cpu,BR.AN.PviServices.LogBookEntry,System.Int32,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the internal LoggerEntry class.</summary>
            <param name="cpu">The Parent object reference</param>
            <param name="eLog">The logger entry from the PLC</param>
            <param name="internalid">the logger id.</param>
            <param name="addKeyOnly">the flag indicating wheter to get the global ID and the time stamp for the key or not.</param>
            <param name="reverseOrder">the flag indicating wheter to generate a key in reverse order or not. (increment id or decrement id)</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.UpdateForSGx(BR.AN.PviServices.LogBookEntry,System.Boolean)">
            <summary>
            SG4 Targets:
            ***************
            	1.) TYP_EXCEPTION: 
            				Extended Information == "PC"  -->> entry.ErrorText
            				-> Info (4 Byte) beschreibt den ProgramCounter (PC) -->> entry.Binary bzw. auch in  -->> exception.ProcessorData.ProgramCounter
            				 
            				 ansonsten  Extended Information == Name des exceptionverursachenden BR Moduls -->> entry.ErrorText bzw auch in -->> backtrace.PCInfo.ModuleName
            				 -> Info beschreibt Codeoffset -->> backtrace.PCInfo.CodeOffset bzw. auch in  -->> entry.Binary
            AppendSGxErrorInfo:
            -------------------------------
            	2.) TYP_INFO: 
            			Extended Information == Name des zuletzt aktiven zyklischen SPS-Task -->> backtrace.funcname (= einziger Platzhalter, wo ein String hineinpasst)
            			
            SG3 Targets:
            ***************
            	1.) TYP_EXCEPTION: 
            			Extended Information  -->> entry.ErrorText
            			Info (4 Byte) beschreibt die Exception-Zugriffsadresse -->> entry.Binary
            AppendSGxErrorInfo:
            -------------------------------
            	2.) erster TYP_INFO:
            			-> Info (4 Byte) beschreibt den ProgramCounter (PC)   -->> exception.ProcessorData.ProgramCounter
            	3.) zweiter TYP_INFO:
            			HIGH-WORD der Info == Modulindex 
            			Frage: aus dem Modulindex den Namen des Moduls ermitteln?
            					falls ja: 	Modulname  -->> entry.ErrorText bzw auch in -->> backtrace.PCInfo.ModuleName
            					falls nein: Modulindex -->> backtrace.Info
            			LOW-WORD der Info == Codeoffset -->> backtrace.PCInfo.CodeOffset
               4.) dritter TYP_INFO:
            		Extended Information == Name des zuletzt aktiven zyklischen SPS-Task -->> backtrace.funcname (= einziger Platzhalter, wo ein String hineinpasst)</summary>
            <param name="entry">The logger entry</param>
            <param name="sg4">Is it an SG4 target or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.AppendSGxErrorInfo(BR.AN.PviServices.LogBookEntry,System.Boolean)">
            <summary>
            For SG4 Targets:
            ********************
              This will only happen if the exceptions origin is a cyclic task, a system module or a library
              The info contains the name of the last cyclic task.
            
            
            For SG3 Targets:
            ********************
              The info of the first entry contains the program counter. The module gets the name PC.
              
              If the exception was caused by a BR module there will be further error info entries!
            INFO_2
               HIGHWORD of info contains the module index. 
               The LOWWORD contains the code offset from the BR module which caused the exception.
            INFO_3
               HIGHWORD of info contains the module index of the active cyclic PLC task if the origin of the exception is not in the active module.
               e.g.: Exception in library mylib but the last active task is mytask1
               The LOWWORD will always be zero.
            </summary>
            <param name="entry">The error info entry.</param>
            <param name="sg4">Is it an SG4 target or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.T5TimeStampToDT(BR.AN.PviServices.APIFC_RLogbookRes_entry)">
            <summary>Call this method to build a DateTime instance based on a T5 time representation.</summary>
            <param name="eLog">The logbook entry.</param>
            <returns>A DateTime representation of the logbook entries time stamp.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.GetTaskName(BR.AN.PviServices.APIFC_RLogbookRes_entry)">
            <summary>Helper to get the task name.</summary>
            <remarks>Returns the error task number if task name can not be evaluated.</remarks>
            <param name="eInfo">The error information object.</param>
            <returns>The name of the task.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.Dump">
            <summary>Dum all properties</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntry.GetExceptionData">
            <summary>
            Beschreibung aus http://bratgrazpdc1/project%20info/AS_diagnosetools/AR-Logger/AR-Logger-Spezifikation.htm#Infoflags
            Die AR Logger Daten werden in binaerer Form im AR Logger BR Modul abgelegt.
            Prinzipiell besteht ein Logeintrag aus einem fixen und einem variablen Teilbereich. 
            Der Fixteil (= Header) eines Logeintrags besteht aus 88 Bytes (+ 4 Byte Fehlerinfo fuer alte Logeintraege)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntry.ARlessA2850">
            <summary>Gets if the entry is an log entry from the ErrorLogBook.</summary>
            <value>ARlessA2850 if true, the Logger entry has the old style format. (its an ErrorLogBook entry)</value>
        </member>
        <member name="T:BR.AN.PviServices.ExcInfoFlag">
            <summary>Enumeration of available exception types.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ExcInfoFlag.Func">
            <summary>1 ... function exception</summary>
        </member>
        <member name="F:BR.AN.PviServices.ExcInfoFlag.Callstack">
            <summary>2 ... callstack exception</summary>
        </member>
        <member name="F:BR.AN.PviServices.ExcInfoFlag.PC">
            <summary>4 ... PC exception</summary>
        </member>
        <member name="T:BR.AN.PviServices.LevelType">
            <summary>Defines the level type of an entry</summary>
        </member>
        <member name="F:BR.AN.PviServices.LevelType.Info">
            <summary>1 ... info</summary>
        </member>
        <member name="F:BR.AN.PviServices.LevelType.Warning">
            <summary>2 ... warning</summary>
        </member>
        <member name="F:BR.AN.PviServices.LevelType.Fatal">
            <summary>3 ... fatal error</summary>
        </member>
        <member name="F:BR.AN.PviServices.LevelType.Debug">
            <summary>4 ... debug error</summary>
        </member>
        <member name="T:BR.AN.PviServices.ExceptionType">
            <summary>Enumeration of exception types.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ExceptionType.Processor">
            <summary>1 ... Processor exception</summary>
        </member>
        <member name="F:BR.AN.PviServices.ExceptionType.System">
            <summary>2 ... System exception</summary>
        </member>
        <member name="T:BR.AN.PviServices.ProcessorData">
            <summary>Basic implementaion of processor data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ProcessorData.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ProcessorData.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ProcessorData.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.ProcessorData.ProgramCounter">
            <summary>Gets the number of programs.</summary>
            <value>ProgramCounter</value>
        </member>
        <member name="P:BR.AN.PviServices.ProcessorData.EFlags">
            <summary>Gets the error flags.</summary>
            <value>EFlags</value>
        </member>
        <member name="P:BR.AN.PviServices.ProcessorData.ErrorCode">
            <summary>Gets the error code.</summary>
            <value>ErrorCode</value>
        </member>
        <member name="T:BR.AN.PviServices.TaskData">
            <summary>Basic implementaion of processor data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskData.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskData.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskData.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.Id">
            <summary>Gets the Id</summary>
            <value>Id</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.Priority">
            <summary>Gets the Priority</summary>
            <value>Priority</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.Name">
            <summary>Gets the Name</summary>
            <value>Name</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.StackBegin">
            <summary>Gets the StackBegin</summary>
            <value>StackBegin</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.StackEnd">
            <summary>Gets the StackEnd</summary>
            <value>StackEnd</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterEAX">
            <summary>Gets the RegisterEAX</summary>
            <value>RegisterEAX</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterEBX">
            <summary>Gets the RegisterEBX</summary>
            <value>RegisterEBX</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterECX">
            <summary>Gets the RegisterECX</summary>
            <value>RegisterECX</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterEDX">
            <summary>Gets the RegisterEDX</summary>
            <value>RegisterEDX</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterESI">
            <summary>Gets the RegisterESI</summary>
            <value>RegisterESI</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterEDI">
            <summary>Gets the RegisterEDI</summary>
            <value>RegisterEDI</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterEIP">
            <summary>Gets the RegisterEIP</summary>
            <value>RegisterEIP</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterEBP">
            <summary>Gets the RegisterEBP</summary>
            <value>RegisterEBP</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterESP">
            <summary>Gets the RegisterESP</summary>
            <value>RegisterESP</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.RegisterEFLAGS">
            <summary>Gets the RegisterEFLAGS</summary>
            <value>RegisterEFLAGS</value>
        </member>
        <member name="P:BR.AN.PviServices.TaskData.StackSize">
            <summary>Gets the StackSize</summary>
            <value>StackSize</value>
        </member>
        <member name="T:BR.AN.PviServices.MemoryData">
            <summary>Basic implementaion of MemoryData data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.MemoryData.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.MemoryData.PCToString">
            <summary>Helper to get the string representation of the PC.</summary>
            <returns>The string representation of the PC.</returns>
        </member>
        <member name="M:BR.AN.PviServices.MemoryData.ESPToString">
            <summary>Helper to get the string representation of the ESP.</summary>
            <returns>The string representation of the ESP.</returns>
        </member>
        <member name="M:BR.AN.PviServices.MemoryData.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.MemoryData.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.MemoryData.PC">
            <summary>Gets the PC</summary>
            <remarks>PC</remarks>
        </member>
        <member name="P:BR.AN.PviServices.MemoryData.ESP">
            <summary>Gets the ESP</summary>
            <remarks>ESP</remarks>
        </member>
        <member name="T:BR.AN.PviServices.Backtrace">
            <summary>Basic implementaion of Backtrace data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Backtrace.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Backtrace.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Backtrace.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Backtrace.ReplaceFunctionName(System.String)">
            <summary>
            Replaces the function name by the user.
            </summary>
            <param name="pFunctionName">A String which contains the new function name.</param>
            <returns>true, if the new name was set; otherwise false.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.NextBacktrace">
            <summary>Gets the NextBacktrace</summary>
            <value>NextBacktrace</value>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.Paramcount">
            <summary>Gets the Paramcount</summary>
            <value>Paramcount</value>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.Address">
            <summary>Gets the Address</summary>
            <value>Address</value>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.FunctionName">
            <summary>Gets the FunctionName</summary>
            <value>FunctionName</value>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.Parameter">
            <summary>Gets the Parameter</summary>
            <remarks>Parameter</remarks>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.Info">
            <summary>Gets the info parameter.</summary>
            <remarks>Info</remarks>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.TaskIndex">
            <summary>Gets the last active cyclic task index parameter.</summary>
            <remarks>TaskIndex</remarks>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.Callstack">
            <summary>Gets the Callstack</summary>
            <value>Callstack</value>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.FunctionInfo">
            <summary>Gets the FunctionInfo</summary>
            <value>FunctionInfo</value>
        </member>
        <member name="P:BR.AN.PviServices.Backtrace.PCInfo">
            <summary>Gets the PCInfo</summary>
            <value>PCInfo</value>
        </member>
        <member name="T:BR.AN.PviServices.Callstack">
            <summary>Basic implementaion of Callstack data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Callstack.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Callstack.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Callstack.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Callstack.ModuleName">
            <summary>Gets the ModuleName</summary>
            <value>ModuleName</value>
        </member>
        <member name="P:BR.AN.PviServices.Callstack.CodeOffset">
            <summary>Gets the CodeOffset</summary>
            <value>CodeOffset</value>
        </member>
        <member name="T:BR.AN.PviServices.FunctionInfo">
            <summary>Basic implementaion of FunctionInfo data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.FunctionInfo.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.FunctionInfo.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.FunctionInfo.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.FunctionInfo.ModuleName">
            <summary>Gets the ModuleName</summary>
            <value>ModuleName</value>
        </member>
        <member name="P:BR.AN.PviServices.FunctionInfo.CodeOffset">
            <summary>Gets the CodeOffset</summary>
            <value>CodeOffset</value>
        </member>
        <member name="T:BR.AN.PviServices.Exception">
            <summary>Basic implementaion of Exception data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Exception.#ctor">
            <summary>Initializes a new instance of the Exception class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Exception.#ctor(BR.AN.PviServices.ExceptionHeader)">
            <summary>Initializes a new instance of the internal Exception class.</summary>
            <param name="header">The header information.</param>
        </member>
        <member name="M:BR.AN.PviServices.Exception.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Exception.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Exception.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Exception.BacktraceCount">
            <summary>Gets the BacktraceCount</summary>
            <value>BacktraceCount</value>
        </member>
        <member name="P:BR.AN.PviServices.Exception.DataLength">
            <summary>Gets the DataLength</summary>
            <value>DataLength</value>
        </member>
        <member name="P:BR.AN.PviServices.Exception.ArVersion">
            <summary>Gets the ArVersion</summary>
            <value>ArVersion</value>
        </member>
        <member name="P:BR.AN.PviServices.Exception.ProcessorData">
            <summary>Gets the ProcessorData</summary>
            <value>ProcessorData</value>
        </member>
        <member name="P:BR.AN.PviServices.Exception.TaskData">
            <summary>Gets the TaskData</summary>
            <value>TaskData</value>
        </member>
        <member name="P:BR.AN.PviServices.Exception.MemoryData">
            <summary>Gets the MemoryData</summary>
            <value>MemoryData</value>
        </member>
        <member name="P:BR.AN.PviServices.Exception.Backtrace">
            <summary>Gets the Backtrace</summary>
            <value>Backtrace</value>
        </member>
        <member name="P:BR.AN.PviServices.Exception.Type">
            <summary>Gets the Type</summary>
            <value>Type</value>
        </member>
        <member name="T:BR.AN.PviServices.PCInfo">
            <summary>Basic implementaion of PCInfo data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PCInfo.ToString">
            <summary>Helper to get the string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PCInfo.ToStringHTM">
            <summary>Helper to get the HTML string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PCInfo.ToStringCSV">
            <summary>Helper to get the CSV string representation of the class.</summary>
            <returns>The string representation of the class.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PCInfo.ReplaceModuleName(System.String)">
            <summary>
            Replaces the module name by the user.
            </summary>
            <param name="pModuleName">A String which contains the new module name.</param>
            <returns>true, if the new name was set; otherwise false.</returns>
        </member>
        <member name="P:BR.AN.PviServices.PCInfo.ModuleName">
            <summary>Gets the ModuleName</summary>
            <value>ModuleName</value>
        </member>
        <member name="P:BR.AN.PviServices.PCInfo.CodeOffset">
            <summary>Gets the CodeOffset</summary>
            <value>CodeOffset</value>
        </member>
        <member name="T:BR.AN.PviServices.HexConvert">
            <summary>Basic implementaion of HexConvert data description.</summary>
        </member>
        <member name="M:BR.AN.PviServices.HexConvert.ToBytes(System.String)">
            <summary>Gets the  byte representation of the value</summary>
            <returns>The byte representation of the value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.HexConvert.ToHexString(System.Byte[])">
            <summary>Gets the HEX string.</summary>
            <returns>The string containing the value n hex format.</returns>
        </member>
        <member name="T:BR.AN.PviServices.LogExportFormat">
            <summary>Enumeration of the supported export formats for logger entry collections.</summary>
        </member>
        <member name="F:BR.AN.PviServices.LogExportFormat.ARL">
            <summary>XML compliant format. ARL is the default format.</summary>
        </member>
        <member name="F:BR.AN.PviServices.LogExportFormat.HTML">
            <summary>HTML compliant format.</summary>
        </member>
        <member name="F:BR.AN.PviServices.LogExportFormat.CSV">
            <summary>CSV compliant format. Semicolon will be used as seperator.</summary>
        </member>
        <member name="T:BR.AN.PviServices.Comparer">
            <summary>Helper class to be used for sorting Loggerentries by their UID.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Comparer.Compare(System.Object,System.Object)">
            <summary></summary>
            <remarks></remarks>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:BR.AN.PviServices.LoggerEntryCollection">
            <summary>Implementation of a collection of B+R LoggerEntry objects.</summary>
        </member>
        <member name="F:BR.AN.PviServices.LoggerEntryCollection.arrayOfLoggerEntries">
            <summary>This arraylist is a helper to get ArrayList like access to the loggerentries collection.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.#ctor(BR.AN.PviServices.Base,System.String)">
            <summary>Initializes a new instance of the LoggerEntryCollection class.</summary>
            <param name="parent">The parent object</param>
            <param name="name">The name of the collection.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.#ctor(System.String,BR.AN.PviServices.LoggerEntryCollection)">
            <summary>Initializes a new instance of the LoggerEntryCollection class.</summary>
            <param name="name">The name of the collection.</param>
            <param name="eventEntries">The collection of error entries.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.#ctor(System.String)">
            <summary>Initializes a new instance of the LoggerEntryCollection class.</summary>
            <param name="name">The name of the collection.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Load(System.Xml.XmlTextReader)">
            <summary></summary>
            <remarks></remarks>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Load(System.String)">
            <summary>Given a file name the method tries to load the logger entries.</summary>
            <remarks>Supports BR and ARL files.</remarks>
            <param name="file">The filename including the directory.</param>
            <returns>0 on success else e.g.: 2... File does not exist; 5 ... access NOT allowed due to the selected parent object; 11 ... invalid/unknown file format.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.ValidateTimestampString(System.String)">
            <summary>Damit die DateTime Klasse richtig initialisiert wird muß der string mit NUllen aufgefüllt werden.</summary>
            <param name="timeStamp">Der zu überprüfende Zeitstempel.</param>
            <returns>Der korrigierte Zeitstempel</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Save(System.Text.StringBuilder@)">
            <summary></summary>
            <remarks></remarks>
            <param name="xmlTextBlock"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.SaveAs(System.String,BR.AN.PviServices.LogExportFormat)">
            <summary>Saves the logger entries to a file in the specified format.</summary>
            <remarks>Supported Formats are ARL, CSV and HTML</remarks>
            <param name="file">The file name to be used to store the logger entries.</param>
            <param name="fileFormat">The file name to be used to store the logger entries.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.GetXMLString(System.String)">
            <summary>Helper which replaces special characters to there XML compliant conterparts.</summary>
            <param name="ascii">The ascii string to convert.</param>
            <returns>The converted String.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.SaveAsHTML(System.String)">
            <summary>Saves the logger entries to an arl file.</summary>
            <remarks>ARL files ar XML compliant files. Every one can view the files using a standard XML Editor (e.g.: InternetExplorer)</remarks>
            <param name="file">The file name to be used to store the logger entries.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.SaveAsCSV(System.String)">
            <summary>Saves the logger entries to an arl file.</summary>
            <remarks>ARL files ar XML compliant files. Every one can view the files using a standard XML Editor (e.g.: InternetExplorer)</remarks>
            <param name="file">The file name to be used to store the logger entries.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Save(System.String)">
            <summary>Saves the logger entries to an arl file.</summary>
            <remarks>ARL files ar XML compliant files. Every one can view the files using a standard XML Editor (e.g.: InternetExplorer)</remarks>
            <param name="file">The file name to be used to store the logger entries.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.SaveAsARL(System.String)">
            <summary>Saves the logger entries to an arl file.</summary>
            <remarks>ARL files ar XML compliant files. Every one can view the files using a standard XML Editor (e.g.: InternetExplorer)</remarks>
            <param name="file">The file name to be used to store the logger entries.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Clear">
            <summary>Call thsi member to do the Cleanup.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Add(System.Object,System.Object)">
            <summary>Add the logger entry to the collection. Uses the timestamp and the global id as key.</summary>
            <param name="key">the key to be used.</param>
            <param name="value">the value object.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.ContainsKey(System.Object)">
            <summary>
            Determines whether the collection contains the specific object.
            </summary>
            <param name="key">Object key</param>
            <returns>true if contains, otherwise false</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Add(BR.AN.PviServices.LoggerEntryBase,System.Boolean)">
            <summary>Add the logger entry to the sorted list.</summary>
            <param name="entry">The logger entry.</param>
            <param name="addKeyOnly">the flag indicating wheter to get the global ID and the time stamp for the key or not.</param>
            <returns>The status</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Add(BR.AN.PviServices.LoggerEntryBase)">
            <summary>Add the logger entry to the sorted list.</summary>
            <param name="entry">The logger entry.</param>
            <returns>The status</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.GetEntryIDString(System.UInt32)">
            <summary>Helper to build a formatted ID string which fits the IComparer interface</summary>
            <param name="id">The ID to format.</param>
            <returns>The formated id.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Remove(System.UInt64)">
            <summary>Remove the specified item from the collection</summary>
            <param name="key">The key to be used to remove the item.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Remove(System.String)">
            <summary>Remove the specified item from the collection</summary>
            <param name="key">The key to be used to remove the item.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.Remove(System.Object)">
            <summary>Remove the element from the list.</summary>
            <param name="key">The key to be searched for.</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.SetArrayIndex(BR.AN.PviServices.LoggerEntryBase)">
            <summary>Helper to set the apropriate array index.</summary>
            <param name="eEntry">The logger entry</param>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.GetArrayIndex(BR.AN.PviServices.LoggerEntryBase)">
            <summary>Helper to get the apropriate array index.</summary>
            <param name="eEntry">The logger entry</param>
            <returns>Returns the array index of the logger entry</returns>
        </member>
        <member name="M:BR.AN.PviServices.LoggerEntryCollection.UpdateArrayIndices(System.Int32)">
            <summary>Helper to update the items array index.</summary>
            <param name="idxRemoved">The index which has been removed</param>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryCollection.Item(System.Int32)">
            <summary>Gets a logger entry by its ID</summary>
        </member>
        <member name="P:BR.AN.PviServices.LoggerEntryCollection.Item(System.UInt64)">
            <summary>Gets a logger entry by its Unique ID</summary>
        </member>
        <member name="T:BR.AN.PviServices.LogicalCollection">
            <summary>
            An instance of this class manages all created PviServices objects using 
            the logical name.
            Each PviServices configuration manages its own LogicalObjects to get a direct access
            to its PviServices objects. This LogicalObjects collection either is activated in the
            ServiceCollection object, if more then one Service-objects needed. - or in the Service 
            object - if only one Service object is required.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.LogicalCollection.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of this class
            </summary>
            <param name="parent">Parent</param>
            <param name="name">Collection name</param>
        </member>
        <member name="M:BR.AN.PviServices.LogicalCollection.Connect">
            <summary>
            Connects each PviServices object of the collection.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.LogicalCollection.Disconnect">
            <summary>
            Disconnects each PviServices object.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.LogicalCollection.Item(System.String)">
            <summary>
            Gets a PviServices object by its name.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.LogicalCollection.Service">
            <summary>
            Gets the parents Service object of this instance.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.MemberCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.Connect">
            <summary>
            Creates a connection of each member object to its processvariable
            </summary>
            <remarks>
            The Uploaded event from the collections parent notifies that each member was successful
            uploaded. So for connecting the whole MemberCollection it is useful to wait for the parents
            uploaded event.
            <code>
            
            // Create new connection to a variable of type structure
            Variable varSt = new Variable(cpuObj,"stVariable");
            // Add handler for Uploaded event
            varSt.Uploaded += PviEventHandler(Members_Uploaded);
            // connect the struct variable
            varSt.Connect();
            ...
            
            // Receive uploaded event
            private void Members_Uploaded(object sender, PviEventArgs e)
            {
            	((Variable)sender).Members.Connect();
            }
            </code>
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.Disconnect">
            <summary>
            Di
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.Remove(System.String)">
            <summary>Overrides the base remove function</summary>
            <param name="key">the name of the object.</param>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.ContainsKey(System.Object)">
            <summary>
            Determines whether the collection contains the specific object.
            </summary>
            <param name="key">Object key</param>
            <returns>true if contains, otherwise false</returns>
        </member>
        <member name="M:BR.AN.PviServices.MemberCollection.CopyTo(BR.AN.PviServices.MemberCollection)">
            <summary>
            Copies 
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="P:BR.AN.PviServices.MemberCollection.Item(System.Int32)">
            <summary>
            Gets an element of this instance by its index. (Accessing array elements)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemberCollection.FirstSimpleTyped">
            <summary>Gets the first element which is not of typ array and not of typ struct.</summary>
        </member>
        <member name="P:BR.AN.PviServices.MemberCollection.First">
            <summary>Gets the first element of this instance by its name. (Accessing structure elements)</summary>
        </member>
        <member name="P:BR.AN.PviServices.MemberCollection.Item(System.String)">
            <summary>
            Gets an element of this instance by its name. (Accessing structure elements)
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemberCollection.Service">
            <summary>
            Gets the Service object of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemberCollection.DataValid">
            <summary>Returns true if each member object contains valid data.</summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_CPmemInfoRes">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.Memory">
            <summary>
            An instance of this class describes specific memory information of the Cpu.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Memory.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Memory.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Memory.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Memory.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>Initializes a new instance of the internal Memory class.</summary>
            <param name="cpu">The parent cpu object.</param>
            <param name="name">The name of the object to be used.</param>
        </member>
        <member name="M:BR.AN.PviServices.Memory.RemoveFromCBReceivers">
            <summary>Helper to remove the object from the PVI callback servicers ID array</summary>
        </member>
        <member name="M:BR.AN.PviServices.Memory.AddToCBReceivers">
            <summary>Helper to add all object which might receive a PVI CB to the service IDs array</summary>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Memory.IsStartAddressValid">
            <summary>
            Returns true when the property StartAddress has valid data, whether false.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Memory.IsTotalLengthValid">
            <summary>
            Returns true when the property TotalLength has valid data, whether false.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Memory.IsFreeLengthValid">
            <summary>
            Returns true when the property FreeLength has valid data, whether false.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Memory.IsFreeBlockLengthValid">
            <summary>
            Returns true when the property FreeBlockLength has valid data, whether false.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Memory.Clean">
            <summary>
            Clean this Memory type (the Cpu must be in Diagnostics mode)
            </summary>
            <remarks>
            The Cleaned event notifies, that the memory was succesful cleaned.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Memory.OnCleaned(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnCleaned is called when a Memory was cleaned on the plc. The function raises the Cleaned event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Memory.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            The function is called when an instances communication error occurs. The function raises the Error event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Memory.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Memory.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Memory)">
            <summary>
            Reads device configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="memory">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Memory.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="E:BR.AN.PviServices.Memory.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.Address">
            <summary>Not supported.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.Name">
            <summary>
            Gets the logical name of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.Type">
            <summary>
            Gets the MemoryType of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.StartAddress">
            <summary>
            Gets the start address of the memory on the plc.
            Can only be used if the property IsStartAddressValid is true
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.TotalLength">
            <summary>
            Gets the length of the memory on the plc.
            Can only be used if the property IsTotalLengthValid is true
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.FreeLength">
            <summary>
            Gets the free length of the memory on the plc for this memory type.
            Can only be used if the property IsFreeLengthValid is true
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.FreeBlockLength">
            <summary>
            Gets the largest free memory block on the plc for this memory type.
            Can only be used if the property IsFreeBlockLengthValid is true
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.Service">
            <summary>
            Gets the Service-object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of the Memory
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.LinkId">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.InternId">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.UserData">
            <summary>
            Gets or sets the UserData for this instance.
            </summary>
            <remarks>
            The UserData-property provides a position to store special user information for a
            PviServices object.
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.Memory.ErrorCode">
            <summary>
            Gets an ErrorCode if an error occured.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.ErrorText">
            <summary>
            Gets an ErrorText if an error occured.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Memory.Parent">
            <summary>
            Gets or sets the Parent object of this instance.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Memory.Cleaned">
            <summary>Occurs when the Module on the plc is deleted</summary>
        </member>
        <member name="E:BR.AN.PviServices.Memory.Error">
            <summary>
            Occurs when this instance notifies an error.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.MemoryCollection">
            <summary>
            An instance of this class represents a collection of memory objects.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">Parent object</param>
            <param name="name">Collection name</param>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.Add(BR.AN.PviServices.Memory)">
            <summary>
            Adds a Memory object to this collection.
            </summary>
            <param name="memory">Memory object</param>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.OnError(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            OnError is called when an Error occurs
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.Upload">
            <summary>
            This method uploads all supporting memory types depending on the plc.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.MemoryCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="P:BR.AN.PviServices.MemoryCollection.Item(System.Int32)">
            <summary>
            Gets a memory object by its index
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.MemoryCollection.Item(BR.AN.PviServices.MemoryType)">
            <summary>
            Gets a memory object by its type
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleInfoDecription.#ctor">
            <summary>
            Initializes a new instance of the ModuleInfoDecription class
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleInfoDecription.Initialize">
            <summary>
            Initializes a new instance of the ModuleInfoDecription class
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ModuleCollectionEventHandler">
            <summary>Declaration for ModuleCollection events. It is used to handle progress information for up- or downloading modules using module collection methods.</summary>
            <param name="sender">The object which caused to send the collection event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.ModuleCollectionEventArgs">
            <summary>
            An instance of this class defines additional eventinformation for module objects
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollectionEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.ModuleCollection)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="modules">ModuleCollection list</param>
        </member>
        <member name="P:BR.AN.PviServices.ModuleCollectionEventArgs.Modules">
            <summary>
            Gets a collection of referenced variable objects
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ModuleCollectionProgressEventArgs">
            <summary>
            This class is used to pass Module information to the event handler ModuleCreated, ModuleChanged 
            and ModuleDeleted when an event is raised. 
            The class is derived from PviEventArgs
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollectionProgressEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.Module,System.Int32)">
            <summary>
            Creates a new instance of the ModuleEventArgs class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Error code</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="module">Module object</param>
            <param name="percentage">Percentage</param>
        </member>
        <member name="P:BR.AN.PviServices.ModuleCollectionProgressEventArgs.Module">
            <summary>
            Gets or sets the Module object 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.ModuleCollectionProgressEventArgs.Percentage">
            <summary>
            Returns the status of a Module upload or download operation as a percentage
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ModuleCollection">
            <summary>
            An instance of this class represents a collection of Module objects. This instance
            provides special methods for for up- and downloading modules from the plc.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">Parent object</param>
            <param name="name">Collection name</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnError(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            The function is called when an error occurs. The function raises the Error event of the instances parent.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>
            Connects each object of the collection using a specific connection type.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Disconnect(System.Boolean)">
            <summary>Disconnects each Module object of the collection.</summary>
            <remarks>The Disconnected event notifies each successful aborted connection.</remarks>
            <param name="noResponse">If true the object will not receive a response for the request!</param>      
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Disconnect">
            <summary>
            Disconnects each object of the collection
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.GetItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Add(BR.AN.PviServices.Module)">
            <summary>
            Adds a Module object to this instance.
            </summary>
            <param name="module"></param>
            <returns>
            Errorcode: 0 .. OK, else Connection failed.
            </returns>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Remove(System.String)">
            <summary>Removes the specified item from the collection.</summary>
            <param name="key">The key is the name of the module to be removed.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Remove(System.Object)">
            <summary>Removes the specified item from the collection.</summary>
            <param name="key">The key may either be a module object or the name of the module.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Upload">
            <summary>
            Uploads Module objects depending on the collections parent (Cpu object).
            </summary>
            <remarks>
            The Uploaded event notifies that all variables were successful uploaded.
            
            </remarks>
            <example>
            <code>
            // Create a new Service object
            Service service = new Service();
            service.Connect();
            // Create a new Cpu objekt 
            Cpu cpu = new Cpu(service,"Cpu");
            // Set connection properties
            cpu.Connection.DeviceType = BR.AN.PviServices.DeviceType.TcpIp;
            cpu.Connection.TcpIp.SourceStation = 1;
            cpu.Connection.TcpIp.DestinationStation = 50;
            cpu.Connection.TcpIp.DestinationIpAddress = "10.43.70.250";
            // Connect Cpu object
            cpu.Connect();
            cpu.Modules.Upload();
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Upload(BR.AN.PviServices.ModuleListOptions)">
            <summary>
            Uploads Module objects depending on the collections parent (Cpu object).
            </summary>
            <remarks>
            The Uploaded event notifies that all variables were successful uploaded.
            
            </remarks>
            <example>
            <code>
            // Create a new Service object
            Service service = new Service();
            service.Connect();
            // Create a new Cpu objekt 
            Cpu cpu = new Cpu(service,"Cpu");
            // Set connection properties
            cpu.Connection.DeviceType = BR.AN.PviServices.DeviceType.TcpIp;
            cpu.Connection.TcpIp.SourceStation = 1;
            cpu.Connection.TcpIp.DestinationStation = 50;
            cpu.Connection.TcpIp.DestinationIpAddress = "10.43.70.250";
            // Connect Cpu object
            cpu.Connect();
            cpu.Modules.Upload();
            </code>
            </example>
            <param name="lstOption">0 .. default behavior, 1 ... ModuleList, 2 ... DiagModuleList, 3 ... all for ANSL else same as 0</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Download(BR.AN.PviServices.MemoryType,BR.AN.PviServices.InstallMode)">
            <summary>
            Downloads each object within the list.
            </summary>
            <param name="memoryType">Type of memory to install</param>
            <param name="installMode">Install mode</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.Upload(System.String)">
            <summary>
            Uploads each module file within the list from the plc to a specific path. 
            </summary>
            <remarks>For uploading module files it is neccessary to connect each module object within the list.
            (Collection method Connect())</remarks>
            <param name="path">An absolute path for the BR modules.</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnConnected(BR.AN.PviServices.Base,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module object within the list is being connected.
            The method raises the Connected event.
            </summary>
            <param name="sender">Module object</param>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnDisconnected(BR.AN.PviServices.Base,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module object within the list is being disconnected.
            The method raises the Disconnected event.
            </summary>
            <param name="sender">Module object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnError(BR.AN.PviServices.Base,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module object within the list notifies an error.
            The method raises the Error event.
            </summary>
            <param name="sender">Variable object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnModuleDownloaded(BR.AN.PviServices.Module,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module objects downlaod request within the list succeeded.
            The method raises the Disconnected event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="module">Module object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnModuleUploaded(BR.AN.PviServices.Module,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module objects upload request within the list succeeded.
            </summary>
            <param name="module">Module object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.CheckUploadedRequest">
            <summary>
            Helper to check wheter to send the Uploaded Event or not
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnCollectionDownloaded(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all Collection download requests are responded.		
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnCollectionUploaded(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all collection upload requests are responded.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnCollectionDownloadProgress(BR.AN.PviServices.ModuleCollectionProgressEventArgs)">
            <summary>
            This method is called to provide progress information for the collections download process.
            </summary>
            <param name="e">ModuleCollectionProgressEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnCollectionUploadProgress(BR.AN.PviServices.ModuleCollectionProgressEventArgs)">
            <summary>
            This method is called to provide progress information for the collections upload process.
            </summary>
            <param name="e">ModuleCollectionProgressEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnDownloadProgress(BR.AN.PviServices.Module,BR.AN.PviServices.ModuleEventArgs)">
            <summary>
            The function raises the DownloadProgress event to provide progress information for each module.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="module">Module object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.OnUploadProgress(BR.AN.PviServices.Module,BR.AN.PviServices.ModuleEventArgs)">
            <summary>
            The function raises the DownloadProgress event to provide progress information for each module.
            </summary>
            <param name="e">PviEventArgs object</param>
            /// <param name="module">Module object</param>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.DiagnosticModeUpdateModuleInfo(BR.AN.PviServices.APIFC_DiagModulInfoRes,System.Int32,System.Int32@)">
            <summary>Updates Module Info for diagnostic mode.</summary>
            <param name="diagModInfo">The ModuleInformation</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <returns>0, on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.ModuleCollection.UpdateModuleInfo(BR.AN.PviServices.ModuleInfoDecription,System.Int32,System.Int32@,System.Boolean)">
            <summary>Updates Module Info for a single element</summary>
            <param name="moduleInfoStruct">The ModuleInformation</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <param name="diagList">If true the responsedata has to be interpreted as DIAGNOSTIC boot mode list.</param>
            <returns>0, on success</returns>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.ModuleCreated">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.ModuleChanged">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.ModuleDeleted">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.ModuleUploaded">
            <summary>Occurs when a Module from the plc is uploaded</summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.ModuleDownloaded">
            <summary>Occurs when a Module is downloaded to the plc</summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.UploadProgress">
            <summary>Occurs when upload is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.DownloadProgress">
            <summary>Occurs when download is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.CollectionDownloaded">
            <summary>Occurs when all download requests for each module object are responded</summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.CollectionUploaded">
            <summary>Occurs when all upload requests for each module object are responded</summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.CollectionUploadProgress">
            <summary>Occurs when upload is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.ModuleCollection.CollectionDownloadProgress">
            <summary>Occurs when download is in progress.</summary>
        </member>
        <member name="P:BR.AN.PviServices.ModuleCollection.Item(System.String)">
            <summary>
            Gets a Module object by its name.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ProfilerState">
            <summary>Implements an enumeration of profiler states.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.NoDefinitionModule">
            <summary>
            No definition module is on target
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.NoDataModule">
            <summary>
            No data module is on target
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Inactive">
            <summary>
            Profiler is inactive
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Active">
            <summary>
            Profiler is active
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Stopped">
            <summary>
            Profiler is stopped
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Running">
            <summary>
            Profiler is running
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Ready">
            <summary>
            Profiler is ready
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Working">
            <summary>
            Profiler is working
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Auto">
            <summary>
            Automatic start of profiling
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Manual">
            <summary>
            Manual start of profiling with library function
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.StackReady">
            <summary>
            Stack data establishment ready
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilerState.Correction">
            <summary>
            Correction of logging data (only if target is no Pentium)
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ProfilingCommand">
            <summary>Enumeration of the profiler commands.</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.ExtendedStart">
            <summary>
            Install B&amp;R Profiler definition module and start measurement (obsolete for version 4)
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.Stop">
            <summary>
            Stop B&amp;R Profiler measurement
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.Deinstall">
            <summary>
            Deinstall B&amp;R Profiler modules
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.GetStack">
            <summary>
            Start stack measurement only (obsolete for version 4)
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.GetInfo">
            <summary>
            Get B&amp;R Profiler Information from target
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.Install">
            <summary>
            Install B&amp;R Profiler definition module
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.Start">
            <summary>
            Start B&amp;R Profiler measurement
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProfilingCommand.Default">
            <summary>
            Install B&amp;R Profiler default definition module and start measurement (version 4 only)
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ProfilerEventHandler">
            <summary>The ModuleEventHandler delegate is used to generate ModuleEvents</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.ProfilerEventArgs">
            <summary>Implements the event arguments for profiler events.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ProfilerEventArgs.#ctor(System.String,BR.AN.PviServices.Action,System.Object)">
            <summary>Initializes a new instance of the ProfilerEventArgs class.</summary>
            <param name="name">The name of the profiler.</param>
            <param name="action">The action.</param>
            <param name="info">the info object.</param>
        </member>
        <member name="P:BR.AN.PviServices.ProfilerEventArgs.Info">
            <summary>Gets the profiler info object.</summary>
            <value>The profiler info object</value>
        </member>
        <member name="P:BR.AN.PviServices.ProfilerEventArgs.Name">
            <summary>Gets the profiler name.</summary>
            <value>The name of the profiler.</value>
        </member>
        <member name="P:BR.AN.PviServices.ProfilerEventArgs.Action">
            <summary>Gets the action of the profiled entry.</summary>
            <value>The action of the profiler entry.</value>
        </member>
        <member name="T:BR.AN.PviServices.Profiler">
            <summary>Implementation of B+R profiler objects.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Profiler.TTServiceProfiler">
            <summary>
            TT Service access point for profiler
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Profiler.TTServiceDataCode">
            <summary>
            TT Service profiler data code identifier
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Profiler.TTServiceWrite">
            <summary>
            TT Service write request (Install, Deinstall, ...)
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Profiler.TTServiceRead">
            <summary>
            TT Service read request (gets the current state of the profiler on target)
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>Initializes a new instance of the Profiler class.</summary>
            <param name="cpu">The reference to the CPU object.</param>
            <param name="name">The name of the profiler object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.RemoveFromCBReceivers">
            <summary>Helper to remove the object from the PVI callback servicers ID array</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.AddToCBReceivers">
            <summary>Helper to add all object which might receive a PVI callback to the service IDs array</summary>
            <returns>True if successful else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.Install">
            <summary>Install the profiler on the PLC.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.Deinstall">
            <summary>Deinstall the profiler from the PLC.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.Start">
            <summary>Start profiling.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.ExtendedStart">
            <summary>Start the profiling with some extra settings.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.Stop">
            <summary>Stop the profiling.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.InstallDefault">
            <summary>Install default profiler configuration.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.ReadInfo">
            <summary>Read the profiler info.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.ReadStack">
            <summary>Read the stack info.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.ReadState">
            <summary>Read the state of the profiler.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.TTS_Read(System.Byte[],System.Byte,System.Int32)">
            <summary>Reads a TTService from the plc</summary>
            <param name="data">The data for the TT service.</param>
            <param name="dataLength">The length in BYTE of the TT service data.</param>
            <param name="respParam">The response parameter.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.TTS_Write(System.Byte[],System.Byte,System.Int32)">
            <summary>Reads a TTService from the plc</summary>
            <param name="data">The data for the TT service.</param>
            <param name="dataLength">The length in BYTE of the TT service data.</param>
            <param name="respParam">The response parameter.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnStateRead(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when the profiler signals the start of profiling on the PLC.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnInfoRead(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when the profiler has read the info from the PLC.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnInstalled(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when the profiler has been installed on the PLC.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnDeinstalled(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when the profiler has been deinstalled on the PLC.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnStarted(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when the profiler has been started on the PLC.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnStopped(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when the profiler has been stoped on the PLC.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnStackRead(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when the profiler has read the stack info from the PLC.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnError(BR.AN.PviServices.ProfilerEventArgs)">
            <summary>Called when there is an error while performing profiler commands.</summary>
            <param name="e">The additional event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.Dispose">
            <summary>Implements the IDisposable interface.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Profiler.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="P:BR.AN.PviServices.Profiler.Name">
            <summary>Gets the name of the profiler.</summary>
            <value>The name of the profiler.</value>
        </member>
        <member name="P:BR.AN.PviServices.Profiler.Cpu">
            <summary>Gets the reference to the CPu object.</summary>
            <value>The reference to the CPu object.</value>
        </member>
        <member name="P:BR.AN.PviServices.Profiler.ErrorNumber">
            <summary>Gets the error state.</summary>
            <value>The error state</value>
        </member>
        <member name="P:BR.AN.PviServices.Profiler.State">
            <summary>Gets the profiling state.</summary>
            <value>The profiling state</value>
        </member>
        <member name="P:BR.AN.PviServices.Profiler.CommandActive">
            <summary>Gets wheter the profiler is waiting on a response from the PLC or not.</summary>
            <value>The profiler is waiting on a response from the PLC or not.</value>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.StateRead">
            <summary>Called when the state has been read.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.InfoRead">
            <summary>Called when the profiler info has been read.</summary>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.Installed">
            <summary>Called when the profiler has been installed.</summary>
            <seealso cref="T:BR.AN.PviServices.ProfilerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.Deinstalled">
            <summary>Called when the profiler has been deinstalled.</summary>
            <seealso cref="T:BR.AN.PviServices.ProfilerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.Started">
            <summary>Called when the profiler has been started.</summary>
            <seealso cref="T:BR.AN.PviServices.ProfilerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.Stopped">
            <summary>Called when the profiler has been stoped.</summary>
            <seealso cref="T:BR.AN.PviServices.ProfilerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.StackRead">
            <summary>Called when the profiler stack has been read.</summary>
            <seealso cref="T:BR.AN.PviServices.ProfilerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.Error">
            <summary>Called when the profiler caused an error.</summary>
            <seealso cref="T:BR.AN.PviServices.ProfilerEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.Profiler.Disposing">
            <summary>Disposing in process.</summary>
        </member>
        <member name="T:BR.AN.PviServices.PviResponseData">
            <summary>Implements the basic data structure for all CB functions.</summary>
        </member>
        <member name="M:BR.AN.PviServices.PviResponseData.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int32,BR.AN.PviServices.ResponseInfo)">
            <summary>Initializes a new instance of the SET_PVICALLBACK_DATA class.</summary>
            <param name="wParam">The WPARAM.</param>
            <param name="lParam">The LPARAM</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">the info structure.</param>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.AccessMode">
            <summary>Gets the Request/Response mode.</summary>
            <value>AccessMode</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.AccessType">
            <summary>Gets the access or event type</summary>
            <value>AccessType</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.EventType">
            <summary>Gets the event type</summary>
            <value>EventType</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.ErrorCode">
            <summary>Gets teh error number.</summary>
            <value>ErrorCode</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.LinkID">
            <summary>Gets the link ID.</summary>
            <value>LinkID</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.State">
            <summary>Gets the response event state.</summary>
            <value>State</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.WParam">
            <summary>Gets the WPARAM.</summary>
            <value>WParam</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.LParam">
            <summary>Gets the LPARAM.</summary>
            <value>LParam</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.Action">
            <summary>Gets the LPARAM</summary>
            <value>LParam</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.PtrData">
            <summary>Gets the ponter to the Data.</summary>
            <value>PtrData</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.DataLen">
            <summary>Gets the length of the data.</summary>
            <value>DataLen</value>
        </member>
        <member name="P:BR.AN.PviServices.PviResponseData.IsError">
            <summary>Gets if the error code reprensents an error or only info or warning.</summary>
            <value>IsError</value>
        </member>
        <member name="T:BR.AN.PviServices.PviObjectBrowser">
            <summary>
            Helper class to browser through PVI objects.
            Reads the PVI object hierarchie down to the variables for all open INA2000 connections.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.#ctor(System.String,System.Boolean,BR.AN.PviServices.Base,BR.AN.PviServices.PviObjectBrowser)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.#ctor(System.String,System.Boolean,BR.AN.PviServices.PviObjectBrowser)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.Deinit">
            <summary>Link to PVI</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.Link">
            <summary>Link to PVI</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.CreateReadObjectRequest(System.Int32)">
            <summary>
            Creates ReadRequest
            </summary>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.CreateLinkObjectRequest">
            <summary>
            Creates LinkRequest
            </summary>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.Initialize(BR.AN.PviServices.PviObjectBrowser)">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.OnPviLinked(System.Int32,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.ReadAttachedLines(System.IntPtr,System.UInt32)">
            <summary>Reads list of PVI Line objects from response data and creates link request for INA2000 line.</summary>
            <param name="pData">Response data</param>
            <param name="dataLen">Length of response data</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.ReadAttachedDevices(System.IntPtr,System.UInt32)">
            <summary>Reads list of PVI Device objects from response data and creates link request for each device.</summary>
            <param name="pData">Response data</param>
            <param name="dataLen">Length of response data</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.ReadAttachedStations(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>Reads list of PVI Station objects from response data and creates link request for each station.</summary>
            <param name="pData">response data</param>
            <param name="dataLen">Length of response data</param>
            <param name="bCpusIn">If true the string contains cpus too!!</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.GetBrowserObjectName(BR.AN.PviServices.PviObjectBrowser,BR.AN.PviServices.LogicalObjectsUsage,System.String,System.String)">
            <summary>
            Helper to get the Name for the object.
            </summary>
            <param name="browseParent">The parent browser object.</param>
            <param name="nameOption">Naming convention.</param>
            <param name="pviText">The PVI object listing text.</param>
            <param name="otString">The object type string for this object.</param>
            <returns>The object name.</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.ReadAttachedCpus(System.IntPtr,System.UInt32)">
            <summary>Reads list of PVI Ccpu objects from response data and creates link request for each cpu.</summary>
            <param name="pData">Response data</param>
            <param name="dataLen">Length of response data</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.ReadAttachedTasksOrGPVars(System.IntPtr,System.UInt32)">
            <summary>Reads list of PVI TASK or global VAR objects from response data and creates link request for each cpu.</summary>
            <param name="pData">Response data</param>
            <param name="dataLen">Length of response data</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.PviObjectBrowser.ReadAttachedVariables(System.IntPtr,System.UInt32)">
            <summary>Reads list of PVI VAR objects from response data and creates link request for each cpu.</summary>
            <param name="pData">Response data</param>
            <param name="dataLen">Length of response data</param>
            <returns>0 on success</returns>
        </member>
        <member name="P:BR.AN.PviServices.PviObjectBrowser.PviActionType">
            <summary>
            Type of the PVI Object
            Line, Device, Station
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviObjectBrowser.BrowserParent">
            <summary>
            Parent Object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviObjectBrowser.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviObjectBrowser.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.PviObjectBrowser.PathName">
            <summary>Path name of this object</summary>
        </member>
        <member name="T:BR.AN.PviServices.Scaling">
            <summary>
            An instance of this class defines a scaling object to
            scale variable values.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Scaling.#ctor">
            <summary>
            Initializes a scaling instance without scaling
            type definition.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Scaling.#ctor(BR.AN.PviServices.Value)">
            <summary>
            Initializes a scaling instance using a factor
            to scale variable values.
            </summary>
            <param name="factor">Factor of type Value</param>
        </member>
        <member name="M:BR.AN.PviServices.Scaling.#ctor(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            Initializes a scaling instance using limitation values
            to control reading and writing values.
            </summary>
            <param name="minValue">Minimum value of type Value</param>
            <param name="maxValue">Maximum value of type Value</param>
        </member>
        <member name="M:BR.AN.PviServices.Scaling.#ctor(BR.AN.PviServices.Value,BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            Initializes a scaling instance using limitation values
            to control reading and writing values and using a factor to
            scale variable valus..
            </summary>
            <param name="minValue">Minimum value of type Value</param>
            <param name="maxValue">Maximum value of type Value</param>
            <param name="factor">Factor of type Value</param>
        </member>
        <member name="M:BR.AN.PviServices.Scaling.#ctor(BR.AN.PviServices.ScalingPointCollection)">
            <summary>
            Initializes a scaling instance using scaling datapoints.
            </summary>
            <param name="scalingPoints">ScalingPointCollection object</param>
        </member>
        <member name="M:BR.AN.PviServices.Scaling.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Scaling.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Scaling)">
            <summary>Reads device configuration from xml configuration file and updates baseObject.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="tmpScaling">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Scaling.ScalingPoints">
            <summary>
            Gets or sets the ScalingPointCollection object
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Scaling.Factor">
            <summary>
            Gets or sets the scaling factor
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Scaling.MinValue">
            <summary>
            Gets or sets the lower scaling limit 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Scaling.MaxValue">
            <summary>
            Gets or sets the upper scaling limit 
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ScalingPoint">
            <summary>
            An object of this class defines a scaling point to set a scaling function for variable objects.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ScalingPoint.#ctor(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            Initializes a new instance of type ScalingPoint
            </summary>
            <param name="xValue">Value object for raw value</param>
            <param name="yValue">Value object for filtered value</param>
        </member>
        <member name="M:BR.AN.PviServices.ScalingPoint.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ScalingPoint.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.ScalingPoint)">
            <summary>Reads configuration from xml configuration file and updates baseObject.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="point">The scaling point object.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="P:BR.AN.PviServices.ScalingPoint.XValue">
            <summary>
            Gets the raw value of this instance
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.ScalingPoint.YValue">
            <summary>
            Gets the filtered value of this instance
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.ScalingPointCollection">
            <summary>
            An instance of this class describes a table of scaling points to
            set a scaling function for variable objects
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ScalingPointCollection.#ctor">
            <summary>
            Initializes a new scaling table
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ScalingPointCollection.Add(BR.AN.PviServices.ScalingPoint)">
            <summary>
            This function adds an object of type ScalingPoint to the collection
            </summary>
            <param name="scalingPoint">ScalingPoint object</param>
        </member>
        <member name="M:BR.AN.PviServices.ScalingPointCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ScalingPointCollection.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.ScalingPointCollection)">
            <summary>
            Reads configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="pointCollection">The scaling points collection to be updated.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="T:BR.AN.PviServices.RuntimeStates">
            <summary>Flags for the runtime state.</summary>
        </member>
        <member name="F:BR.AN.PviServices.RuntimeStates.Undefined">
            <summary>Undefined runtime state. The runtime state info is missing.</summary>
        </member>
        <member name="F:BR.AN.PviServices.RuntimeStates.Trial">
            <summary>No security key has been detected. Running in trial mode. Trial mode will expire after 2 hours.</summary>
        </member>
        <member name="F:BR.AN.PviServices.RuntimeStates.Runtime">
            <summary>A valid security key has been detected.</summary>
        </member>
        <member name="F:BR.AN.PviServices.RuntimeStates.Locked">
            <summary>The trial period has expired. The acces has been locked.</summary>
        </member>
        <member name="T:BR.AN.PviServices.LicenceInfo">
            <summary>Class implements the License Info properties</summary>
        </member>
        <member name="M:BR.AN.PviServices.LicenceInfo.#ctor(BR.AN.PviServices.Service)">
            <summary>Initializes a new instance of the LicenseInfo class.</summary>
        </member>
        <member name="F:BR.AN.PviServices.LicenceInfo.propDisposed">
            <summary>The item has been propDisposed so do not send any events any longer!!</summary>
        </member>
        <member name="M:BR.AN.PviServices.LicenceInfo.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.LicenceInfo.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LicenceInfo.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.LicenceInfo.Update(System.Int32)">
            <summary>Helper to update the license info.</summary>
            <remarks>The license info will not be available, if the PviManager has just been started!!
            It takes a few seconds until the license info is valid.</remarks>
            <param name="responseInfo">Additional event parameter.</param>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.LicenceInfo.UpdateRuntimeState(System.IntPtr)">
            <summary>Helper to update the runtime information.</summary>
            <param name="pRuntimeInfo">The runtime information as byte array.
            struct T_PVI_INFO_LICENCE
            byte[2] PviWorkState;				// Betriebsstatus
            byte[2] _PviWorkState;			// ~Betriebsstatus
            System.Int32 Reserved;        // reservierter Bereich
            char[65] LcName;						// Lizenzname (0-Abschluß)
            </param>
        </member>
        <member name="M:BR.AN.PviServices.LicenceInfo.ToString">
            <summary>Overrides the basic implementation .</summary>
            <returns>The string representation of the license info</returns>
        </member>
        <member name="E:BR.AN.PviServices.LicenceInfo.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.LicenceInfo.LicenceName">
            <summary>Gets the name of the license. Undefined, Trial, Runtime or Locked</summary>
            <value>LicenceName</value>
        </member>
        <member name="P:BR.AN.PviServices.LicenceInfo.Info">
            <summary>Gets the additional license info e.g. the order number.</summary>
            <value>LicenseInfo</value>
        </member>
        <member name="P:BR.AN.PviServices.LicenceInfo.RuntimeState">
            <summary>Gets the runtime state.</summary>
            <value>RuntimeState</value>
        </member>
        <member name="T:BR.AN.PviServices.PVIObjectsAttachedEventHandler">
            <summary>Delegate to be used for PVI object hierarchy scanning.</summary>
            <param name="sender">The sendign object.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="T:BR.AN.PviServices.Service">
            <summary>
            For using communication services, it is neccessary to create an instance of this
            class to build a base for other PviServices objects. This class provides several
            methods for loading and saving PviServices configurations and general configuration
            properties which have an effect on all other PviServices objects.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Service.GetAssemblyVersions(System.String@,System.String@)">
            <summary>
            Gets the file and productversion of the assembly this Service class is defined.
            </summary>
            <param name="productVersion">The product version string.</param>
            <param name="fileVersion">The file version string.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.#ctor">
            <summary>Initializes a new instance of the Service class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Service.#ctor(BR.AN.PviServices.EventMessageType,System.String)">
            <summary>
            Initializes a new instance of this class using more then one service object.
            </summary>
            <param name="commMethod">Specifies the communication method.</param>
            <param name="name">service name</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.#ctor(BR.AN.PviServices.EventMessageType,System.String,BR.AN.PviServices.ServiceCollection)">
            <summary>
            Initializes a new instance of this class using more then one service object.
            </summary>
            <param name="commMethod">Specifies the communication method.</param>
            <param name="name">service name</param>
            <param name="services">ServiceCollection object</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">service name</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.#ctor(System.String,BR.AN.PviServices.ServiceCollection)">
            <summary>
            Initializes a new instance of this class using more then one service object.
            </summary>
            <param name="name">service name</param>
            <param name="services">ServiceCollection object</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.BuildRequestBuffer(System.String)">
            <summary>Helper to build the event string byte buffer and store it in the InPtr.</summary>
            <param name="request">The string containing the request parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.GetErrorText(System.Int32)">
            <summary>Gets the error Text for a specified error number.</summary>
            <remarks>at the moment en-us and de-de are supported</remarks>
            <param name="errNo">The error number.</param>
            <returns>The error Text if available else null.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.Connect(System.String,System.Int32)">
            <summary>
            Initializes this instance using an existing server with port number.
            </summary>
            <param name="server">Server name (IP address or computer name for remote connection)</param>
            <param name="port">Portnumber</param>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Service.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.Connect">
            <summary>Connects the Service Object.</summary>
            <remarks>The Connected event notifies, that the connection was succesful created whereas the "Error" event notifies, that an error has occured.</remarks>
        </member>
        <member name="M:BR.AN.PviServices.Service.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>Connects the Service Object.</summary>
            <remarks>The Connected event notifies, that the connection was succesful created whereas the "Error" event notifies, that an error has occured.</remarks>
            <param name="connectionType">The connection type.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.GetPVIVersionInfo(System.Collections.Hashtable@)">
            <summary>Call this method to retrive the version information of the the main PVI communication components including the Setup version. 
            The result will be available as name to version pair.
            Includes the version number of the active PVI installation (the key is "§PVI Setup§"),
            The versions of the PVI communication librarie (the local one is marked with a starting "§LOCAL§ " and will always have the same version when NOOt using remote communication)
            and the version of the PVI Manager executable.</summary>
            <param name="versionInfos">Contains the resulting verson info. The key is the name of the component and the value is the version string.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.Disconnect">
            <summary>Deinitialize this instance.
            This is a synchronuous function and can not be called within a CB function!!</summary>
        </member>
        <member name="M:BR.AN.PviServices.Service.Disconnect(System.Boolean)">
            <summary>Deletes the connection of this instance to its process object.</summary>
            <param name="noResponse">Do we want a response or not. Default the response will be sent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.DisconnectEx(System.UInt32)">
            <summary>Deinitialize this instance.
            This is a synchronuous function and can not be called within a CB function!!</summary>
        </member>
        <member name="M:BR.AN.PviServices.Service.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnDisconnected is called when a connection is successfully disconnected.
            This method raises the Disconnected event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>Overridable for the Conneced Event.</summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.AttachPVIObjects">
            <summary>Reads the PVI object hierarchie down to the variables for all open INA2000 connections.</summary>
            <remarks>When completed event <seealso cref="E:BR.AN.PviServices.Service.PVIObjectsAttached"/> will be fired.</remarks>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.OnPVIObjectsAttached(BR.AN.PviServices.PviEventArgs)">
            <summary>Raises event <seealso cref="E:BR.AN.PviServices.Service.PVIObjectsAttached"/>will be fired when PVI object hierarchy scanning has finished.</summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.RefreshPviClientsList">
            <summary>Helper to update the list of clients.</summary>
            <returns>Returns zero if successful else a PVI error number.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.UpdateLicenceInfo">
            <summary>Call this method to reread the license info</summary>
            <remarks>The license info will be available after a few seconds after PviManager has been started.</remarks>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.OnLicencInfoUpdated(BR.AN.PviServices.LicenceInfo,System.Int32)">
            <summary>Called whenever the license info changes.</summary>
            <param name="licInfo">the new license info.</param>
            <param name="error">the error code.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_Create(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_Link(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_LinkA(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_LinkB(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_LinkC(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_LinkD(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_LinkE(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI links.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_Event(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_EventA(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_Read(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadA(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadB(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadC(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadD(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadE(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadF(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadG(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadS(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ReadT(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI reads.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_Write(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI writes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_WriteA(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI writes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_WriteB(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI writes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_WriteC(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI writes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_WriteD(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI writes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_WriteE(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI writes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_WriteF(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI writes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_Unlink(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_UnlinkA(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_UnlinkB(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_UnlinkC(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_UnlinkD(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_Delete(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI deletes.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_ChangeLink(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI change links.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVICB_SNMP(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.Callback(System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>CallBack function for PVI communication.</summary>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnError is called when an error occurs. 
            This method raises the Error event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.OnError(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary>The function is called when an error occured. Error Events with ErrorCode 0 will not be fired for the Service Object!!!</summary>
            <param name="sender">The object causing the error.</param>
            <param name="e">The error event args.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.SaveConfiguration(System.String,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the instance and all its child objects hierarchically structured in a xml-File. Use<seealso cref="M:BR.AN.PviServices.Service.LoadConfiguration(System.String)"/> to restore the object hierarchie structure.</summary>
            <remarks>You can use the <seealso cref="T:BR.AN.PviServices.ServiceCollection"/> to stroe multiple Service objects.</remarks>
            <param name="fileName">A relative or absolute path for the xml file.</param>
            <param name="flags">ConfigurationFlags</param>
            <returns>0 if successful, otherwise saving the attributes failed.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.SaveConfiguration(System.String)">
            <summary>Saves the instance and all its child objects hierarchically structured in a xml-File. Use<seealso cref="M:BR.AN.PviServices.Service.LoadConfiguration(System.String)"/> to restore the object hierarchie structure.</summary>
            <remarks>You can use the <seealso cref="T:BR.AN.PviServices.ServiceCollection"/> to stroe multiple Service objects.</remarks>
            <param name="fileName">A relative or absolute path for the xml file.</param>
            <returns>0 if successful, otherwise saving the attributes failed.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.LoadConfiguration(System.String)">
            <summary>Loads an existing PlcService configuration stored in an xml file</summary>
            <param name="fileName">A relative or absolute path for the xml file</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.LoadConfiguration(System.IO.StreamReader)">
            <summary>Loads an existing PviServices configuration from a stream.</summary>
            <param name="stream">StreamReader object</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.LoadConfiguration(System.Xml.XmlTextReader,BR.AN.PviServices.ConfigurationFlags)">
            <summary>
            Not supported
            </summary>
            <param name="reader"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.LoadConfiguration(System.String,BR.AN.PviServices.ConfigurationFlags)">
            <summary>
            Loads an existing PlcSerivces configuration from an xml file using special ConfigurationFlags.
            </summary>
            <param name="fileName">Name (inkl. Pfad) des xml-Files</param>
            <param name="flags">ConfigurationFlags</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.LoadConfiguration(System.IO.StreamReader,BR.AN.PviServices.ConfigurationFlags)">
            <summary>
            Loads an existing PviServices configuration from a stream using special ConfigurationFlags.
            </summary>
            <param name="stream">StreamReader objekt</param>
            <param name="flags">ConfigurationFlags</param>
            <returns>Fehlercode: 0..OK, sonst Fehler</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.Remove">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Service.RemoveArchive(System.String)">
            <summary>Helper to remove a logger archive from the global logger collection.</summary>
            <param name="path">The file name of the logger module to be removed.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.GetErrorText(System.Int32,System.String)">
            <summary>Gets the error text to an error number from the resource files</summary>
            <param name="error">The Error code</param>
            <param name="language">The languge for which to get the error text</param>
            <returns>The error text if the error number is valid else an empty string</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.GetErrorTextPCC(System.UInt32,System.String)">
            <summary>Gets the error text to an error number from the resource files. Only searches the PCC error text resource.</summary>
            <param name="error">The Error code</param>
            <param name="language">The languge for which to get the error text</param>
            <returns>The error text if the error number is valid else an empty string</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.cpyDblToBuffer(System.Object)">
            <summary>Helper to copy data to a byte buffer</summary>
            <param name="value">The value object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.cpyFltToBuffer(System.Object)">
            <summary>Helper to copy data to a byte buffer</summary>
            <param name="value">The value object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Service.toInt16(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toUInt16(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toInt32(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toUInt32(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toInt64(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toUInt64(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toSingle(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toDouble(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toTimeSpan(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toDateTime(System.Byte[],System.Int32)">
            <summary>Helper to convert byte data to System.Type.</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.toString(System.Byte[],System.Int32,System.Int32)">
            <summary>Helper to convert byte data to System.Type.String</summary>
            <param name="bBuffer">The byte buffer to copy from</param>
            <param name="byteOffset">The byte offset in the byte array to start copy</param>
            <param name="strLen">The length of the string byte buffer.</param>
            <returns>The System.Type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.UInt32ToDateTime(System.UInt32)">
            <summary>Helper to get the SystemDateTime data type from an unsigned integer.</summary>
            <param name="timeValue">The time value</param>
            <returns>A system DATETIME data type.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.IsLeap(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVI_UnlinkResponse(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI unlinks.</summary>
            <param name="fnNumber">The function number.</param>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVI_Event(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="fnNumber">The function number.</param>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVI_LinkResponse(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="fnNumber">The function number.</param>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVI_ReadResponse(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="fnNumber">The function number.</param>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="M:BR.AN.PviServices.Service.PVI_WriteResponse(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,BR.AN.PviServices.ResponseInfo@)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="fnNumber">The function number.</param>
            <param name="wParam">Reference to the response data. The "wParam" parameter from the user message must be specified.</param>
            <param name="lParam">This parameter will return the event message parameter supplied by the calls to any request method.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="info">The event info structure containing further information to the event.</param>
            <returns>true if successful else false</returns>
        </member>
        <member name="P:BR.AN.PviServices.Service.Utilities">
            <summary>
            Gets the access to the properties of the service object
            </summary>
            <returns>Utilities</returns>
        </member>
        <member name="P:BR.AN.PviServices.Service.SNMP">
            <summary>Gets the SNMP root object for browsing for MAC addresses and SNMP variables.</summary>
            <value>The SNMP root object for browsing for MAC addresses and SNMP variables.</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.Trace">
            <summary>A Helper class for trace output to a file</summary>
            <value>Trace</value>
        </member>
        <member name="E:BR.AN.PviServices.Service.PVIObjectsAttached">
            <summary>Event will be fired when PVI object hierarchy scanning has finished.</summary>
            <seealso cref="T:BR.AN.PviServices.PVIObjectsAttachedEventHandler"/>
        </member>
        <member name="P:BR.AN.PviServices.Service.ClientNames">
            <summary>Gets the list of Client names</summary>
            <value>ClientNames</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.LicenceInfo">
            <summary>Gets the PVI license info.</summary>
            <value>LicenseInfo</value>
        </member>
        <member name="E:BR.AN.PviServices.Service.LicencInfoUpdated">
            <summary>Occurs when ever the license info changes.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.LogicalObjects">
            <summary>
            Gets collection of all created PviServices object be low this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.Timeout">
            <summary>Communication timeout for the client/server (application/PVI Manager) communication in seconds.
            The timeout also defines the time for the life sign monitor. 
            An additional period is needed to detect a disruption in the client/server connection. 
            To determine the total time where a communication disruption would be detected (at the latest), 
            the timeout value specified here has to be doubled. 
            If the timeout is 5, then an interruption in the connection can be detected in as early as 5 seconds and as late as 10 seconds. 
            Connection interrupts are not recognized as such by the PVICOM interface if they occur within the timeout period. 
            Data transfer simply continues once the connection is reestablished. 
            Often used values are 3 - 10 seconds for local communication and 5 - 30 seconds for remote communication.</summary>
            <value>Timeout: 1 - 3600, = 0 ... Default value of 30 Sec will be used</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.RetryTime">
            <summary>Retry time for PVICOM user messages is seconds.
            The default setting ("RetryTime=0") should normally be used for this parameter. 
            See the User Message Operations section for more information about this parameter.</summary>
            <value>RetryTime:1 - 3600, less or equal to 0 ... no retries (default setting).</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.ProcessTimeout">
            <summary>Process timeout in seconds. Default: "PT=0".
            This timeout can be used to monitor the time between requests and responses. 
            This parameter is only intended for PVICOM applications which carry out particular tasks. 
            Standard application do not need to be monitored and should use the default setting (no timeout monitoring).</summary>
            <value>ProcessTimeout: 1 - 3600, less or equal to 0 -> No timeout monitoring</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.MessageLimitation">
            <summary>Limit on user messages. Default: "LM=1" for W32 and W64 zero for CF.
            PVICOM applications basically do not need to change the default setting of this parameter. 
            However, if an application is able to respond quickly to PVICOM user messages, 
            then a higher limit value ("LM=100", "LM=1000") or turning off the limiting ("LM=0") can speed up user message execution. 
            See the User Message Operations section for more information about this parameter.</summary>
            <value>MessageLimitation: 1 - 65535, less or equal to 0 -> No limiting.</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.PVIAutoStart">
            <summary>Auto-Start (only for the local communication type).
            1 ... PVI Manager is started (default).
            0 ... PVI Manager is not started automatically and must be started already when the function is called.</summary>
            <value>PVIAutoStart</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.Language">
            <summary>
            Gets or sets the language of this service-instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.Port">
            <summary>
            Gets or sets the port number for the remote connection.
            </summary>
            <remarks>
            The value must be between 1024 and 32767.
            Default value: 20000
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.Service.Server">
            <summary>
            Gets or sets the server IP address or server name for remote connection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.Cpus">
            <summary>
            Gets a collection of all configured cpu devices
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.IsStatic">
            <summary>
            Gets or sets a bool flag for generating static (true) or dynamic (false)
            communication objects. Defaultvalue = false.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.AddMembersToVariableCollection">
            <summary>Gets or sets wheter variable members should be add to the Variables Collections or not. This feature is set to OFF by default.</summary>
            <value>AddMembersToVariableCollection</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.ExtendedTypeInfoAutoUpdateForVariables">
            <summary>Gets if the extended Typ info for variables should be uploaded automatically or not.
            (ArrayDimensions, Enumerations, Derivation and Bit-String)
            This extended typ information is not aalways of interest therefore it is disabled by default.
            This is due to the fact that it takes longer to connect varibales if extended type info is available.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.AddStructMembersToMembersToo">
            <summary>Get or set if the members of nested structures should be add to the root only,
            or if all members should get their child members too.
            When enabling this flag the performance may decrees when using deep nested structures and arrays of structures!
            By default the structure members will only be add to the root objects key map.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.LogicalObjectsUsage">
            <summary>
            Gets or sets the LogicalObjectUsage value.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.UserTagEvents">
            <summary>Gets or sets wheter to enable user tag events or not (EV=u). DEFAULT = true!</summary>
            <value>Is the user tag event mechanism enabled or not (EV=u).</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.Variables">
            <summary>
            Gets a collection of intern PviServices variable object.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Service.WaitForParentConnection">
            <summary>
            Gets or sets the WaitForParentConnection property.
            </summary>
            <remarks>
            The property specifies whether an PviServices object wait for its parent connection.
            </remarks>
            <example>
            <code>
            // Calling the Connect Method of a variable object before its parent (cpu object) is connected.
            Cpu cpuObj = new Cpu(serviceObj,"Cpu1);
            Variable var = new Variable(cpuObj,"var1");
            // 1. Connect variable
            var.Connect();
            ..
            ..
            // 2. Connect cpu
            cpuObj.Connect();
            
            // If this property is set true (default case) the variable object
            // waits for its parent (cpu object) connection. So the Connected event
            // of the cpu object causes to connect the waiting variable object.
            </code>
            </example>
        </member>
        <member name="P:BR.AN.PviServices.Service.LoggerEntries">
            <summary>Gets the collection of logger entries if <seealso cref="P:BR.AN.PviServices.Logger.GlobalMerge"/> is TRUE.</summary>
            <value>The collection of logger entries if <seealso cref="P:BR.AN.PviServices.Logger.GlobalMerge"/> is TRUE.</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.LoggerCollections">
            <summary>Gets the collection of global logger modules.</summary>
            <value>The collection of global logger modules.</value>
        </member>
        <member name="P:BR.AN.PviServices.Service.ByteBuffer">
            <summary>Gets the bytes for the buffer which have been set by cpyDblToBuffer or cpyFltToBuffer.</summary>
            <value>ByteBuffer</value>
        </member>
        <member name="T:BR.AN.PviServices.Utilities">
            <summary>Utility class for various PviServices specific access methods.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Utilities.#ctor">
            <summary>Initializes a new instance of the Utilities class.</summary>
        </member>
        <member name="F:BR.AN.PviServices.Utilities.propDisposed">
            <summary>The item has been propDisposed so do not send any events any longer!!</summary>
        </member>
        <member name="M:BR.AN.PviServices.Utilities.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Utilities.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Utilities.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Utilities.GetErrorText(System.Int32)">
            <summary>Gets the error text for a specified error number. Uses the culture info set by the property ActiveCulture.</summary>
            <remarks>At the momen de (de-de) and en (en-us) are supported.</remarks>
            <param name="error">The error number.</param>
            <returns>The error text if the error number is valid else an empty string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Utilities.GetErrorText(System.Int32,System.String)">
            <summary>Gets the error text for a specified error number.</summary>
            <remarks>At the momen de (de-de) and en (en-us) are supported.</remarks>
            <param name="error">The error number.</param>
            <param name="culture">The culture string. At the momen de (de-de) and en (en-us) are supported.</param>
            <returns>The error text if the error number is valid else an empty string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Utilities.GetErrorTextPCC(System.UInt32)">
            <summary>Gets the error text for a specified error number. PCC - Errors only.</summary>
            <remarks>At the momen de (de-de) and en (en-us) are supported.</remarks>
            <param name="error">The error number.</param>
            <returns>The error text if the error number is valid else an empty string.</returns>
        </member>
        <member name="E:BR.AN.PviServices.Utilities.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Utilities.ActiveCulture">
            <summary>Gets or sets the active culture info string.</summary>
            <value>ActiveCulture</value>
        </member>
        <member name="T:BR.AN.PviServices.ServiceLoggerEntryCollection">
            <summary>Helper Class to handle service logger entries methods</summary>
        </member>
        <member name="M:BR.AN.PviServices.ServiceLoggerEntryCollection.#ctor(BR.AN.PviServices.Base,System.String)">
            <summary>Initializes a new instance of the LoggerEntryCollection class.</summary>
            <param name="parent">The parent object</param>
            <param name="name">The name of the collection.</param>
        </member>
        <member name="M:BR.AN.PviServices.ServiceLoggerEntryCollection.GetArrayIndex(BR.AN.PviServices.LoggerEntryBase)">
            <summary>Helper to get the apropriate array index.</summary>
            <param name="eEntry">The logger entry</param>
            <returns>Returns the array index of the logger entry</returns>
        </member>
        <member name="M:BR.AN.PviServices.ServiceLoggerEntryCollection.SetArrayIndex(BR.AN.PviServices.LoggerEntryBase)">
            <summary>Helper to set the apropriate array index.</summary>
            <param name="eEntry">The logger entry</param>
        </member>
        <member name="M:BR.AN.PviServices.ServiceLoggerEntryCollection.UpdateArrayIndices(System.Int32)">
            <summary>Helper to update the items array index.</summary>
            <param name="idxRemoved">The index which has been removed</param>
        </member>
        <member name="T:BR.AN.PviServices.TextWriterTraceListenerWithTime">
            <summary>Override of the TextWriterTraceListener to get the time stamp.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.#ctor">
            <summary>Initializes a new instance of the TextWriterTraceListenerWithTime class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the TextWriterTraceListenerWithTime class.</summary>
            <param name="stream"></param>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.#ctor(System.String)">
            <summary>Initializes a new instance of the TextWriterTraceListenerWithTime class.</summary>
            <param name="path"></param>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.#ctor(System.IO.TextWriter)">
            <summary>Initializes a new instance of the TextWriterTraceListenerWithTime class.</summary>
            <param name="writer"></param>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.#ctor(System.IO.Stream,System.String)">
            <summary>Initializes a new instance of the TextWriterTraceListenerWithTime class.</summary>
            <param name="stream"></param>
            <param name="name"></param>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the TextWriterTraceListenerWithTime class.</summary>
            <param name="path"></param>
            <param name="name"></param>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.#ctor(System.IO.TextWriter,System.String)">
            <summary>Initializes a new instance of the TextWriterTraceListenerWithTime class.</summary>
            <param name="writer"></param>
            <param name="name"></param>
        </member>
        <member name="M:BR.AN.PviServices.TextWriterTraceListenerWithTime.WriteLine(System.String)">
            <summary>Writes a simple line of code</summary>
            <param name="message"></param>
        </member>
        <member name="T:BR.AN.PviServices.TraceWriter">
            <summary>This class implements basic logging functionality based on the Trace command</summary>
            <remarks>The trace file will always be located in the executables run directory.
            The name of the trace file will start with "Trace" followwed by the date and time e.g.: Trace20050828_084423.log</remarks>
        </member>
        <member name="M:BR.AN.PviServices.TraceWriter.#ctor">
            <summary>Initializes a new instance of the TraceWriter class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TraceWriter.WriteLine(System.String,System.String)">
            <summary>Writes a single line to the trace output. Date and timestamp will be add automatically!!!</summary>
            <param name="context">The context the trace line belongs to.</param>
            <param name="logMessage">The message to be traced</param>
        </member>
        <member name="M:BR.AN.PviServices.TraceWriter.WriteLine(System.String)">
            <summary>Writes a single line to the trace output. Date and timestamp will be add automatically!!!</summary>
            <param name="logMessage">The message to be traced</param>
        </member>
        <member name="T:BR.AN.PviServices.ServiceCollection">
            <summary>
            An instance of this class represents a collection of Service objects.
            It is used to manage more than one Service object. 
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <example>
            <code>
            // Creating a new ServiceCollection instance
            ServiceCollection serviceCollection = new ServiceCollection();
            // Creating two Service objects which are added automatically to 
            // the ServiceCollection object.
            Service service_01 = new Service("Service_01",serviceCollection);
            Service service_02 = new Service("Service_02",serviceCollection);
            
            // ... create some Plcservices objects.
            
            
            // Saving PviServices configuration in a xml-File
            serviceCollection.SavexConfiguration("C:\\PviServices_configuration.xml")
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.LoadConfiguration(System.String)">
            <summary>
            Loads an existing PviServices configuration from a xml file.
            </summary>
            <param name="fileName">A relative or absolute path for the xml file</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.LoadConfiguration(System.IO.StreamReader,BR.AN.PviServices.ConfigurationFlags)">
            <summary>
            Loads an existing PviServices configuration from a stream using special ConfigurationFlags.
            </summary>
            <param name="stream">StreamReader objekt</param>
            <param name="flags">ConfigurationFlags</param>
            <returns>Fehlercode: 0..OK, sonst Fehler</returns>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.LoadConfiguration(System.IO.StreamReader)">
            <summary>
            Loads an existing PviServices configuration from a stream.
            </summary>
            <param name="stream">StreamReader object</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.LoadConfiguration(System.String,BR.AN.PviServices.ConfigurationFlags)">
            <summary>
            Loads an existing PlcSerivces configuration from an xml file using special ConfigurationFlags.
            </summary>
            <param name="fileName">A relative or absolute path for the xml file</param>
            <param name="flags">ConfigurationFlags</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.SaveConfiguration(System.String)">
            <summary>Saves all actual configured PviServices objects hierarchically structured in a xml-File.</summary>
            <param name="fileName">A relative or absolute path for the xml file.</param>
            <returns>0 if successful, otherwise saving the attributes failed.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.SaveConfiguration(System.String,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves all actual configured PviServices objects in consideration of special settings hierarchically structured in a xml-File.</summary>
            <param name="fileName">A relative or absolute path for the xml file.</param>
            <param name="flags">ConfigurationFlags</param>
            <returns>0 if successful, otherwise saving the attributes failed.</returns>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.Add(BR.AN.PviServices.Service)">
            <summary>
            Adds a Service object to this instance.
            </summary>
            <param name="service">Service object</param>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.Connect">
            <summary>
            Connects each Service object of this instance.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.ServiceCollection.Disconnect">
            <summary>
            Disconnects each Service object of this instance.
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ServiceCollection.Services">
            <summary>
            Static list of the Service object instances 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.ServiceCollection.Trace">
            <summary>The trace helper.</summary>
            <value>Trace</value>
        </member>
        <member name="P:BR.AN.PviServices.ServiceCollection.LogicalObjects">
            <summary>
            Gets a collection of LogicalObjects.
            <see cref="T:BR.AN.PviServices.LogicalCollection"/>
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.ServiceCollection.LogicalObjectsUsage">
            <summary>
            Gets or sets the type of using LogicalObjects.
            <see cref="T:BR.AN.PviServices.LogicalObjectsUsage"/>
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.ServiceCollection.Item(System.String)">
            <summary>
            Gets a Service object by its name.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.SNMPConnectionStates">
            <summary>Enumeration of SNMP connection states</summary>
        </member>
        <member name="F:BR.AN.PviServices.SNMPConnectionStates.Unpluged">
            <summary>The network cable has been unpluged or the MAC address is no longer valid.</summary>
        </member>
        <member name="F:BR.AN.PviServices.SNMPConnectionStates.Connected">
            <summary>The MAC address is valid for this SNMP boradcast.</summary>
        </member>
        <member name="T:BR.AN.PviServices.NetworkAdapter">
            <summary>Implements the abstraction of a SNMP network adapter.</summary>
        </member>
        <member name="T:BR.AN.PviServices.SNMPBase">
            <summary>Base class for all SNMP objects..</summary>
        </member>
        <member name="F:BR.AN.PviServices.SNMPBase.propLinkID">
            <summary>The PVI link ID for this object.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.#ctor(System.String,BR.AN.PviServices.Service)">
            <summary>Initializes a new instance of the internal SNMPBase class.</summary>
            <param name="name">The name of the object.</param>
            <param name="serviceOBJ">The reference to the service object.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.#ctor(System.String,BR.AN.PviServices.SNMPBase)">
            <summary>Initializes a new instance of the internal SNMPBase class.</summary>
            <param name="name">The name of the object.</param>
            <param name="parentOBJ">The reference to the service object.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.InitConnect(BR.AN.PviServices.Service)">
            <summary>
            Helper for initialization
            </summary>
            <param name="serviceOBJ">The reference to the service object.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.InitConnect(BR.AN.PviServices.SNMPBase)">
            <summary>
            Helper for initialization
            </summary>
            <param name="parentOBJ">The reference to the parent object.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Save the device settings to the export file.</summary>
            <param name="writer">The reference of the XML writer component.</param>
            <param name="flags">Flags for the configuration options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.OnPviCreated(System.Int32,System.UInt32)">
            <summary>Global CallBack function for PVI creates.</summary>
            <param name="errorCode">The error code if creating the object failed.</param>
            <param name="linkID">The link id if the object is linked directly.</param>
        </member>
        <member name="F:BR.AN.PviServices.SNMPBase.propService">
            <summary>The reference to the service object.</summary>
        </member>
        <member name="F:BR.AN.PviServices.SNMPBase.propParent">
            <summary>The parent object for this instance. if null this is the root.</summary>
        </member>
        <member name="F:BR.AN.PviServices.SNMPBase.propIsConnected">
            <summary>Has teh object been connected or not.</summary>
        </member>
        <member name="F:BR.AN.PviServices.SNMPBase.propServiceArrayIndex">
            <summary>The array inex for the global object pool.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.Cleanup">
            <summary>Free unused allocated memory.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.CancelRequest">
            <summary>Helper to remove event handlers for an unused object.</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.DeleteRequest(System.String)">
            <summary>Helper to delet the PVI object.</summary>
            <param name="objName">The name of the object to delete.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.DeleteRequest">
            <summary>Helper to delet the PVI object.</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.ConnectPviObject(System.Boolean,System.String,System.String,System.String,BR.AN.PviServices.ObjectType,System.Int32,System.UInt32@)">
            <summary>Helper to create the PVI object.</summary>
            <param name="withEvents">Should an event handler for STD events be setup or not.</param>
            <param name="objName">The name of the PVI object.</param>
            <param name="objDesc">The process object description for the PVI object.</param>
            <param name="lnkDesc">The link object description for the PVI object.</param>
            <param name="objType">The type of PVI object.</param>
            <param name="action">The action helper.</param>
            <param name="linkID">The returned LINK ID from PVI.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.UnlinkPviObject(System.UInt32)">
            <summary>Helper to unlink the PVI object.</summary>
            <param name="linkID">The returned LINK ID from PVI.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.Connect">
            <summary>Call this method to force a connection to the PVI objects.</summary>
            <returns>0 on succes. -1 if not implemented else an error number > 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.Disconnect">
            <summary>Call this method to force a connection to the PVI objects to be disconnected.</summary>
            <returns>0 on succes. -1 if not implemented else an error number > 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.Disconnect(System.Boolean)">
            <summary>Call this method to force a connection to the PVI objects to be disconnected.</summary>
            <param name="synchronous">Should the command be executed synchronously.</param>
            <returns>0 on succes. -1 if not implemented else an error number > 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.GetSNMPVariables(System.Int32,System.Int32)">
            <summary>Check the network for the presence of local or global SNMP variables.
            These are variables which do or not belong to a MAC address.</summary>
            <remarks>Will get data from PVI by requesting POBJ_ACC_LIST_PVAR or POBJ_ACC_LIST_EXTERN.</remarks>
            <param name="linkID">The object link ID.</param>
            <param name="action">Theaction helper.</param>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.OnSearchCompleted(BR.AN.PviServices.ErrorEventArgs)">
            <summary>Overridable for Event <seealso cref="E:BR.AN.PviServices.SNMPBase.SearchCompleted"/>.</summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.OnError(BR.AN.PviServices.ErrorEventArgs)">
            <summary>Overridable for Event <seealso cref="E:BR.AN.PviServices.SNMPBase.Error"/>.</summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.RemoveFromCBReceivers">
            <summary>Helper to remove the object from the PVI callback servicers ID array</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPBase.AddToCBReceivers">
            <summary>Helper to add all object which might receive a PVI callback to the service IDs array</summary>
            <returns>True if successful else false.</returns>
        </member>
        <member name="P:BR.AN.PviServices.SNMPBase.Parent">
            <summary>The parent object for this instance. if null this is the root.</summary>
            <value>The reference to the parent object.</value>
        </member>
        <member name="P:BR.AN.PviServices.SNMPBase.Service">
            <summary>Gets the reference to the service object.</summary>
            <value>The reference to the service object.</value>
        </member>
        <member name="P:BR.AN.PviServices.SNMPBase.Name">
            <summary>Gets the name of the object.</summary>
            <value>The name of the object.</value>
        </member>
        <member name="P:BR.AN.PviServices.SNMPBase.FullName">
            <summary>Gets the name of teh object an all names of all parent objects in hierarchy.</summary>
            <value>The name of teh object an all names of all parent objects in hierarchy.</value>
        </member>
        <member name="P:BR.AN.PviServices.SNMPBase.UserData">
            <summary>Gets or sets the UserData for this instance.</summary>
            <value>The UserData-property provides a position to store special user information for a PviServices object.</value>
        </member>
        <member name="E:BR.AN.PviServices.SNMPBase.SearchCompleted">
            <summary>Called whenever the ResponseTimeout elapsed due to a call on Method Search.</summary>
            <seealso cref="T:BR.AN.PviServices.ErrorEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.SNMPBase.Error">
            <summary>Called whenever an internal search error occurs.</summary>
            <seealso cref="T:BR.AN.PviServices.ErrorEventHandler"/>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapter.#ctor(System.String,BR.AN.PviServices.SNMPBase)">
            <summary>Initializes a new instance of the NetworkAdapter class.</summary>
            <param name="macAdr">The mac address for this CNMP adapter.</param>
            <param name="parentObj">The reference to the parent object.</param>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapter.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapter.Search">
            <summary>Search vor all SNMP varaibles for this SNMP station.</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapter.Cleanup">
            <summary>Free unused allocated memory.</summary>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapter.Disconnect(System.Boolean)">
            <summary>Call this method to force a connection to the PVI objects to be disconnected.</summary>
            <param name="synchronous">Should the command be executed synchronously.</param>
            <returns>0 on succes. -1 if not implemented else an error number > 0.</returns>
        </member>
        <member name="P:BR.AN.PviServices.NetworkAdapter.Variables">
            <summary>Gets the collection of variable objects.</summary>
            <value>Variables</value>
        </member>
        <member name="P:BR.AN.PviServices.NetworkAdapter.State">
            <summary>Gets the connection state for this network adapter.</summary>
            <value>The connection state for this network adapter.</value>
        </member>
        <member name="P:BR.AN.PviServices.NetworkAdapter.MACAddress">
            <summary>The MAC address for this network adapter.</summary>
            <value>MAC address for this network adapter.</value>
        </member>
        <member name="T:BR.AN.PviServices.NetworkAdapterCollection">
            <summary>Implements the abstraction of a SNMP network adapter.</summary>
        </member>
        <member name="T:BR.AN.PviServices.SNMPCollectionBase">
            <summary>Implements the abstraction of a SNMP network adapter.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.#ctor(System.String,BR.AN.PviServices.SNMPBase)">
            <summary>Initializes a new instance of the SNMPCollectionBase class.</summary>
            <param name="name">The name of the collection.</param>
            <param name="parentObj">The reference to the parent object.</param>
        </member>
        <member name="F:BR.AN.PviServices.SNMPCollectionBase.propRequestCount">
            <summary>The number of open serach requests.</summary>
        </member>
        <member name="F:BR.AN.PviServices.SNMPCollectionBase.propRequesting">
            <summary>Specifies wheter the request is still active.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.Cleanup">
            <summary>Free unused allocated memory</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.ContainsKey(System.String)">
            <summary>Determines whether the System.Collections.Hashtable contains a specific key. </summary>
            <remarks>System.ArgumentNullException if key is null.</remarks>
            <param name="key">The key to locate in the System.Collections.Hashtable.</param>
            <returns>true if the System.Collections.Hashtable contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.Add(System.String,System.Object)">
            <summary></summary>
            <remarks></remarks>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.Remove(System.String)">
            <summary></summary>
            <remarks></remarks>
            <param name="key"></param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.OnChanged(BR.AN.PviServices.CollectionErrorEventArgs)">
            <summary>Overridable for Event <seealso cref="E:BR.AN.PviServices.SNMPCollectionBase.Changed"/>.</summary>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.GetEnumerator">
            <summary>Represents a collection of key-and-value pairs that are organized based on the hash code of the key</summary>
            <returns>An System.Collections.IDictionaryEnumerator for the System.Collections.Hashtable.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>Copies the System.Collections.Hashtable elements to a one-dimensional System.Array instance at the specified index.</summary>
            <param name="array">The one-dimensional System.Array that is the destination of the System.Collections.DictionaryEntry objects copied from System.Collections.Hashtable. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex ">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:BR.AN.PviServices.SNMPCollectionBase.Count">
            <summary>Gets the number of items of the collection.</summary>
            <value>Count</value>
        </member>
        <member name="P:BR.AN.PviServices.SNMPCollectionBase.Values">
            <summary>Gets the values of the collection.</summary>
            <value>Values</value>
        </member>
        <member name="P:BR.AN.PviServices.SNMPCollectionBase.Keys">
            <summary>Gets the keys of the collection.</summary>
            <value>Keys</value>
        </member>
        <member name="E:BR.AN.PviServices.SNMPCollectionBase.Changed">
            <summary>Called whenever an the coll3ection members change.</summary>
            <seealso cref="T:BR.AN.PviServices.CollectionErrorEventHandler"/>
        </member>
        <member name="P:BR.AN.PviServices.SNMPCollectionBase.IsSynchronized">
            <summary>Gets a value indicating whether access to the System.Collections.Hashtable is synchronized (thread-safe).</summary>
            <value>IsSynchronized</value>
        </member>
        <member name="P:BR.AN.PviServices.SNMPCollectionBase.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the System.Collections.Hashtable.</summary>
            <value>SyncRoot</value>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapterCollection.#ctor(System.String,BR.AN.PviServices.SimpleNetworkManagementProtocol)">
            <summary>Initializes a new instance of the NetworkAdapterCollection class.</summary>
            <param name="name">The name of the collection.</param>
            <param name="parentObj">The reference to the parent object.</param>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapterCollection.MACAddresses_ValueChanged(System.Object,BR.AN.PviServices.VariableEventArgs)">
            <summary>Event handler for MAC address update.</summary>
            <param name="sender">The object which caused the event.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapterCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapterCollection.Search">
            <summary>Search vor all SNMP varaibles for all SNMP station.</summary>
            <returns>0 on success. -1 if search is active.</returns>
        </member>
        <member name="M:BR.AN.PviServices.NetworkAdapterCollection.Cleanup">
            <summary>Free unused allocated memory.</summary>
        </member>
        <member name="P:BR.AN.PviServices.NetworkAdapterCollection.RefreshTime">
            <summary>Gets or sets the refresh time for searching for MAC addresses.
            If 0 the cyclic MAC addresses BROADCAST will not be carried out.
            By default cyclic scanning for MAC addresses is disabled.
            Best practice  value is 20 x SNMP.ResponseTimeout.
            Minimum is 2 x SNMP.ResponseTimeout.</summary>
            <value>Refresh time for searching for MAC addresses.</value>
        </member>
        <member name="P:BR.AN.PviServices.NetworkAdapterCollection.Item(System.String)">
            <summary>Indexer function.</summary>
            <param name="indexer">The MAC address will be used as key for searching</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="T:BR.AN.PviServices.SimpleNetworkManagementProtocol">
            <summary>This class abstarcts the SNMP for B+R targets.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.#ctor(BR.AN.PviServices.Service)">
            <summary>
            Initializes a new instance of the TcpIp class
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Save the device settings to the export file.</summary>
            <param name="writer">The reference of the XML writer component.</param>
            <param name="flags">Flags for the configuration options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Reads the configuration from xml configuration file and updates.</summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.Search">
            <summary>Check the network for the presence of SNMP stations.
            Will fire SearchCompleted after <seealso cref="P:BR.AN.PviServices.SimpleNetworkManagementProtocol.ResponseTimeout"/> elapsed.
            Once the search has completed the member <seealso cref="P:BR.AN.PviServices.SimpleNetworkManagementProtocol.NetworkAdapters"/> and SNMPVariables will be set.</summary>
            <remarks>Will not fire the event if the method returns an error code.</remarks>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.Connect">
            <summary>Call this method to force a connection to the PVI objects.</summary>
            <returns>0 on succes. -1 if not implemented else an error number > 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.ConnectPviObjects">
            <summary>Helper to creta the PVI objects LINE and DEVICE.</summary>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.GetMACStations">
            <summary>Check the network for the presence of SNMP stations.</summary>
            <remarks>Will get data from PVI by requesting POBJ_ACC_LIST_EXTERN. The result will be filtered by "OT=Station". All other objects will be ignored!</remarks>
            <returns>0 on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.Cleanup">
            <summary>Free unused allocated memory.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="P:BR.AN.PviServices.SimpleNetworkManagementProtocol.ResponseTimeout">
            <summary>Gets or sets the timeout for SNMP requests. Value range: 100 to 15000. Default is 1000.</summary>
            <value>The timeout for SNMP requests.</value>
        </member>
        <member name="P:BR.AN.PviServices.SimpleNetworkManagementProtocol.NetworkAdapters">
            <summary>Gets the collection of network adapters.</summary>
            <remarks>Will be null if no network adapter has been located by <seealso cref="M:BR.AN.PviServices.SimpleNetworkManagementProtocol.Search"/>.</remarks>
            <value>A collection of <seealso cref="T:BR.AN.PviServices.NetworkAdapter"/> objects.</value>
        </member>
        <member name="P:BR.AN.PviServices.SimpleNetworkManagementProtocol.Variables">
            <summary>Gets sthe collection of variable objects.</summary>
            <value>Variables</value>
        </member>
        <member name="T:BR.AN.PviServices.ErrorEventHandler">
            <summary>Delegates all standard events which have simply an error code as parameter.</summary>
            <param name="sender">The object which raises the event.</param>
            <param name="e">The event parameters containing the error number.</param>
        </member>
        <member name="T:BR.AN.PviServices.CollectionErrorEventHandler">
            <summary>Delegates all standard events which have simply an error code as parameter.</summary>
            <param name="sender">The object which raises the event.</param>
            <param name="e">The event parameters containing the error number.</param>
        </member>
        <member name="T:BR.AN.PviServices.SNMPVariableCollection">
            <summary>Implements the abstraction of a SNMP network global and local variables.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.#ctor(System.String,BR.AN.PviServices.SNMPBase)">
            <summary>Initializes a new instance of the SNMPVariableCollection class.</summary>
            <param name="name">The name of the collection.</param>
            <param name="parentObj">The reference to the parent object.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.Disconnect">
            <summary>
            Synchronous unlinks the variable objects (at the moment there is no need to do this asynchronous
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.Disconnect(System.Boolean)">
            <summary>
            Synchronous unlinks the variable objects
            </summary>
            <param name="synchronous">Flag which indicates the synchronous unlink.</param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.Cleanup">
            <summary>Free unused allocated memory.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.ReadFiltered(System.Collections.Generic.List{System.String})">
            <summary>Read a subset off all SNMP variables.</summary>
            <param name="filter">List of all variable names to read</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.Read">
            <summary>Read all SNMP varaibles.</summary>
            <returns>0 on success. -1 if request is active else an error number > 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.tmpVar_Connected(System.Object,BR.AN.PviServices.PviEventArgs)">
            <summary></summary>
            <remarks></remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.Write">
            <summary>Write all SNMP varaibles.</summary>
            <returns>0 on success. -1 if request is active else an error number > 0.</returns>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.OnValuesRead(BR.AN.PviServices.ErrorEventArgs)">
            <summary>Overridable for Event <seealso cref="E:BR.AN.PviServices.SNMPVariableCollection.ValuesRead"/>.</summary>
            <param name="e">The event parameters. e.ErrorCode will be the nuber of failed ReadRequests.</param>
        </member>
        <member name="M:BR.AN.PviServices.SNMPVariableCollection.OnValuesWritten(BR.AN.PviServices.ErrorEventArgs)">
            <summary>Overridable for Event <seealso cref="E:BR.AN.PviServices.SNMPVariableCollection.ValuesWritten"/>.</summary>
            <param name="e">The event parameters. e.ErrorCode will be the nuber of failed WriteRequests.</param>
        </member>
        <member name="P:BR.AN.PviServices.SNMPVariableCollection.Item(System.String)">
            <summary>Indexer function.</summary>
            <param name="indexer">The key to be used for searching</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="E:BR.AN.PviServices.SNMPVariableCollection.ValuesRead">
            <summary>Called whenever the values collection has been read.</summary>
            <seealso cref="T:BR.AN.PviServices.ErrorEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.SNMPVariableCollection.ValuesReadFiltered">
            <summary>Called whenever a filtered set of values from the collection has been read.</summary>
            <seealso cref="T:BR.AN.PviServices.ErrorEventHandler"/>
        </member>
        <member name="E:BR.AN.PviServices.SNMPVariableCollection.ValuesWritten">
            <summary>Called whenever the values collection has been written. Errors will be reported in the Error event.</summary>
            <seealso cref="T:BR.AN.PviServices.ErrorEventHandler"/>
        </member>
        <member name="T:BR.AN.PviServices.StructMemberCollection">
            <summary>Basic structure member collection</summary>
        </member>
        <member name="M:BR.AN.PviServices.StructMemberCollection.#ctor">
            <summary>Initializes a new instance of the StructMemberCollection class.</summary>
        </member>
        <member name="M:BR.AN.PviServices.StructMemberCollection.#ctor(System.Int32)">
            <summary>Initializes a new instance of the StructMemberCollection class. This constructor initilizes a virtual collection. All objects will be created on demand!!</summary>
            <param name="count">The size of the array.</param>
        </member>
        <member name="M:BR.AN.PviServices.StructMemberCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.StructMemberCollection.Clone">
            <summary>Clones this instance.</summary>
            <returns>The clone of this instance.</returns>
        </member>
        <member name="F:BR.AN.PviServices.StructMemberCollection.propCount">
            <summary>The array size</summary>
        </member>
        <member name="P:BR.AN.PviServices.StructMemberCollection.Item(System.String)">
            <summary>This indexer returns the object given the key.</summary>
            <param name="name">The key for the item to get.</param>
            <returns>The object if the index is valid.</returns>
        </member>
        <member name="P:BR.AN.PviServices.StructMemberCollection.Item(System.Int32)">
            <summary>Enumerator for the indexed version.</summary>
            <param name="index">Index for which to get the value objet.</param>
            <returns>The object name or the Variable object  if the index is valid.</returns>
        </member>
        <member name="P:BR.AN.PviServices.StructMemberCollection.IsVirtual">
            <summary>Gets if it is avirtual collection or not. If true the iteration has to be done by a for loop. The GetEnumerator and the ContainsKey Methods are invalid in this case!!</summary>
            <value>IsVirtual</value>
        </member>
        <member name="P:BR.AN.PviServices.StructMemberCollection.Count">
            <summary>Gets the number of elements actually contained in the System.Collections.ArrayList. </summary>
            <value>Count</value>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_CpuDateTime">
             <summary>
            struct tm 
            {
            	int tm_sec;     /* seconds after the minute - [0,59] */
            	int tm_min;     /* minutes after the hour - [0,59] */
            	int tm_hour;    /* hours since midnight - [0,23] */
            	int tm_mday;    /* day of the month - [1,31] */
            	int tm_mon;     /* months since January - [0,11] */
            	int tm_year;    /* years since 1900 */
            	int tm_wday;    /* days since Sunday - [0,6] */
            	int tm_yday;    /* days since January 1 - [0,365] */
            	int tm_isdst;   /* daylight savings time flag */
            };
             {secret}
             </summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_CpuInfoRes">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_DiagModulInfoResConstants">
            <summary>Constant declarations for APIFC_DiagModulInfoResConstants</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFC_DiagModulInfoResConstants.APIFC_DiagModulInfoRes_Size">
            <summary>Size of the APIFC_DiagModulInfoRes structure</summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_DiagModulInfoRes">
            <summary>Module info for diagnosis mode.</summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_ModulInfoResConstants">
            <summary>Constant declarations for APIFC_ModulInfoResConstants</summary>
        </member>
        <member name="F:BR.AN.PviServices.APIFC_ModulInfoResConstants.APIFC_ModulInfoRes_Size">
            <summary>Size of the APIFC_ModulInfoRes structure</summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_ModulInfoRes">
            <summary>Struct for module info.</summary>
        </member>
        <member name="T:BR.AN.PviServices.ProgressInfo">
            <summary>
            Progress information structure from PVI
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgressInfo.Access">
            <summary>Access type of the running request</summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgressInfo.Percent">
            <summary>Progress given in % (0 - 100) </summary>
        </member>
        <member name="F:BR.AN.PviServices.ProgressInfo.Info">
            <summary>Additional information text for display </summary>
        </member>
        <member name="T:BR.AN.PviServices.ResponseInfo">
            <summary>This structure represents Response/Event-Message information.</summary>
        </member>
        <member name="M:BR.AN.PviServices.ResponseInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the ResponseInfo class.</summary>
            <param name="linkID">The ID for the link objekt</param>
            <param name="mode">The access or event mode.</param>
            <param name="type">The type of response.</param>
            <param name="error">The errror code.</param>
            <param name="status">The state.</param>
        </member>
        <member name="F:BR.AN.PviServices.ResponseInfo.LinkId">
            <summary>LinkId</summary>
        </member>
        <member name="F:BR.AN.PviServices.ResponseInfo.Mode">
            <summary>Request/Response Mode</summary>
        </member>
        <member name="F:BR.AN.PviServices.ResponseInfo.Type">
            <summary>Access or event type</summary>
        </member>
        <member name="F:BR.AN.PviServices.ResponseInfo.Error">
            <summary>ErrorCode</summary>
        </member>
        <member name="F:BR.AN.PviServices.ResponseInfo.Status">
            <summary>Response/Event State</summary>
        </member>
        <member name="T:BR.AN.PviServices.SyncReadData">
            <summary>Implements the response data parameter for synchronous access to PVI.</summary>
        </member>
        <member name="M:BR.AN.PviServices.SyncReadData.#ctor(System.Int32)">
            <summary>Initializes a new instance of the SyncReadData class.</summary>
            <param name="dataLength">The length of the data to allocate.</param>
        </member>
        <member name="M:BR.AN.PviServices.SyncReadData.FreeBuffers">
            <summary>Call this method to free the buffers again</summary>
        </member>
        <member name="P:BR.AN.PviServices.SyncReadData.PtrData">
            <summary>Gets or sets the pointer to the data.</summary>
            <value>PtrData</value>
        </member>
        <member name="P:BR.AN.PviServices.SyncReadData.DataLength">
            <summary>Gets the lengh of the data in bytes.</summary>
            <value>DataLength in Bytes</value>
        </member>
        <member name="P:BR.AN.PviServices.SyncReadData.PtrArgData">
            <summary>Gets or sets the pointer to the argument data.</summary>
            <value>PtrArgData</value>
        </member>
        <member name="P:BR.AN.PviServices.SyncReadData.ArgDataLength">
            <summary>Gets the lengh of the data in the argument data in bytes.</summary>
            <value>ArgDataLength in Bytes</value>
        </member>
        <member name="T:BR.AN.PviServices.Task">
            <summary>
            This class is used to create a PviServices task object, which offers services
            to control BR tasks and its properties.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Task.#ctor(BR.AN.PviServices.Cpu,System.String)">
            <summary>
            Initializes a new instance of the Task class.
            </summary>
            <exception cref="T:System.ArgumentException">Task object allready exists.</exception>
            <remarks>
            This instance will be automatically added to cpus task collection. For this reason its necessary
            to check the cpus task collection for already existing objects.
            </remarks>
            <example>
            <code>
            // CPU already connected
            // Getting task list from the plc
            cpu.Tasks.Upload();
            cpu.Tasks.Uploaded += new PviEventHandler(Tasks_Uploaded);
            ...
            ...
            private void Tasks_Uploaded(object sender, PviEventArgs e)
            {
            	Task myTask=null;
            	// Creating new task "ab_task" and get connected to it
            	if ( cpu.Tasks.ContainsKey("ab_task") )
            		myTask = cpu.Tasks["ab_task"];		// Task already exists
            	else
            		myTask = new Task(cpu,"ab_task");	// Task not exist -&gt; create
            	myTask.Connect();
            	
            }
            </code>
            </example>
            <param name="cpu">Cpu-object (parent)</param>
            <param name="name">task name</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.#ctor(System.String)">
            <summary>Initializes a new instance of the Task class.</summary>
            <param name="name">The logical name of the task.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.#ctor(BR.AN.PviServices.Cpu,System.String,System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Initializes a new instance of the Task class.</summary>
            <param name="cpu">The reference of the parent cpu object.</param>
            <param name="name">The logical name of the task.</param>
            <param name="reader">The reference to the XML reader.</param>
            <param name="flags">The load Flags for the XML reader functions.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.#ctor(BR.AN.PviServices.Cpu,System.String,BR.AN.PviServices.TaskCollection)">
            <summary>Initializes a new instance of the internal Task class.</summary>
            <param name="cpu">The reference of the parent cpu object.</param>
            <param name="name">The logical name of the task.</param>
            <param name="collection">The  task collection to which to add the object.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.#ctor(BR.AN.PviServices.Cpu,BR.AN.PviServices.PviObjectBrowser,System.String)">
            <summary>
            Initializes a new instance of the Module class
            </summary>
            <param name="cpu">Existing Cpu-object</param>
            <param name="name">object name</param>
            <param name="objBrowser">PVI Object Browser to attach PVI objects.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.Initialize(BR.AN.PviServices.Task)">
            <summary>Initializes a new instance of the internal Task class.</summary>
            <param name="task">The task object to be used to initialize this instance.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.Init(BR.AN.PviServices.Cpu,System.String)">
            <summary>Initializes a new instance of the internal Task class.</summary>
            <param name="cpu">The reference of the parent cpu object.</param>
            <param name="name">The logical name of the task.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.reCreateChildState">
            <summary>Helper to recreate the items after a Service Disconnect</summary>
        </member>
        <member name="M:BR.AN.PviServices.Task.Connect">
            <summary>
            Creates a connection to the task, which runs on the specified device (parent).
            </summary>
            <remarks>
            The "Connected" event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the task-object, when its parent (cpu-object) was not already
            connected. In that case the task-object store this "connect"-action, to connect the
            task-object automatically when the cpu-connected-event received.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Task.Connect(System.Boolean)">
            <summary>Creates a connection to the task, which runs on the specified device (parent).</summary>
            <remarks>The "Connected" event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the task-object, when its parent (cpu-object) was not already
            connected. In that case the task-object store this "connect"-action, to connect the
            task-object automatically when the cpu-connected-event received.</remarks>
            <param name="forceConnection">The flag indicates wheter WaitForParentConnection should be ignored or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>
            Creates a connection of this instance to its processvariable.
            </summary>
            <param name="connectionType">Defines the ConnectionType of this Variable object</param>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the variable object, when its parent (cpu object) was not already
            connected. In that case the variable object store this "connect" action, to connect the
            variable object automatically when the cpu connectedevent received.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Task.getLinkDescription">
            <summary>Helper to get the link description for the object.</summary>
            <returns>The link description for the object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.Connect(System.Boolean,BR.AN.PviServices.ConnectionType)">
            <summary>Creates a connection of this instance to its processvariable.</summary>
            <remarks>
            The Connected event notifies, that the connection was succesful created whereas
            the "Error" event notifies, that an error has occured. (e.g. task does not exist)
            It is also possible to connect the variable object, when its parent (cpu object) was not already
            connected. In that case the variable object store this "connect" action, to connect the
            variable object automatically when the cpu connectedevent received.
            </remarks>
            <param name="forceConnection">The flag indicates wheter WaitForParentConnection should be ignored or not.</param>
            <param name="connectionType">Defines the ConnectionType of this Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.GetConnectionDescription">
            <summary></summary>
            <remarks></remarks>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.Disconnect">
            <summary>
            Disconnects the PviServices task-object from the task at the device
            </summary>
            <remarks>
            The event "Disconnected" notifies that the connection was succesful disconnected.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.Task.Resume">
            <summary>
            Start the Module on the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Task.Start(System.Int32)">
            <summary>
            Starts the Task on the plc
            </summary>
            <param name="numberOfCycles">The number of cycles the task shall run. Zero runs the task for ever!</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.Start">
            <summary>
            Starts the Task on the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Task.RunCycles(System.Int32)">
            <summary>
            Run the task for the specified number of cycles.
            </summary>
            <param name="numberOfCycles">The number of cycles the task shall run.</param>
            <returns>zero on SUCCESS.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.RunCylcles(System.Int32)">
            <summary>
            Set the number of cycles the task should run due to a call on <see cref="M:BR.AN.PviServices.Task.Resume"/>.
            </summary>
            <param name="numberOfCycles">The number of cycles the task shall run.</param>
            <returns>zero on SUCCESS.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.Stop">
            <summary>
            Stops the Task on the plc
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.Task.OnConnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnConnected is called when a Task was connected to the plc. The function raises the Connected event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.OnDisconnected(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnDisconnected is called when an instance was disconnected from the plc. 
            The function raises the Disconnected event
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.OnError(BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnError is called when an instance notifies an error.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.Task.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.RemoveObject">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
            <summary>Helper to </summary>
        </member>
        <member name="M:BR.AN.PviServices.Task.RemoveFromBaseCollections">
            <summary>This method removes the instances references from the PviServices hierarchy.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Task.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.Base)">
            <summary>
            Reads device configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="baseObj">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.OnPviWritten(System.Int32,BR.AN.PviServices.PVIWriteAccessTypes,BR.AN.PviServices.PVIDataStates,System.Int32,System.IntPtr,System.UInt32)">
            <summary>Global CallBack function for PVI write responses.</summary>
            <param name="errorCode">The error code if the write failes.</param>
            <param name="accessType">The type of write response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
            <param name="pData">The optional response data.</param>
            <param name="dataLen">The length of the optional response data.</param>
        </member>
        <member name="M:BR.AN.PviServices.Task.ModuleInfoRequest">
            <summary>
            {secret}
            </summary>
            <returns>0 if successful else the error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.TracePoints_Register(BR.AN.PviServices.TracePointDescriptionCollection)">
            <summary>
            Register trace poits for this particular task.
            Event <see cref="E:BR.AN.PviServices.Task.TracePoints_Registered"/> will be fired if request succeeds and the tracepoints have been registered on the PLC.
            </summary>
            <param name="tracePoints">The collection of trace definitions <see cref="T:BR.AN.PviServices.TracePointDescriptionCollection"/>.</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.TracePoints_Unregister">
            <summary>
            Register trace poits for this particular task.
            Event <see cref="E:BR.AN.PviServices.Task.TracePoints_Unregistered"/> will be fired if request succeeds and the tracepoints have been registered on the PLC.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Task.TracePoints_ReadData">
            <summary>
            Tries to read the trace point data from the PLC.
            Will fire the event <see cref="E:BR.AN.PviServices.Task.TracePoints_DataRead"/> on success.
            </summary>
            <returns>Zero on success.</returns>
        </member>
        <member name="P:BR.AN.PviServices.Task.TracePoints">
            <summary>
            Gets the actually local tarce points of the task. 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Task.Variables">
            <summary>
            Gets the actually uploaded local variables of the task. 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Task.Globals">
            <summary>
            Gets the actually uploaded global variables of the task. 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Task.FullName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.FullName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Task.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Task.TracePoints_Enabled">
            <summary>
            Gets or sets wheter the task object should be marked as objekt which can have trace points.
            This property has to be set bevore Connect() will be called otherwise it has no effect!
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Task.TracePoints_Registered">
            <summary>
            Will be fired when the trace points have been registered. 
            <seealso cref="M:BR.AN.PviServices.Task.TracePoints_Register(BR.AN.PviServices.TracePointDescriptionCollection)"/>.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Task.TracePoints_Unregistered">
            <summary>
            Will be fired when the trace points have been unregistered. 
            <seealso cref="M:BR.AN.PviServices.Task.TracePoints_Unregister"/>.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Task.TracePoints_DataRead">
            <summary>
            Will be fired when the trace point data has been read.
            <seealso cref="M:BR.AN.PviServices.Task.TracePoints_ReadData"/>.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.Task.TracePoints_DataChanged">
            <summary>
            Occurs when the trace point data has changed after a call to <see cref="M:BR.AN.PviServices.Task.TracePoints_ReadData"/>.
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.APIFC_TkInfoRes">
            <summary>
            {secret}
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.TaskClass">
            <summary>
            An instance of this class represents task class information of the Cpu.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskClass.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskClass.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskClass.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskClass.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the configuration to the configuration xml file.</summary>
            <param name="writer">The XML Writer used to save settings.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskClass.FromXmlTextReader(System.Xml.XmlTextReader@,BR.AN.PviServices.ConfigurationFlags,BR.AN.PviServices.APIFC_TkInfoRes@)">
            <summary>
            Reads configuration from xml configuration file and updates baseObject.
            </summary>
            <param name="reader">XmlTextReader used to read xml configuration file.</param>
            <param name="flags">Flags for the configuration load options.</param>
            <param name="taskClassInfo">Base Object to update configuration parameters.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="E:BR.AN.PviServices.TaskClass.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TaskClass.Name">
            <summary>
            Gets the task class name of this intance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TaskClass.Type">
            <summary>
            Gets the <see cref="T:BR.AN.PviServices.TaskClassType"/> of this intance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TaskClass.State">
            <summary>
            Gets the <see cref="T:BR.AN.PviServices.ProgramState"/> of the TaskClass.
            </summary>
            <remarks>
            Returns one of the following states:
            NonExisting, Unrunnable, Idle, Running, Stopped, Starting, Stopping, Resuming, Reseting
            </remarks>
        </member>
        <member name="P:BR.AN.PviServices.TaskClass.UserData">
            <summary>
            Gets or sets the UserData for this instance.
            </summary>
            <remarks>
            The UserData-property provides a position to store special user information for a
            PviServices object.
            </remarks>
        </member>
        <member name="T:BR.AN.PviServices.TaskClassCollection">
            <summary>Implements a collection of B+R TaskClass objects.</summary>
            <remarks>Do not mix up TaskCollection and TaskClassCollection!</remarks>
        </member>
        <member name="M:BR.AN.PviServices.TaskClassCollection.OnError(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This function is called when an error occurs. This function raises the Error event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.TaskClassCollection.Upload">
            <summary>
            Uploads all specified task classe depending on the plc.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskClassCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskClassCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskClassCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="P:BR.AN.PviServices.TaskClassCollection.Item(System.Int32)">
            <summary>
            Gets a TaskClass object by its index
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.TaskCollectionEventArgs">
            <summary>
            An instance of this class defines additional eventinformation for task objects
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollectionEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.TaskCollection)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="tasks">Task list</param>
        </member>
        <member name="P:BR.AN.PviServices.TaskCollectionEventArgs.Tasks">
            <summary>
            Gets a collection of referenced objects
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.TaskCollection">
            <summary>
            An instance of this class represents a collection of task objects.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">Parent object (e.g. Cpu object)</param>
            <param name="name">Collection name</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>
            Connects each object of the collection using a specific connection type.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Disconnect(System.Boolean)">
            <summary>Disconnects each Task object of the collection.</summary>
            <remarks>The Disconnected event notifies each successful aborted connection.</remarks>
            <param name="noResponse">If true the object will not receive a response for the request!</param>      
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Disconnect">
            <summary>
            Disconnects each object of the collection
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnConnected(BR.AN.PviServices.Base,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a task object within the list is being connected.
            The method raises the Connected event.
            </summary>
            <param name="sender">Task object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnDisconnected(BR.AN.PviServices.Task,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a module object within the list is being disconnected.
            The method raises the Disconnected event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="task">Task object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnError(BR.AN.PviServices.Task,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a task object within the list notifies an error.
            The method raises the Error event.
            </summary>
            <param name="task">Task object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnTaskDownloaded(BR.AN.PviServices.Task,BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnTaskDownloaded is called when a task object within the collection was downloaded 
            to the plc. The function raises the Downloadad event
            </summary>
            <param name="task">Task object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnTaskUploaded(BR.AN.PviServices.Task,BR.AN.PviServices.PviEventArgs)">
            <summary>
            OnTaskUploaded is called when a task object within the collection was uploaded 
            from the plc. The function raises the Uploaded event
            </summary>
            <param name="task">Task object</param>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnCollectionDownloaded(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all Collection download requests are responded.		
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnCollectionUploaded(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all collection upload requests are responded.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnCollectionDownloadProgress(BR.AN.PviServices.ModuleCollectionProgressEventArgs)">
            <summary>
            Not supported.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnCollectionUploadProgress(BR.AN.PviServices.ModuleCollectionProgressEventArgs)">
            <summary>
            Not supported.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnDownloadProgress(BR.AN.PviServices.Module,BR.AN.PviServices.ModuleEventArgs)">
            <summary>
            The function raises the DownloadProgress event
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="module">Module object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.CleanUp">
            <summary>Helper to get rid of the modules in the parent objects collection.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.CleanUp(System.Boolean)">
            <summary>Helper to get rid of the modules in the parent objects collection.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnUploadProgress(BR.AN.PviServices.Module,BR.AN.PviServices.ModuleEventArgs)">
            <summary>
            The function raises the DownloadProgress event
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="module">Module object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Add(BR.AN.PviServices.Task)">
            <summary>
            Adds a Task object to the collection.
            </summary>
            <param name="task">Task object</param>
            <returns>Errorcode: 0..OK, otherwise error</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Remove(System.String)">
            <summary>Removes the specified item from the collection.</summary>
            <param name="key">The key is the name of the task to be removed.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Remove(System.Object)">
            <summary>Removes the specified item from the collection.</summary>
            <param name="key">The key may either be a task object or the name of the task.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnError(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            OnError is called when an Error occurs.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Upload">
            <summary>
            Uploads each task from the plc.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.UpdateTaskList">
            <summary>Updates ModuleList for the Logger</summary>
            <returns>0 on success, -1 if request already set, -2 if cpu is not connected</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.Upload(System.String)">
            <summary>
            Uploads each task/module file from the plc to a specific path.
            </summary>
            <param name="path">An absolute path for the BR module</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.TaskListFromCB(System.Int32,System.IntPtr,System.UInt32,System.Boolean)">
            <summary>Reads the ModuleInfoList from CallbackData</summary>
            <param name="errorCode">The error number.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data.</param>
            <param name="isANSL">Is it an ANSL connection or NOT.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.DiagnosticModeUpdateModuleInfo(BR.AN.PviServices.APIFC_DiagModulInfoRes,System.Int32,System.Int32@)">
            <summary>Updates logger info for a single object of this collection.</summary>
            <param name="diagModInfo">The diagnostic info for the module.</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <returns>0, on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.UpdateModuleInfo(BR.AN.PviServices.APIFC_ModulInfoRes,System.Int32,System.Int32@)">
            <summary>Updates Module Info for a single element</summary>
            <param name="moduleInfoStruct">The ModuleInformation</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <returns>0, on success</returns>
        </member>
        <member name="M:BR.AN.PviServices.TaskCollection.UpdateModuleInfo(BR.AN.PviServices.ModuleInfoDecription,System.Int32,System.Int32@,System.Boolean)">
            <summary>Updates Module Info for a single element</summary>
            <param name="moduleInfoStruct">The ModuleInformation</param>
            <param name="errorCode">ErrorCode from CB</param>
            <param name="updateFlags">Update the collection flags: 1 ... loggers, 2 ... modules, 4 ... Tasks</param>
            <returns>0, on success</returns>
        </member>
        <member name="P:BR.AN.PviServices.TaskCollection.Item(System.String)">
            <summary>
            Gets a Task object by its index.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TaskCollection.Service">
            <summary>
            Gets the Service object of this instance.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.ModuleCreated">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.ModuleChanged">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.ModuleDeleted">
            <summary>
            Work in process.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.TaskUploaded">
            <summary>Occurs when the Module from the plc is uploaded</summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.Downloaded">
            <summary>Occurs when the Module from the plc is downloaded</summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.UploadProgress">
            <summary>Occurs when upload is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.DownloadProgress">
            <summary>Occurs when download is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.CollectionDownloaded">
            <summary>Occurs when all download requests of each object are responded.</summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.CollectionUploaded">
            <summary>Occurs when all upload requests of each object are responded.</summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.CollectionUploadProgress">
            <summary>Occurs when upload is in progress.</summary>
        </member>
        <member name="E:BR.AN.PviServices.TaskCollection.CollectionDownloadProgress">
            <summary>Occurs when download is in progress.</summary>
        </member>
        <member name="T:BR.AN.PviServices.TraceData">
            <summary>
            Implements the trace data
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TraceData.#ctor(System.Byte[],BR.AN.PviServices.IECDataTypes)">
            <summary>
            Initializes a new instance of a trace point data.
            </summary>
            <param name="dataBytes">The variable data bytes.</param>
            <param name="dataType">The IEC data type.</param>
        </member>
        <member name="M:BR.AN.PviServices.TraceData.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TraceData.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TraceData.DataType">
            <summary>
            Gets the data type of the trace point variable
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TraceData.Data">
            <summary>
            Gets the Data Byte array of the trace point variable
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.TraceDataCollection">
            <summary>
            The collection of trace data
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TraceDataCollection.#ctor">
            <summary>
            Initializes a new instance of a trace point data.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TraceDataCollection.Add(BR.AN.PviServices.TraceData)">
            <summary>
            Add a data point
            </summary>
            <param name="trcData">The trace data.</param>
        </member>
        <member name="M:BR.AN.PviServices.TraceDataCollection.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TraceDataCollection.Count">
            <summary>
            gets the numer of items the trace data collection contains
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TraceDataCollection.Item(System.Int32)">
            <summary>
            Returns the TracePointVariable for the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>null on ERROR els the TracePointVariable object.</returns>
        </member>
        <member name="T:BR.AN.PviServices.TraceDataEventHandler">
            <summary>Implements the delegate for variable specific events.</summary>
            <param name="sender">The object which caused this event</param>
            <param name="e">The variable event parameters.</param>
        </member>
        <member name="T:BR.AN.PviServices.TraceDataEventArgs">
            <summary>An instance of this class defines additional eventinformation for variable objects</summary>
        </member>
        <member name="M:BR.AN.PviServices.TraceDataEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.TraceDataCollection)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="traceDataCol">The collection of trace data.</param>
        </member>
        <member name="P:BR.AN.PviServices.TraceDataEventArgs.TraceData">
            <summary>
            The collection of available trace data
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.TracePoint">
            <summary>
            Implementaion of the variable TRACE for multiple variables
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.#ctor(BR.AN.PviServices.Task,System.String)">
            <summary>
            Initializes a new instace of a trace point.
            </summary>
            <remarks>If the method <see cref="M:BR.AN.PviServices.TracePoint.AddTraceVariable(System.String)"/> is NOT used to add trace variables, the name will be used as trace variable.</remarks>
            <param name="task">The task object used as parent.</param>
            <param name="name">The name of the trace point.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.AddTraceVariable(System.String)">
            <summary>
            Adds a trace variable to the trace point
            </summary>
            <remarks>DOES NOT care about duplicate entries!!!</remarks>
            <param name="nameOfTraceVariable">The name of the trace variable to add.</param>
            <returns>The ArrayList index at which the value has been added.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.Dispose(System.Boolean,System.Boolean)">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.UpdateTraceData(System.IntPtr,System.UInt32)">
            <summary>
            Helper to update the trace data
            </summary>
            <param name="pData">The data pointer.</param>
            <param name="dataLength">The length of data.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.Connect">
            <summary>
            Establish the connection to the PLC object.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.GetConnectionDescription">
            <summary>Call this method to get the connection descriptionString for the object.</summary>
            <returns>The connection description used to create the PVI object.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.Disconnect">
            <summary>
            Disconnects this instance of its variable on the plc.
            </summary>
            <remarks>
            The Disconnected event notifies the disconnection.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.Disconnect(System.Boolean)">
            <summary>
            Disconnects this instance of its variable on the plc.
            </summary>
            <remarks>
            The Disconnected event notifies the disconnection.
            </remarks>
            <param name="noResponse">Do we want a response or not. Default the response will be sent.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.OnPviEvent(System.Int32,BR.AN.PviServices.EventTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI events.</summary>
            <param name="errorCode">The error code if linking the object failed.</param>
            <param name="eventType">The type of event..</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePoint.OnTraceDataChanged(System.Int32,BR.AN.PviServices.Action,System.IntPtr,System.UInt32)">
            <summary>
            The function is called when the instances value was changed. The function raises the TraceDataChanged event.
            </summary>
            <param name="error">The error number.</param>
            <param name="action">The action code.</param>
            <param name="pData">The data pointer if error is zero.</param>
            <param name="dataLength">The length of data in pData.</param>
        </member>
        <member name="P:BR.AN.PviServices.TracePoint.TraceVariables">
            <summary>
            Gets the collection of trace variables
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePoint.FullName">
            <summary>
            Gets the FullName of this instance.
            <seealso cref="P:BR.AN.PviServices.Base.FullName"></seealso> 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePoint.PviPathName">
            <summary>
            Gets the <see cref="P:BR.AN.PviServices.Base.PviPathName"/> of this instance.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePoint.Offset">
            <summary>
            Gets or sets the offset of the position in the trace module
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePoint.RuntimeObjectIndex">
            <summary>
            Gets or sets the options for the RuntimeObjectIndex for INA2000.
            Use this options for arrays which have a start index != 0.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.TracePoint.TraceDataChanged">
            <summary>
            Occurs when the Value of the processvariable changes
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.TracePointCollection">
            <summary>
            Implements a collection of trace points
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointCollection.#ctor(BR.AN.PviServices.Task)">
            <summary>
            Initializes a new instance of a tracepoint variable array.
            </summary>
            <param name="task">The parent object.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointCollection.Add(BR.AN.PviServices.TracePoint)">
            <summary>
            Adds a new trace point variable
            </summary>
            <param name="trcPoint">The trace point object.</param>
            <returns>The zero based ArrayList index at which the value has been added. -2 if an item with the same name allready exists.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointCollection.Contains(System.String)">
            <summary>
            Call this method to get the index of the trace point variable which matches the specified name.
            </summary>
            <param name="nameOfVariable">The name of the variable to search for.</param>
            <returns>-1 on ERROR else the zero base index of the trace variable.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointCollection.Clear">
            <summary>
            Helper to remove existing items
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointCollection.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointCollection.Count">
            <summary>
            gets the numer of items the trace variable collection contains
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointCollection.Item(System.Int32)">
            <summary>
            Returns the TracePoint for the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>null on ERROR els the TracePoint object.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointCollection.Keys">
            <summary>
            Gets the names of the variable trace point objects
            </summary>
            <returns>The names of the trace point variables.</returns>
        </member>
        <member name="T:BR.AN.PviServices.TracePointsData">
            <summary>This class implements all properties and access methods for B+R trace point description used to activate trace points for a task.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsData.#ctor">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsData.#ctor(System.IntPtr,System.UInt32,System.Int32@)">
            <summary>
            Initializes the instance
            </summary>
            <param name="pData">The data pointer.</param>
            <param name="dataLen">The total number of bytes.</param>
            <param name="dataOffset">The offset where to start reading from the pData.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsData.UpdateFormat(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Updates the format description
            </summary>
            <param name="formatTypes">The array of IEC format IDs.</param>
            <param name="typeLenghts">The array of type length definitions.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsData.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsData.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsData.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsData.ToString">
            <summary>
            Overrides the basic ToString implementaion.
            </summary>
            <returns>The describing attributes of this class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsData.ID">
            <summary>Gets the tracepoint name.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsData.Offset">
            <summary>Gets the trace point offset.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsData.TraceData">
            <summary>Gets the trace point offset.</summary>
        </member>
        <member name="T:BR.AN.PviServices.TracePointsDataCollection">
            <summary>Implements a collection of TracePointsData objectss.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsDataCollection.#ctor">
            <summary>Initializes the collection</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsDataCollection.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsDataCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsDataCollection.ReadResponseData(System.IntPtr,System.UInt32)">
            <summary>
            Adds a new Tracepoint to the collection.
            </summary>
            <param name="pData">The data pointer.</param>
            <param name="dataLen">The total number of bytes.</param>
            <returns>0xFFFFFFFF on success else the ID of the record which causes a problem.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsDataCollection.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsDataCollection.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointsDataCollection.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsDataCollection.SyncRoot">
            <summary>
            SyncRoot
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsDataCollection.IsSynchronized">
            <summary>
            Returns true if access to the collection is synchronized (thread-safe). 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsDataCollection.Count">
            <summary>
            Gets the element count of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsDataCollection.Keys">
            <summary>
            Gets an ICollection containing the keys of this collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsDataCollection.Item(System.Int32)">
            <summary>Indexer function for array access.</summary>
            <param name="indexer">The index of the array item.</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointsDataCollection.Item(System.UInt32)">
            <summary>Indexer function for key access.</summary>
            <param name="key">The unique key (the ID of the TracePointDescription object).</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="T:BR.AN.PviServices.TPFormatEventArgs">
            <summary>
            An instances of this class defines additional event information.
            </summary>
            <remarks>
            e.g. An error event was notified by a Variable-object and the ErrorCode is 
            the additional information for this event.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.TPFormatEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.IntPtr,System.UInt32)">
            <summary>Initializes a new instance of the ErrorEventArgs class.</summary>
            <param name="name">Logical name of the PviServices object</param>
            <param name="address">Logical address of the PviServices object</param>
            <param name="errorCode">ErrorCode of the PviServices object</param>
            <param name="language">Language of the PviServices object</param>
            <param name="action">The action which caused the error.</param>
            <param name="pData">The data pointer.</param>
            <param name="dataLen">The total number of bytes.</param>
        </member>
        <member name="P:BR.AN.PviServices.TPFormatEventArgs.TracePointsFormat">
            <summary>Gets optional additional error text.</summary>
            <value>ErrorInfo</value>
        </member>
        <member name="T:BR.AN.PviServices.TPDataEventArgs">
            <summary>
            An instances of this class defines additional event information.
            </summary>
            <remarks>
            e.g. An error event was notified by a Variable-object and the ErrorCode is 
            the additional information for this event.
            </remarks>
        </member>
        <member name="M:BR.AN.PviServices.TPDataEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,System.IntPtr,System.UInt32)">
            <summary>Initializes a new instance of the ErrorEventArgs class.</summary>
            <param name="name">Logical name of the PviServices object</param>
            <param name="address">Logical address of the PviServices object</param>
            <param name="errorCode">ErrorCode of the PviServices object</param>
            <param name="language">Language of the PviServices object</param>
            <param name="action">The action which caused the error.</param>
            <param name="pData">The data pointer.</param>
            <param name="dataLen">The total number of bytes.</param>
        </member>
        <member name="P:BR.AN.PviServices.TPDataEventArgs.TracePointsData">
            <summary>Gets optional additional error text.</summary>
            <value>ErrorInfo</value>
        </member>
        <member name="T:BR.AN.PviServices.TPRegisterEventHandler">
            <summary>Event declaration for trace format events.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.TPDataEventHandler">
            <summary>Event declaration for common PVI events.</summary>
            <param name="sender">The object which caused to send the event.</param>
            <param name="e">The additional event attributes.</param>
        </member>
        <member name="T:BR.AN.PviServices.TracePointDataCollection">
            <summary>Implements a collection of TracePointData objectss.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDataCollection.#ctor">
            <summary>Initializes the collection</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDataCollection.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDataCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDataCollection.Add(BR.AN.PviServices.TracePointData)">
            <summary>
            Adds a new Tracepoint to the collection.
            </summary>
            <param name="tpData">The trace point data.</param>
            <returns>The number of elements in the collecion on success else -1.
            If -1 the ID is not unique!</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDataCollection.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDataCollection.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDataCollection.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDataCollection.SyncRoot">
            <summary>
            SyncRoot
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDataCollection.IsSynchronized">
            <summary>
            Returns true if access to the collection is synchronized (thread-safe). 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDataCollection.Count">
            <summary>
            Gets the element count of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDataCollection.Item(System.Int32)">
            <summary>Indexer function for array access.</summary>
            <param name="indexer">The index of the array item.</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="T:BR.AN.PviServices.TracePointData">
            <summary>This class implements all properties and access methods for B+R trace point data points for a task.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.#ctor">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.#ctor(System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.Int32@)">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.UpdateFormat(System.UInt32,System.UInt32)">
            <summary>
            Updates the format and the type length of the traced variable
            </summary>
            <param name="formatType">format type</param>
            <param name="typeLength">length of type in BYTEs</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.UpdateData(BR.AN.PviServices.IECDataTypes,System.UInt32,System.Byte[])">
            <summary>
            Updates the format the type length and the data of the traced variable
            </summary>
            <param name="formatType">format type</param>
            <param name="typeLength">length of type in BYTEs</param>
            <param name="dataBytes">The data BYTEs</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.DataTo(System.TypeCode)">
            <summary>
            Converts the data to the given type
            </summary>
            <param name="conversionType">The data type used for conversion.</param>
            <returns>The correspondig data on succes else null.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointData.ToString">
            <summary>
            Overrides the basic ToString implementaion.
            </summary>
            <returns>The describing attributes of this class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointData.IECType">
            <summary>Gets the trace point variable IEC type.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointData.TypeLength">
            <summary>Gets the trace point variable type lenght in BYTEs.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointData.DataBytes">
            <summary>Gets the trace point variable type lenght in BYTEs.</summary>
        </member>
        <member name="T:BR.AN.PviServices.TracePointFormatCollection">
            <summary>Implements a collection of TracePointFormat objectss.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormatCollection.#ctor">
            <summary>Initializes the collection</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormatCollection.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormatCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormatCollection.ReadResponseData(System.IntPtr,System.UInt32)">
            <summary>
            Interprets the traceforat received from the PLC.
            </summary>
            <param name="pData">The data pointer.</param>
            <param name="dataLen">The total number of bytes.</param>
            <returns>The number of elements in the collecion on success else -1.
            If -1 the ID is not unique!</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormatCollection.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormatCollection.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormatCollection.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormatCollection.SyncRoot">
            <summary>
            SyncRoot
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormatCollection.IsSynchronized">
            <summary>
            Returns true if access to the collection is synchronized (thread-safe). 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormatCollection.Count">
            <summary>
            Gets the element count of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormatCollection.Keys">
            <summary>
            Gets an ICollection containing the keys of this collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormatCollection.Item(System.Int32)">
            <summary>Indexer function for array access.</summary>
            <param name="indexer">The index of the array item.</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormatCollection.Item(System.UInt32)">
            <summary>Indexer function for key access.</summary>
            <param name="key">The unique key (the ID of the TracePointFormat object).</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="T:BR.AN.PviServices.TracePointFormat">
            <summary>This class implements all properties and access methods for B+R trace point format description used in th response of activating trace points for a task.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormat.#ctor">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormat.#ctor(System.IntPtr,System.UInt32,System.Int32@)">
            <summary>
            Initializes the instance
            </summary>
            <param name="pData">The data pointer.</param>
            <param name="dataLen">The total number of bytes.</param>
            <param name="dataOffset">The offset where to start reading from the pData.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormat.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormat.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormat.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointFormat.ToString">
            <summary>
            Overrides the basic ToString implementaion.
            </summary>
            <returns>The describing attributes of this class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormat.ID">
            <summary>Gets the tracepoint name.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormat.VariableFormats">
            <summary>Gets the trace point variable format description.
            The variables are sorted in the order they are activated by the call to TracePoints_Register/>.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointFormat.VariableLengths">
            <summary>Gets the trace point variable lenght description.
            The variables are sorted in the order they are activated by the call to TracePoints_Register/>.</summary>
        </member>
        <member name="T:BR.AN.PviServices.TracePointDescription">
            <summary>This class implements all properties and access methods for B+R trace point description used to activate trace points for a task.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.#ctor">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.#ctor(System.UInt32,System.UInt64,System.Collections.ArrayList,System.UInt32)">
            <summary>
            Initializes the instance
            </summary>
            <param name="id">The unique identifier of the trace point.</param>
            <param name="offset">The offset of the trace point.</param>
            <param name="listOfVariables">The list of varibles for the trace point.</param>
            <param name="recordLen">The number of bytes for the PVI record for this trace point.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.UpdateFormat(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Updates the format description
            </summary>
            <param name="formatTypes">The array of IEC format IDs.</param>
            <param name="typeLenghts">The array of type length definitions.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.UpdateFormatNData(BR.AN.PviServices.TracePointsData)">
            <summary>
            Updates the format and data description
            </summary>
            <param name="tpDat">The trace data from read request.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescription.ToString">
            <summary>
            Overrides the basic ToString implementaion.
            </summary>
            <returns>The describing attributes of this class.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescription.RecordLen">
            <summary>Gets the number of bytes for the PVI record for this trace point.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescription.ID">
            <summary>Gets the tracepoint name.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescription.Offset">
            <summary>Gets the trace point offset.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescription.ListOfVariables">
            <summary>Gets the trace point offset.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescription.UserData">
            <summary>Gets or sets the user data.
            This member can be used in client applications to link to this tracepoint definition, or store additional data.
            The client application isresponseable for creating and deleting this member!</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescription.TraceData">
            <summary>Gets the trace point offset.</summary>
        </member>
        <member name="T:BR.AN.PviServices.TracePointDescriptionCollection">
            <summary>Implements a collection of TracePointDescription objectss.</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.#ctor">
            <summary>Initializes the collection</summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.Add(System.UInt32,System.UInt64,System.Collections.ArrayList)">
            <summary>
            Adds a new Tracepoint to the collection.
            </summary>
            <param name="id">The unique identifier of the trace point.</param>
            <param name="offset">The offset of the trace point.</param>
            <param name="listOfVariables">the list of varibles for the trace point.</param>
            <returns>The number of elements in the collecion on success else -1.
            If -1 the ID is not unique!</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.UpdateFormat(BR.AN.PviServices.TracePointFormatCollection)">
            <summary>
            Updates the datype and the type lenght info for the tracepoints
            </summary>
            <param name="traceFormats"></param>
            <returns>0xFFFFFFFF on success else the ID of the trace point definition which could not be updated.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.UpdateTracePointsData(BR.AN.PviServices.TracePointFormatCollection)">
            <summary>
            Updates the dat for the tracepoints
            </summary>
            <param name="traceFormats"></param>
            <returns>0xFFFFFFFF on success else the ID of the trace point definition which could not be updated.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.UpdateTracePointsData(BR.AN.PviServices.TracePointsDataCollection)">
            <summary>
            Updates the dat for the tracepoints
            </summary>
            <param name="traceDataCol">The collection of traced data.</param>
            <returns>0xFFFFFFFF on success else the ID of the trace point definition which could not be updated.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.Clear">
            <summary>
            Empty collection
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.Dispose">
            <summary>
            Implement IDisposable. Do not make this method virtual. A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Disposing or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointDescriptionCollection.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescriptionCollection.SyncRoot">
            <summary>
            SyncRoot
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescriptionCollection.IsSynchronized">
            <summary>
            Returns true if access to the collection is synchronized (thread-safe). 
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescriptionCollection.Count">
            <summary>
            Gets the element count of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescriptionCollection.Keys">
            <summary>
            Gets an ICollection containing the keys of this collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescriptionCollection.PVIDataSize">
            <summary>
            The data size for PVI recod sets when sending the request.
            
            (25 + strlen())*number of elements
            
            lenth    id      reserved    type    offset   string     null
            4        4       4           4       8        strlen()   1
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescriptionCollection.Item(System.Int32)">
            <summary>Indexer function for array access.</summary>
            <param name="indexer">The index of the array item.</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="P:BR.AN.PviServices.TracePointDescriptionCollection.Item(System.UInt32)">
            <summary>Indexer function for key access.</summary>
            <param name="key">The unique key (the ID of the TracePointDescription object).</param>
            <returns>The object if it is in the list</returns>
        </member>
        <member name="T:BR.AN.PviServices.TracePointVariable">
            <summary>
            Implements the tracepoint variable object
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TracePointVariable.#ctor(BR.AN.PviServices.TracePoint,System.String)">
            <summary>
            Initializes a new instance of a tracepoint variable.
            </summary>
            <param name="tracePoint">The parent trace point ths variable belongs to.</param>
            <param name="name">The name of the trcae point variable.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointVariable.SetDataBytes(System.Int32,System.Byte[])">
            <summary>
            Helper to update the data bytes
            </summary>
            <param name="dataType">The IEC data type code.</param>
            <param name="newValue">The new data.</param>
        </member>
        <member name="M:BR.AN.PviServices.TracePointVariable.ToString">
            <summary>Overrides the basic implementation.</summary>
            <returns>The string representation of the connection.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TracePointVariable.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointVariable.Name">
            <summary>
            Gets the name of the trace point variable
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointVariable.DataType">
            <summary>
            Gets the data type of the trace point variable
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TracePointVariable.Data">
            <summary>
            Gets the Data Byte array of the trace point variable
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.TraceVariableCollection">
            <summary>
            Implements some kind of arry list for trace point variables
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TraceVariableCollection.#ctor(BR.AN.PviServices.TracePoint)">
            <summary>
            Initializes a new instance of a tracepoint variable array.
            </summary>
            <param name="tracePoint">The parent trace point ths variable belongs to.</param>
        </member>
        <member name="M:BR.AN.PviServices.TraceVariableCollection.Add(System.String)">
            <summary>
            Adds a new trace point variable
            </summary>
            <param name="name">The name of the trace point variable, which has to be unique!!</param>
            <returns>The zero based ArrayList index at which the value has been added. -2 if an item with the same name allready exists.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TraceVariableCollection.Contains(System.String)">
            <summary>
            Call this method to get the index of the trace point variable which matches the specified name.
            </summary>
            <param name="nameOfVariable">The name of the variable to search for.</param>
            <returns>-1 on ERROR else the zero base index of the trace variable.</returns>
        </member>
        <member name="M:BR.AN.PviServices.TraceVariableCollection.Clear">
            <summary>
            Helper to remove existing items
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.TraceVariableCollection.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="P:BR.AN.PviServices.TraceVariableCollection.Count">
            <summary>
            gets the numer of items the trace variable collection contains
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.TraceVariableCollection.Item(System.Int32)">
            <summary>
            Returns the TracePointVariable for the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>null on ERROR els the TracePointVariable object.</returns>
        </member>
        <member name="P:BR.AN.PviServices.TraceVariableCollection.Keys">
            <summary>
            Gets the names of the variable trace point objects
            </summary>
            <returns>The names of the trace point variables.</returns>
        </member>
        <member name="T:BR.AN.PviServices.IECDataTypes">
            <summary>Specifies the IEC data type of an instance of the Value class.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.UNDEFINED">
            <summary>Invalid data type</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.BOOL">
            <summary>A simple type representing Boolean values of true or false. 8 Bit containing a boolean value FALSE=0 or TRUE=1</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.SINT">
            <summary>An integral type representing signed 8-bit integers with values from -128 to 127.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.INT">
            <summary>An integral type representing signed 16-bit integers with values from -32768 to 32767.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.DINT">
            <summary>An integral type representing signed 32-bit integers with values from -2147483648 to 2147483647.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.USINT">
            <summary>An integral type representing unsigned 8-bit integers with values from 0 to 255.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.UINT">
            <summary>An integral type representing unsigned 16-bit integers with values from 0 to 65535.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.UDINT">
            <summary>An integral type representing unsigned 32-bit integers with values from 0 to 4294967295.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.REAL">
            <summary>A 32 Bit floating point type representing values ranging from approximately 1.5 x 10-45 to 3.4 x 10 38 with a precision of 7 digits.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.STRING">
            <summary>A class type representing a character strings.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.ULINT">
            <summary>An integral type representing unsigned 64-bit integers with values from 0 to 18446744073709551615.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.DATE_AND_TIME">
            <summary>Date and Time as 32 bit integer. Date and time in Seconds since 1.1.1968.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.TIME">
            <summary>32 Bit time in ms since midnight.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.DATE">
            <summary>32 bit integer representation of a date.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.LREAL">
            <summary>A floating point type representing values ranging from approximately 5.0 x 10-324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.TOD">
            <summary>32 Bit time in ms since midnight.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.TIME_OF_DAY">
            <summary>32 Bit time in ms since midnight.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.BYTE">
            <summary>An integral type representing signed 8-bit integers with values from 0 to 255.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.WORD">
            <summary>An integral type representing unsigned 16-bit integers with values from 0 to 65535.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.DWORD">
            <summary>An integral type representing unsigned 32-bit integers with values from 0 to 4294967295.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.LWORD">
            <summary>An integral type representing unsigned 64-bit integers with values from 0 to 18446744073709551615.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.WSTRING">
            <summary>A wide character string</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.DT">
            <summary>Date and Time as 32 bit integer. Date and time in Seconds since 1.1.1968.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.LINT">
            <summary>An integral type representing signed 64-bit integers with values from -9223372036854775808 to 9223372036854775807.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.STRUCT">
            <summary>NOT an integral type.</summary>
        </member>
        <member name="F:BR.AN.PviServices.IECDataTypes.IECDATATYPES_COUNT">
            <summary>Max value for known data types</summary>
        </member>
        <member name="T:BR.AN.PviServices.DataType">
            <summary>Specifies the type of an instance of the Value class.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Unknown">
            <summary>Invalid data type</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Boolean">
            <summary>A simple type representing Boolean values of true or false.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.SByte">
            <summary>An integral type representing signed 8-bit integers with values from -128 to 127.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Int16">
            <summary>An integral type representing signed 16-bit integers with values from -32768 to 32767.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Int32">
            <summary>An integral type representing signed 32-bit integers with values from -2147483648 to 2147483647.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Int64">
            <summary>An integral type representing signed 64-bit integers with values from -9223372036854775808 to 9223372036854775807.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Byte">
            <summary>An integral type representing unsigned 8-bit integers with values from 0 to 255.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.UInt16">
            <summary>An integral type representing unsigned 16-bit integers with values from 0 to 65535.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.UInt32">
            <summary>An integral type representing unsigned 32-bit integers with values from 0 to 4294967295.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.UInt64">
            <summary>An integral type representing unsigned 64-bit integers with values from 0 to 18446744073709551615.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Single">
            <summary>A floating point type representing values ranging from approximately 1.5 x 10-45 to 3.4 x 10 38 with a precision of 7 digits.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Double">
            <summary>A floating point type representing values ranging from approximately 5.0 x 10-324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.TimeSpan">
            <summary>32 Bit time in ms since midnight.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.DateTime">
            <summary>Date and Time as 32 bit integer. Date and time in Seconds since 1.1.1968.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.String">
            <summary>A class type representing a character strings.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Structure">
            <summary>Represents a staructure</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.WString">
            <summary>MBC- String. Each character is represented by two bytes.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.TimeOfDay">
            <summary>Time of the day in 32 bit interger format. MSecs since midnight.<seealso cref="F:BR.AN.PviServices.DataType.TimeSpan"/></summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Date">
            <summary>32 bit integer representation of a date.<seealso cref="F:BR.AN.PviServices.DataType.DateTime"/></summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.WORD">
            <summary>An integral type representing unsigned 16-bit integers with values from 0 to 65535.e</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.DWORD">
            <summary>An integral type representing unsigned 32-bit integers with values from 0 to 4294967295.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.Data">
            <summary>Any userdefined data as a byte- array of a fixed size. The response buffer contains the spezified number of unformated bytes.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.LWORD">
            <summary>An integral type representing unsigned 64-bit integers with values from 0 to 18446744073709551615.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.UInt8">
            <summary>An integral type representing unsigned 8-bit integers with values from 0 to 255.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.TOD">
            <summary>Same as TIME_OF_DAY.</summary>
        </member>
        <member name="F:BR.AN.PviServices.DataType.DT">
            <summary>Same as DATE_AND_TIME.</summary>
        </member>
        <member name="T:BR.AN.PviServices.Value">
            <summary>
            An instance of this class epresents a Variable value.
            
            Conversion methods:
            A conversion which cannot yield a meaningful result throws InvalidCastException. 
            An exception will not be thrown if the conversion of a numeric type results in a loss of 
            precision (that is, the loss of some least significant digits). 
            However, an exception will be thrown if the result is larger than can be represented 
            by the particular conversion method's return value type.
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.Value.propUInt32Val">
            <summary>UINt32 helper for System.DateTime members</summary>
        </member>
        <member name="M:BR.AN.PviServices.Value.OnDisposing(System.Boolean)">
            <summary>Virtual helper to signal disposing.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Dispose">
            <summary>Implement IDisposable.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Value.Dispose(System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor">
            <summary>Initializes a new instance of the Value class with invalid properties</summary>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Value class to the Boolean value
            Instances of this type have values of either true or false
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Boolean,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the Boolean value
            Instances of this type have values of either true or false
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Boolean[])">
            <summary>
            Initializes a new instance of the Value class to the Boolean field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the Value class to the SByte value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.SByte,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the SByte value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.SByte[])">
            <summary>
            Initializes a new instance of the Value class to the SByte field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the Value class to the Int16 value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Int16,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the Int16 value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Int16[])">
            <summary>
            Initializes a new instance of the Value class to the Int16 field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Value class to the Int32 value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Int32,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the Int32 value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the Value class to the Int32 field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Byte,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the Byte value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Value class to the Byte value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Value class to the Byte field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the Value class to the UInt16 value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt16,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the UInt16 value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the Value class to the UInt16 field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the Value class to the UInt32 value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt32,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the UInt32 value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the Value class to the UInt32 field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the Value class to the UInt64 value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt64,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the UInt64 value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.UInt64[])">
            <summary>
            Initializes a new instance of the Value class to the UInt64 field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the Value class to the Single value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Single,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the Single value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the Value class to the Single field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Value class to the Double value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Double,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the Double value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Value class to the Double field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the Value class to the TimeSpan value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.TimeSpan,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the TimeSpan value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.TimeSpan[])">
            <summary>
            Initializes a new instance of the Value class to the TimeSpan field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the Value class to the DateTime value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.DateTime,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the DateTime value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.DateTime[])">
            <summary>
            Initializes a new instance of the Value class to the DateTime field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Value class to the String value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.String,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the String value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the Value class to the String field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the Value class to the Object value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Object,BR.AN.PviServices.Variable)">
            <summary>
            Initializes a new instance of the Value class to the Object value
            </summary>
            <param name="value"></param>
            <param name="parentVar">The variable parent.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.CheckBuffers(System.UInt64)">
            <summary>Helper to checkt the PV buffers </summary>
            <returns>True if further conversion is possible else false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.UInt32)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Int32)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.UInt16)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Int16)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Byte)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.SByte)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Single)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Double)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Boolean)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Object)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Object,System.Int32)">
            <summary>Initializes the Value class to the Object value</summary>
            <param name="value">The value to set.</param>
            <param name="index">The zero base index of the array element to be set.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the Value class to the Object field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.Assign(System.Object[])">
            <summary>
            Initializes the Value class to the Object field value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BR.AN.PviServices.Value.CopyToSystemDataTypeArray(System.IntPtr,System.Array,System.Collections.ArrayList@)">
            <summary>Converts the value of this instance to an equivalent system datat type value. If it is an array this method will end in an system data type array of the desired type.</summary>
            <param name="pNewData">The data pointer.</param>
            <param name="dataArray">The array of values.</param>
            <param name="changedMembers">The members which have changed.</param>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToSystemDataTypeArray(System.Byte[],System.Int32)">
            <summary>Converts the value of this instance to an equivalent system datat type value. If it is an array this method will end in an system data type array of the desired type.</summary>
            <param name="bytes">The data byte array.</param>
            <param name="offset">The byte offset.</param>
            <returns>System data type value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Boolean value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent SByte value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A SByte value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Int16 value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Int16 value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Int32 value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Int32 value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Byte value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Byte value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent UInt16 value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A UInt16 value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent UInt32 value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A UInt32 value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent UInt64 value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A UInt32 value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Single value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Single value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToSystemDataTypeValue(System.IFormatProvider)">
            <summary>Helper function to get a system data type compliant value.</summary>
            <param name="provider">The format provider object.</param>
            <returns>The system data type compliant value.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Double value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Double value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToTimeSpan(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent TimeSpan value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A TimeSpan value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent DateTime value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A DateTime value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent String value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A String value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.BinaryToStringUNI">
            <summary>Call this member to get a string representation of the binary data.
             This can be used to transform any data on the PLC stored as string in any type of array (e.g. byte array) to a string value.
             No conversion is done!
             The function does not care about alignment!
             The function detects if the binary data is in ANSI or UNICODE format.</summary>
            <returns>A string containing the binary data copied to a string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.BinaryToAnsiString">
            <summary>Call this member to get a string representation of the binary data.
             This can be used to transform any data on the PLC stored as string in any type of array (e.g. byte array) to a string value.
             No conversion is done!
             The function does not care about alignment!
             The function detects if the binary data is in ANSI or UNICODE format.</summary>
            <returns>A string containing the binary data copied to a string.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToEnum">
            <summary>Converts the int value to its enum name. 
            If the value is out of range the method will simply return the int value.</summary>
            <returns>A String equivalent to the enumerated value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToString">
            <summary>
            Converts the value of this instance to an equivalent String value
            </summary>
            <returns>A String value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToStringUNI(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The String specifying the format to use. </param>
            <param name="provider">The IFormatProvider to use to format the value or a null reference 
            (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting 
            of the operating system. </param>
            <returns>A String containing the value of the current instance in the specified format.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToAnsiString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The String specifying the format to use. </param>
            <param name="provider">The IFormatProvider to use to format the value or a null reference 
            (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting 
            of the operating system. </param>
            <returns>A String containing the value of the current instance in the specified format.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The String specifying the format to use. </param>
            <param name="provider">The IFormatProvider to use to format the value or a null reference 
            (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting 
            of the operating system. </param>
            <returns>A String containing the value of the current instance in the specified format.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Char value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Char value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Decimal value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>A Decimal value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Int64 value using the 
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>An Int64 value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.GetTypeCode">
            <summary>Returns the TypeCode for this instance.</summary>
            <returns>The enumerated constant that is the TypeCode of the class or value type.
            System.TypeCode.Empty for objects which are not identfied yet.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an Object of the specified Type that has an equivalent value, 
            using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The Type to which the value of this instance is converted.</param>
            <param name="provider">An IFormatProvider interface implementation that supplies</param>
            <returns>An Object instance of type conversionType whose value is equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.GetHashCode">
            <summary>
            Returns a hash code for the current Value object
            </summary>
            <returns>A hash code for the current Object</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(BR.AN.PviServices.Value)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Boolean)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Single)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.SByte)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Int16)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Int32)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Int64)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.Byte)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.UInt16)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.UInt32)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Equals(System.UInt64)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An Value to compare with this instance</param>
            <returns>true if value is an instance of Value and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Addition(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            The addition operator computes the sum of the two instances of the Value class
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Division(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            The division operator (/) divides its first value type operand by its second.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Multiply(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            The multiplication operator (*) computes the product of two instances of the Value class
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Subtraction(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            The subtraction operator computes the difference between the two instances of the Value class
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Increment(BR.AN.PviServices.Value)">
            <summary>
            The increment operator (++) increments the value by 1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Decrement(BR.AN.PviServices.Value)">
            <summary>
            The decrement operator (--) decrements the value by 1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Boolean">
            <summary>
            Converts the instance of the Value class to a Boolean value
            An InvalidCastException exception is thrown for invalid conversions
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Boolean value</returns>
            <example><code>
            Boolean myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Boolean[]">
            <summary>
            Converts the instance of the Value class to a Boolean field value
            An InvalidCastException exception is thrown for invalid conversions
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Boolean value</returns>
            <example><code>
            Boolean myVal[] = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.SByte">
            <summary>
            Converts the instance of the Value class to a SByte value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The SByte value</returns>
            <example><code>
            SByte myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.SByte[]">
            <summary>
            Converts the instance of the Value class to a SByte field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The SByte field value</returns>
            <example><code>
            SByte myVal[] = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Int16">
            <summary>
            Converts the instance of the Value class to a Int16 value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Int16 value</returns>
            <example><code>
            Int16 myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Int16[]">
            <summary>
            Converts the instance of the Value class to a Int16 field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Int16 field value</returns>
            <example><code>
            Int16[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Int32">
            <summary>
            Converts the instance of the Value class to a Int32 value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Int32 value</returns>
            <example><code>
            Int32 myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Int32[]">
            <summary>
            Converts the instance of the Value class to a Int32 field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Int32 field value</returns>
            <example><code>
            Int32[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Int64">
            <summary>
            Converts the instance of the Value class to a Int64 value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Int64 value</returns>
            <example><code>
            Int64 myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Int64[]">
            <summary>
            Converts the instance of the Value class to a Int64 field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Int64 field value</returns>
            <example><code>
            Int64[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Byte">
            <summary>
            Converts the instance of the Value class to a Byte value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Byte value</returns>
            <example><code>
            Byte myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Byte[]">
            <summary>
            Converts the instance of the Value class to a Byte field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Byte field value</returns>
            <example><code>
            Byte[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.UInt16">
            <summary>
            Converts the instance of the Value class to a UInt16 value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The UInt16 value</returns>
            <example><code>
            UInt16 myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.UInt16[]">
            <summary>
            Converts the instance of the Value class to a UInt16 field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The UInt16 field value</returns>
            <example><code>
            UInt16[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.UInt32">
            <summary>
            Converts the instance of the Value class to a UInt32 value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The UInt32 value</returns>
            <example><code>
            UInt32 myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.UInt32[]">
            <summary>
            Converts the instance of the Value class to a UInt32 field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The UInt32 field value</returns>
            <example><code>
            UInt32[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.UInt64">
            <summary>
            Converts the instance of the Value class to a UInt64 value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The UInt64 value</returns>
            <example><code>
            UInt64 myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.UInt64[]">
            <summary>
            Converts the instance of the Value class to a UInt64 field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The UInt64 field value</returns>
            <example><code>
            UInt64[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Single">
            <summary>
            Converts the instance of the Value class to a Single value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Single value</returns>
            <example><code>
            Single myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Single[]">
            <summary>
            Converts the instance of the Value class to a Single field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Single field value</returns>
            <example><code>
            Single[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Double">
            <summary>
            Converts the instance of the Value class to a Double value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Double value</returns>
            <example><code>
            Double myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.Double[]">
            <summary>
            Converts the instance of the Value class to a Double field value
            An InvalidCastException exception is thrown for conversions from DateTime, TimeSpan or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The Double field value</returns>
            <example><code>
            Double[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.TimeSpan">
            <summary>
            Converts the instance of the Value class to a TimeSpan value
            An InvalidCastException exception is thrown for conversions from Boolean, DateTime, String or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The TimeSpan value</returns>
            <example><code>
            TimeSpan myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.TimeSpan[]">
            <summary>
            Converts the instance of the Value class to a TimeSpan field value
            An InvalidCastException exception is thrown for conversions from Boolean, DateTime, String or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The TimeSpan field value</returns>
            <example><code>
            TimeSpan[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.DateTime">
            <summary>
            Converts the instance of the Value class to a DateTime value
            An InvalidCastException exception is thrown for conversions from Boolean, TimeSpan, String or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The DateTime value</returns>
            <example><code>
            DateTime myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.DateTime[]">
            <summary>
            Converts the instance of the Value class to a DateTime field value
            An InvalidCastException exception is thrown for conversions from Boolean, TimeSpan, String or Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The DateTime field value</returns>
            <example><code>
            DateTime[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.String">
            <summary>
            Converts the instance of the Value class to a String value
            An InvalidCastException exception is thrown for conversions from Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The String value</returns>
            <example><code>
            String myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(BR.AN.PviServices.Value)~System.String[]">
            <summary>
            Converts the instance of the Value class to a String field value
            An InvalidCastException exception is thrown for conversions from Structure
            </summary>
            <param name="value">Instance of the Value class</param>
            <returns>The String field value</returns>
            <example><code>
            String[] myVal = myVar.Value;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Boolean)~BR.AN.PviServices.Value">
            <summary>
            Converts a Boolean value to an instance of the Value class
            </summary>
            <param name="value">A Boolean value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Boolean myVal = true;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Boolean[])~BR.AN.PviServices.Value">
            <summary>
            Converts a Boolean field value to an instance of the Value class
            </summary>
            <param name="value">A Boolean field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Boolean[] myVal = new Boolean[2];
            myVal[0] = true;
            myVal[1] = false;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.SByte)~BR.AN.PviServices.Value">
            <summary>
            Converts an SByte value to an instance of the Value class
            </summary>
            <param name="value">An SByte value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            SByte myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.SByte[])~BR.AN.PviServices.Value">
            <summary>
            Converts an SByte field value to an instance of the Value class
            </summary>
            <param name="value">An SByte field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            SByte[] myVal = new SByte[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Int16)~BR.AN.PviServices.Value">
            <summary>
            Converts an Int16 value to an instance of the Value class
            </summary>
            <param name="value">An Int16 value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Int16 myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Int16[])~BR.AN.PviServices.Value">
            <summary>
            Converts an Int16 field value to an instance of the Value class
            </summary>
            <param name="value">An Int16 field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Int16[] myVal = new Int16[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Int32)~BR.AN.PviServices.Value">
            <summary>
            Converts an Int32 value to an instance of the Value class
            </summary>
            <param name="value">An Int32 value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Int32 myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Int32[])~BR.AN.PviServices.Value">
            <summary>
            Converts an Int32 field value to an instance of the Value class
            </summary>
            <param name="value">An Int32 field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Int32[] myVal = new Int32[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Int64)~BR.AN.PviServices.Value">
            <summary>
            Converts an Int64 value to an instance of the Value class
            </summary>
            <param name="value">An Int64 value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Int64 myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Int64[])~BR.AN.PviServices.Value">
            <summary>
            Converts an Int64 field value to an instance of the Value class
            </summary>
            <param name="value">An Int64 field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Int64[] myVal = new Int64[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Byte)~BR.AN.PviServices.Value">
            <summary>
            Converts an Byte value to an instance of the Value class
            </summary>
            <param name="value">An Byte value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Byte myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Byte[])~BR.AN.PviServices.Value">
            <summary>
            Converts a Byte field value to an instance of the Value class
            </summary>
            <param name="value">A Byte field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Byte[] myVal = new Byte[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.UInt16)~BR.AN.PviServices.Value">
            <summary>
            Converts an UInt16 value to an instance of the Value class
            </summary>
            <param name="value">An UInt16 value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            UInt16 myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.UInt16[])~BR.AN.PviServices.Value">
            <summary>
            Converts an UInt16 field value to an instance of the Value class
            </summary>
            <param name="value">An UInt16 field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            UInt16[] myVal = new UInt16[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.UInt32)~BR.AN.PviServices.Value">
            <summary>
            Converts an UInt32 value to an instance of the Value class
            </summary>
            <param name="value">An UInt32 value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            UInt32 myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.UInt32[])~BR.AN.PviServices.Value">
            <summary>
            Converts an UInt32 field value to an instance of the Value class
            </summary>
            <param name="value">An UInt32 field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            UInt32[] myVal = new UInt32[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.UInt64)~BR.AN.PviServices.Value">
            <summary>
            Converts an UInt64 value to an instance of the Value class
            </summary>
            <param name="value">An UInt64 value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            UInt64 myVal = 22;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.UInt64[])~BR.AN.PviServices.Value">
            <summary>
            Converts an UInt64 field value to an instance of the Value class
            </summary>
            <param name="value">An UInt64 field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            UInt64[] myVal = new UInt64[2];
            myVal[0] = 1;
            myVal[2] = 2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Single)~BR.AN.PviServices.Value">
            <summary>
            Converts a Single value to an instance of the Value class
            </summary>
            <param name="value">A Single value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Single myVal = 22.33;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Single[])~BR.AN.PviServices.Value">
            <summary>
            Converts a Single field value to an instance of the Value class
            </summary>
            <param name="value">A Single field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Single[] myVal = new Single[2];
            myVal[0] = 1.1;
            myVal[2] = 2.2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Double)~BR.AN.PviServices.Value">
            <summary>
            Converts a Double value to an instance of the Value class
            </summary>
            <param name="value">A Double value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Double myVal = 22.33;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.Double[])~BR.AN.PviServices.Value">
            <summary>
            Converts a Double field value to an instance of the Value class
            </summary>
            <param name="value">A Double field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            Double[] myVal = new Double[2];
            myVal[0] = 1.1;
            myVal[2] = 2.2;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.TimeSpan)~BR.AN.PviServices.Value">
            <summary>
            Converts a TimeSpan value to an instance of the Value class
            </summary>
            <param name="value">A TimeSpan value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            TimeSpan myVal = new TimeSpan(25000);
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.TimeSpan[])~BR.AN.PviServices.Value">
            <summary>
            Converts a TimeSpan field value to an instance of the Value class
            </summary>
            <param name="value">A TimeSpan field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            DoTimeSpanuble[] myVal = new TimeSpan[2];
            myVal[0] = 10000;
            myVal[2] = 20000;
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.DateTime)~BR.AN.PviServices.Value">
            <summary>
            Converts a DateTime value to an instance of the Value class
            </summary>
            <param name="value">A DateTime value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            DateTime myVal = new DateTime(2004,1,23,14,00,00);
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.DateTime[])~BR.AN.PviServices.Value">
            <summary>
            Converts a DateTime field value to an instance of the Value class
            </summary>
            <param name="value">A DateTime field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            DateTime[] myVal = new DateTime[4];
            ...
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.String)~BR.AN.PviServices.Value">
            <summary>
            Converts a String value to an instance of the Value class
            </summary>
            <param name="value">A String value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            String myVal = "Hallo";
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Implicit(System.String[])~BR.AN.PviServices.Value">
            <summary>
            Converts a String field value to an instance of the Value class
            </summary>
            <param name="value">A String field value</param>
            <returns>A new instance of the Value class</returns>
            <example><code>
            String[] myVal = new String[2];
            myVal[0] = "Hallo";
            myVal[2] = "world";
            myVar.Value = myVal;
            </code></example>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.Boolean)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.Single)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.Double)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.SByte)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.Int16)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.Int32)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.Int64)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.Byte)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.UInt16)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.UInt32)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Equality(BR.AN.PviServices.Value,System.UInt64)">
            <summary>
            The equality operator (==) returns true if the two instances of the Value class are equal, false otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the two instances of the Value class are equal, false otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,BR.AN.PviServices.Value)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.Byte)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.UInt16)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.UInt32)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.UInt64)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.Boolean)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.Single)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.Double)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.SByte)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.Int16)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.Int32)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.op_Inequality(BR.AN.PviServices.Value,System.Int64)">
            <summary>
            The inequality operator (!=) returns false if the two instances of the Value class are equal, true otherwise. 
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>false if the two instances of the Value class are equal, true otherwise</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.CalculateArrayOffset(System.Int32,System.Int32)">
            <summary>Calculate the absolut index in the memory pool.</summary>
            <param name="dim">The dimension for which to calculate the offset.</param>
            <param name="offset">The offset value. (can also be a negativ value)</param>
            <returns>The zero base index for the array.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.InitializeArrayDimensions">
            <summary>Internal helper for initialization of the extended properties.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Value.InitializeExtendedAttributes">
            <summary>Internal helper for initialization of the extended properties.</summary>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToIECString">
            <summary>Converts the value of this instance to an equivalent IEC String value</summary>
            <returns>A String value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ToIECString(System.Int32)">
            <summary>Converts the value of this instance to an equivalent IEC String value</summary>
            <returns>A String value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.ConvertToIECString(System.Int32)">
            <summary>Converts the value of this instance to an equivalent String value using the 
            specified culture-specific formatting information.</summary>
            <returns>A String value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:BR.AN.PviServices.Value.Clone(BR.AN.PviServices.Value)">
            <summary>Initializes a new instance of the Value class.</summary>
            <param name="cloneValue"></param>
        </member>
        <member name="E:BR.AN.PviServices.Value.Disposing">
            <summary>Work in process.</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.IsPG2000String">
            <summary>Gets if this item is interpreted as PG2000 string.</summary>
            <value>IsPG2000String</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.TypePreset">
            <summary>Gets wheter the Datatype has been set by the user or not.</summary>
            <value>TypePreset</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.DataSize">
            <summary>
            Gets or sets the datatype of this instance of the Value class
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.IsOfTypeArray">
            <summary>Gets wheter it is an array or not (VS=a or arrayLength bigger than 1)</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.ArrayMinIndex">
            <summary>Gets the minimum index for arrays if the array does not start at index 0</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.ArrayMaxIndex">
            <summary>Gets the maximum index for arrays if the array does not start at index 0</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.DataType">
            <summary>Gets or sets the datatype of this instance of the Value class</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.IECDataType">
            <summary>Gets the data type of this instance.</summary>
            <value>DataType of the instance.
            The following data types are suported:
                System.TypeCode.Boolean
             System.TypeCode.Byte
             System.TypeCode.DateTime
             System.TypeCode.Double
             System.TypeCode.Int16
             System.TypeCode.Int32
             System.TypeCode.Int64
             System.TypeCode.SByte
             System.TypeCode.Single
             System.TypeCode.String
             System.TypeCode.Object   (structres)
             System.TypeCode.DateTime
             System.TypeCode.UInt16
             System.TypeCode.UInt32
             System.TypeCode.UInt64
            </value>
        </member>
        <member name="P:BR.AN.PviServices.Value.SystemDataType">
            <summary>Gets the data type of this instance.</summary>
            <value>DataType of the instance.
            The following data types are suported:
                System.TypeCode.Boolean
             System.TypeCode.Byte
             System.TypeCode.DateTime
             System.TypeCode.Double
             System.TypeCode.Int16
             System.TypeCode.Int32
             System.TypeCode.Int64
             System.TypeCode.SByte
             System.TypeCode.Single
             System.TypeCode.String
             System.TypeCode.Object   (structres)
             System.TypeCode.DateTime
             System.TypeCode.UInt16
             System.TypeCode.UInt32
             System.TypeCode.UInt64
            </value>
        </member>
        <member name="P:BR.AN.PviServices.Value.TypeLength">
            <summary>
            Gets or sets the typelength of this instance of the Value class
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.ArrayLength">
            <summary>Gets the number of array elements for this instance of a Value class.
            If the variable is of type multidimensional array this will be the total number of elements!</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.ArrayDimensions">
            <summary>Gets the number of elements for each dimension.
            The size of the array is the numer of dimensions.
            If the array has only one dimension this member will be null. (in this case ArrayLength will be the number of elements)
            Starting with 2 or more dimensions the member will be set.</summary>
            <value>The array includes the numer of elements for each array dimension. 
            If null the varible data type is not set yet or teh variable is not a multidimensional array.</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.IsEnum">
            <summary>Gets if the value will be an enumeration.
            Enumerations have a value and a corresponding string representation.
            -1 ... undefined; 0 ... NOT an enum; 1 ... It is an enum.</summary>
            <value>The value will be an enumeration.
            Enumerations have a value and a corresponding string representation.</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.DerivedFrom">
            <summary>Gets the derivation this type is derived from.</summary>
            <value>The derivation this type is derived from.</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.IsDerived">
            <summary>Gets if the data type is derived from an existing type.
            -1 ... undefined; 0 ... NOT derived; 1 ... It is derived! call <seealso cref="M:BR.AN.PviServices.Variable.ReadExtendedTypeInfo"/> to get further information about the derivation.</summary>
            <value>Is the data type deirved or not.</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.IsBitString">
            <summary>Gets if the value is of type Bit- String or not.		
            -1 ... undefined; 0 ... NOT a BitString type; 1 ... It is a Bit-String type.</summary>
            <value>Is the value of type Bit- String or not.</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.Enumerations">
            <summary>Gets the array of enumerated values.
            The order of the elements correspond to the order of the definition of the enumeration.</summary>
            <value>The array of enumerated values.</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.ArrayData">
            <summary>Gets or sets the System.Type compatible array of values.
            This member is only valid for arrays which have a size bigger than 1!
            Setting the ValueArray will only be supported for the same type of array</summary>
            <value>ValueArray</value>
        </member>
        <member name="P:BR.AN.PviServices.Value.DataPtr">
            <summary>
            Gets the ptr to the data
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.Item(System.String)">
            <summary>
            Gets or sets the value of a field member
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.Item(System.Int32[])">
            <summary>Gets or sets the value of a structure member</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.Item(System.Int32)">
            <summary>Gets or sets the value of a structure member</summary>
        </member>
        <member name="P:BR.AN.PviServices.Value.Parent">
            <summary>
            Gets or sets the Parent object of this instance
            </summary>
        </member>
        <member name="F:BR.AN.PviServices.VariableAttribute.None">
            <summary>No attribute</summary>
        </member>
        <member name="F:BR.AN.PviServices.VariableAttribute.Input">
            <summary>Input</summary>
        </member>
        <member name="F:BR.AN.PviServices.VariableAttribute.Output">
            <summary>Output</summary>
        </member>
        <member name="F:BR.AN.PviServices.VariableAttribute.Constant">
            <summary>Constant</summary>
        </member>
        <member name="F:BR.AN.PviServices.VariableAttribute.Variable">
            <summary>Variable</summary>
        </member>
        <member name="T:BR.AN.PviServices.VariableCollectionEventArgs">
            <summary>
            An instance of this class defines additional eventinformation for variable objects
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollectionEventArgs.#ctor(System.String,System.String,System.Int32,System.String,BR.AN.PviServices.Action,BR.AN.PviServices.VariableCollection)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Object name</param>
            <param name="address">Object address</param>
            <param name="error">Errorcode</param>
            <param name="language">Language</param>
            <param name="action">Action</param>
            <param name="variables">Variable list</param>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollectionEventArgs.Variables">
            <summary>
            Gets a collection of referenced variable objects
            </summary>
        </member>
        <member name="T:BR.AN.PviServices.VariableCollection">
            <summary>
            An instance of this class represents a collection of variable objects.
            Every cpu or task object has its own variable collection object to manage their global (for cpu)
            and their local (for task) variables.
            More over such an instance provides several properties and methods similar to a Variable object and more.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the VariableCollection class.
            </summary>
            <param name="parent">Parent of the instance</param>
            <param name="name">Collection name</param>
            <example>
            <code>
            // Create a new Service object
            Service service = new Service();
            service.Connect();
            
            // Create a new Cpu objekt 
            Cpu cpu = new Cpu(service,"Cpu");
            
            // Set connection properties
            cpu.Connection.DeviceType = BR.AN.PviServices.DeviceType.TcpIp;
            cpu.Connection.TcpIp.SourceStation = 1;
            cpu.Connection.TcpIp.DestinationStation = 50;
            cpu.Connection.TcpIp.DestinationIpAddress = "10.43.70.250";
            
            // Connect Cpu object
            cpu.Connect();
            
            // Create 3 global variable objects
            // Each Variable will automatically added into the parents (cpu) variable collection.
            Variable var_01 = new Variable(cpu,"var_01");
            Variable var_02 = new Variable(cpu,"var_02");
            Variable var_03 = new Variable(cpu,"var_03");
            
            // It is possible to handle each variable object for its own. That means, to call for each
            // object the Connect method or to set for each object properties like Active or RefreshTime.
            // But the services of collections can do the same for the whole collection.
            cpu.Variables.RefreshTime = 100; // Set RefreshTime of all global variables.
            cpu.Variables.Active = true;     // Activates all global variables.
            cpu.Variables.Connect();         // Connects all global variables.
            
            // The VariableCollection also includes events like Connected or Activated.
            // So its also possible to get informed when the connection of all elements succeded.
            cpu.Variables.Connected += new CollectionEventHandler(GlobalVariablesConnected);
            </code>
            For managing local and global variables within one VariableCollection it is possible to 
            create a new VariableCollection
            <code>
            Cpu cpu = new Cpu(serviceObj,"Cpu_01");
            // Uploading global variables
            cpu.Variables.Upload();
            // Uploading local variables
            Task task = new Task(cpu,"Task_01");
            task.Variables.Upload();
            
            // Creating new VariableCollection
            VariableCollection myCollection = new VariableCollection(null,"MyCollection");
            // Adding different variable objects
            myCollection.Add(cpu.Variables["globVar_01"]);
            myCollection.Add(cpu.Variables["globVar_03"]);
            myCollection.Add(task.Variables["locVar_01"]);
            myCollection.Add(task.Variables["locVar_05"]);
            myCollection.Add(task.Variables["locVar_07"]);
            
            // Connects all variables which were added before
            myCollection.Connect();
            
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Connect(BR.AN.PviServices.ConnectionType)">
            <summary>Connects each Variable object of the collection using the ConnectionType property.</summary>
            <remarks>The Connected event notifies each successful created connection.</remarks>
            <param name="connectionType">ConnectionType</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionConnected(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all connect requests of each PviServices object within the collection are responded.
            This method raises the CollectionConnected event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Disconnect(System.Boolean)">
            <summary>Disconnects each Variable object of the collection.</summary>
            <remarks>The Disconnected event notifies each successful aborted connection.</remarks>
            <param name="noResponse">If true the object will not receive a response for the request!</param>      
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Disconnect">
            <summary>Disconnects each Variable object of the collection.</summary>
            <remarks>The Disconnected event notifies each successful aborted connection.</remarks>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionDisconnected(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all disconnect requests of each PviServices object within the collection are responded.
            This method raises the CollectionDisconnected event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Add(System.Object,System.Object)">
            <summary>Adds an object of type Variable to this instance.</summary>
            <param name="key">The key to be used.</param>
            <param name="value">The variable object to be add.</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Add(BR.AN.PviServices.Variable)">
            <summary>Adds an object of type Variable to this instance.</summary>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Remove(System.String)">
            <summary></summary>
            <remarks></remarks>
            <param name="key"></param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Remove(BR.AN.PviServices.Variable)">
            <summary>Removes an object of type Variable to this instance.</summary>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.WriteScaling">
            <summary>
            This function writes the actual defined scaling points to
            each variable on the PLC.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.WriteValues">
            <summary>
            Writes foreach Variable object its actual value
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnConnected(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable object within the list is being connected.
            The method raises the Connected event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnDisconnected(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable object within the list is being disconnected.
            The method raises the Disconnected event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnError(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable object within the list notifies an error.
            The method raises the Error event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnValueChanged(BR.AN.PviServices.Variable,BR.AN.PviServices.VariableEventArgs)">
            <summary>
            This method is called when a variable objects value within the list changes.
            The method raises the ValueChanged event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnDataValidated(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable object within the list notifies valid data.
            The method raises the DataValidated event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnActivated(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable object within the list was activated.
            The method raises the Activated event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnDeactivated(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable object within the list was deactivated.
            The method raises the Deactivated event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnValueRead(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable objects value within the list was read.
            The method raises the ValueRead event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnValueWritten(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable objects value within the list was written.
            The method raises the ValueRead event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnPropertyChanged(BR.AN.PviServices.Variable,BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when a variable objects property (e.g. RefreshTime) within the list was changed.
            The method raises the PropertyChanged event.
            </summary>
            <param name="e">PviEventArgs object</param>
            <param name="variable">Variable object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionDataValidated(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when at least one Variable object within the list notifies valid data.
            This method raises the CollectionDataValidated event.
            </summary>
            <param name="e">CollectionEventArgs object</param>	
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionActivated(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all activate requests of each Variable object within the collection are responded.
            This method raises the CollectionActivated event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionDeactivated(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all deactivate requests of each Variable object within the collection are responded.
            This method raises the CollectionDeactivated event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionValuesRead(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all value read requests of each Variable object within the collection are responded.
            This method raises the CollectionValuesRead event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionValuesWritten(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all value read requests of each Variable object within the collection are responded.
            This method raises the CollectionValuesRead event.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnCollectionPropertyChanged(BR.AN.PviServices.CollectionEventArgs)">
            <summary>
            This method is called when all property write request (e.g. RefreshTime) of each variable object within the
            collection are responded.
            </summary>
            <param name="e">CollectionEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Upload">
            <summary>
            Uploads Variable objects depending on the collections parent.
            </summary>
            <remarks>
            The Uploaded event notifies that all variables were successful uploaded.
            </remarks>
            <example>
            <code>
            // Create a new Service object
            Service service = new Service();
            service.Connect();
            // Create a new Cpu objekt 
            Cpu cpu = new Cpu(service,"Cpu");
            // Set connection properties
            cpu.Connection.DeviceType = BR.AN.PviServices.DeviceType.TcpIp;
            cpu.Connection.TcpIp.SourceStation = 1;
            cpu.Connection.TcpIp.DestinationStation = 50;
            cpu.Connection.TcpIp.DestinationIpAddress = "10.43.70.250";
            // Connect Cpu object
            cpu.Connect();
            cpu.Variables.Upload();
            </code>
            </example>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnUploaded(BR.AN.PviServices.PviEventArgs)">
            <summary>
            This method is called when each PviServices object is successful uploaded.
            The method raises the Uploaded event.
            </summary>
            <param name="e">PviEventArgs object</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.ReadValues">
            <summary>
            This method reads each variable objects value within the collection.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.OnPviRead(System.Int32,BR.AN.PviServices.PVIReadAccessTypes,BR.AN.PviServices.PVIDataStates,System.IntPtr,System.UInt32,System.Int32)">
            <summary>Global CallBack function for PVI read responses.</summary>
            <param name="errorCode">The error code if the read failes.</param>
            <param name="accessType">The type of read response.</param>
            <param name="dataState">The state of the process or link object data.</param>
            <param name="pData">The pointer to the data.</param>
            <param name="dataLen">The length of the data to be copied to the internal buffer.</param>
            <param name="option">The option can be used to specify special event sinks.</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.ToXMLTextWriter(System.Xml.XmlTextWriter@,BR.AN.PviServices.ConfigurationFlags)">
            <summary>Saves the attributes of the instance to the configuration xml file.</summary>
            <param name="writer">The reference of the XML writer.</param>
            <param name="flags">Flags for the configuration save options.</param>
            <returns>0 if successful else an error code.</returns>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Dispose(System.Boolean,System.Boolean)">
            <summary>Helper to free extra allocated memory.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
            <param name="removeFromCollection">If true it is valid to remove the item from the collection too.</param>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:BR.AN.PviServices.VariableCollection.CleanUp(System.Boolean)">
            <summary>Helper to remove members from the collection and also from the logical object structures.</summary>
            <param name="disposing">Flag indicating wheter to dispose or not.</param>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.Item(System.String)">
            <summary>
            {secret}Returns true if each Variable object contains valid data
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.DataValid">
            <summary>
            {secret}Returns true if each Variable object contains valid data
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.Active">
            <summary>
            Gets or sets the Active flag for each variable element of the collection
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.RefreshTime">
            <summary>
            Gets or sets the RefreshTime of each variable element of the collection
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.WriteValueAutomatic">
            <summary>
            Gets or sets the WriteValueAutomatic state of each element of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.Hysteresis">
            <summary>
            Gets or sets the hysteresis value of each element of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.Scaling">
            <summary>
            Gets or sets the scaling of each element of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.Polling">
            <summary>
            Gets or sets the polling state
            of each element of the collection.
            </summary>
        </member>
        <member name="P:BR.AN.PviServices.VariableCollection.Access">
            <summary>
            Gets or sets the access type of each element of the collection
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.CollectionDataValidated">
            <summary>
            Occurs when at least one Variable object within the list notifies valid data.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.CollectionActivated">
            <summary>
            Occurs when all activate requests of each Variable object within the collection are responded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.CollectionDeactivated">
            <summary>
            Occurs when all deactivate requests of each Variable object within the collection are responded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.CollectionValuesRead">
            <summary>
            Occurs when all value read request of each Variable object within the collection are responded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.CollectionValuesWritten">
            <summary>
            Occurs when all value write request of each Variable object within the collection are responded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.CollectionPropertyChanged">
            <summary>
            Occurs when all (e. g. hysteresis write requests) of each variable object within the collection are responded.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.DataValidated">
            <summary>
            Occurs when a listobjects value data is valid.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.Activated">
            <summary>
            Occurs when a listobject is successfully activated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.Deactivated">
            <summary>
            Occurs when a listobject is successfully deactivated.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.ValueRead">
            <summary>
            Occurs when a listobjects value is successfully read.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.ValueWritten">
            <summary>
            Occurs when a listobjects value is successfully written.
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.ValueChanged">
            <summary>
            Occurs when the Value of the processvariable changed
            </summary>
        </member>
        <member name="E:BR.AN.PviServices.VariableCollection.PropertyChanged">
            <summary>
            Ocuurs when listobjects property changed (e.g. RefreshTime)
            </summary>
        </member>
    </members>
</doc>
